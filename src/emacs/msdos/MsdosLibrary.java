package emacs.msdos;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>msdos</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("msdos") 
@Runtime(CRuntime.class) 
public class MsdosLibrary {
	static {
		BridJ.register();
	}
	/// <i>native declaration : msdos.h</i>
	public static final int XM_FAILURE = (int)-1;
	/// <i>native declaration : msdos.h</i>
	public static final int ButtonReleaseMask = (int)0;
	/// <i>native declaration : msdos.h</i>
	public static final int XM_IA_SELECT = (int)3;
	/// <i>native declaration : msdos.h</i>
	public static final int XM_NO_SELECT = (int)2;
	/// <i>native declaration : msdos.h</i>
	public static final int XM_SUCCESS = (int)1;
	/// <i>native declaration : msdos.h:74</i>
	/// <i>native declaration : msdos.h:74</i>
	public static abstract class XMenuActivate_callback_callback extends Callback<XMenuActivate_callback_callback > {
		public abstract void apply(Pointer<Byte > charPtr1, int int1, int int2);
	};
	/**
	 * Original signature : <code>int dos_ttraw(tty_display_info*)</code><br>
	 * <i>native declaration : msdos.h:1</i>
	 */
	public static native int dos_ttraw(Pointer<MsdosLibrary.tty_display_info > tty_display_infoPtr1);
	/**
	 * Original signature : <code>int dos_ttcooked()</code><br>
	 * <i>native declaration : msdos.h:3</i>
	 */
	public static native int dos_ttcooked();
	/**
	 * Original signature : <code>int dos_get_saved_screen(char**, int*, int*)</code><br>
	 * <i>native declaration : msdos.h:5</i>
	 */
	public static native int dos_get_saved_screen(Pointer<Pointer<Byte > > charPtrPtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2);
	/**
	 * Original signature : <code>int dos_set_keyboard(int, int)</code><br>
	 * <i>native declaration : msdos.h:7</i>
	 */
	public static native int dos_set_keyboard(int int1, int int2);
	/**
	 * Original signature : <code>void dos_set_window_size(int*, int*)</code><br>
	 * <i>native declaration : msdos.h:9</i>
	 */
	public static native void dos_set_window_size(Pointer<Integer > intPtr1, Pointer<Integer > intPtr2);
	/**
	 * Original signature : <code>int getdefdir(int, char*)</code><br>
	 * <i>native declaration : msdos.h:11</i>
	 */
	public static native int getdefdir(int int1, Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void unixtodos_filename(char*)</code><br>
	 * <i>native declaration : msdos.h:13</i>
	 */
	public static native void unixtodos_filename(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void dostounix_filename(char*)</code><br>
	 * <i>native declaration : msdos.h:15</i>
	 */
	public static native void dostounix_filename(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>char* rootrelativepath(char*)</code><br>
	 * <i>native declaration : msdos.h:17</i>
	 */
	public static native Pointer<Byte > rootrelativepath(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void init_environment(int, char**, int)</code><br>
	 * <i>native declaration : msdos.h:19</i>
	 */
	public static native void init_environment(int int1, Pointer<Pointer<Byte > > charPtrPtr1, int int2);
	/**
	 * Original signature : <code>void internal_terminal_init()</code><br>
	 * <i>native declaration : msdos.h:21</i>
	 */
	public static native void internal_terminal_init();
	/**
	 * Original signature : <code>void initialize_msdos_display(terminal*)</code><br>
	 * <i>native declaration : msdos.h:23</i>
	 */
	public static native void initialize_msdos_display(Pointer<MsdosLibrary.terminal > terminalPtr1);
	/**
	 * Original signature : <code>void mouse_init()</code><br>
	 * <i>native declaration : msdos.h:26</i>
	 */
	public static native void mouse_init();
	/**
	 * Original signature : <code>void mouse_on()</code><br>
	 * <i>native declaration : msdos.h:28</i>
	 */
	public static native void mouse_on();
	/**
	 * Original signature : <code>void mouse_off()</code><br>
	 * <i>native declaration : msdos.h:30</i>
	 */
	public static native void mouse_off();
	/**
	 * Original signature : <code>void mouse_moveto(int, int)</code><br>
	 * <i>native declaration : msdos.h:32</i>
	 */
	public static native void mouse_moveto(int int1, int int2);
	/**
	 * Original signature : <code>void x_set_menu_bar_lines(frame*)</code><br>
	 * <i>native declaration : msdos.h:47</i>
	 */
	public static native void x_set_menu_bar_lines(Pointer<MsdosLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int x_pixel_width(frame*)</code><br>
	 * <i>native declaration : msdos.h:49</i>
	 */
	public static native int x_pixel_width(Pointer<MsdosLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int x_pixel_height(frame*)</code><br>
	 * <i>native declaration : msdos.h:51</i>
	 */
	public static native int x_pixel_height(Pointer<MsdosLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>XMenu* XMenuCreate(Display*, Window, char*)</code><br>
	 * <i>native declaration : msdos.h:63</i>
	 */
	public static native Pointer<XMenu > XMenuCreate(Pointer<Integer > DisplayPtr1, int Window1, Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>int XMenuAddPane(Display*, XMenu*, const char*, int)</code><br>
	 * <i>native declaration : msdos.h:65</i>
	 */
	public static native int XMenuAddPane(Pointer<Integer > DisplayPtr1, Pointer<XMenu > XMenuPtr1, Pointer<Byte > charPtr1, int int1);
	/**
	 * Original signature : <code>int XMenuAddSelection(Display*, XMenu*, int, int, char*, int, const char*)</code><br>
	 * <i>native declaration : msdos.h:67</i>
	 */
	public static native int XMenuAddSelection(Pointer<Integer > DisplayPtr1, Pointer<XMenu > XMenuPtr1, int int1, int int2, Pointer<Byte > charPtr1, int int3, Pointer<Byte > charPtr2);
	/**
	 * Original signature : <code>void XMenuLocate(Display*, XMenu*, int, int, int, int, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : msdos.h:69</i>
	 */
	public static native void XMenuLocate(Pointer<Integer > DisplayPtr1, Pointer<XMenu > XMenuPtr1, int int1, int int2, int int3, int int4, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4);
	/**
	 * Original signature : <code>int XMenuActivate(Display*, XMenu*, int*, int*, int, int, unsigned, char**, XMenuActivate_callback_callback)</code><br>
	 * <i>native declaration : msdos.h:71</i>
	 */
	public static native int XMenuActivate(Pointer<Integer > DisplayPtr1, Pointer<XMenu > XMenuPtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, int int1, int int2, int u1, Pointer<Pointer<Byte > > charPtrPtr1, Pointer<MsdosLibrary.XMenuActivate_callback_callback > arg);
	/**
	 * Original signature : <code>void XMenuDestroy(Display*, XMenu*)</code><br>
	 * <i>native declaration : msdos.h:73</i>
	 */
	public static native void XMenuDestroy(Pointer<Integer > DisplayPtr1, Pointer<XMenu > XMenuPtr1);
	public int have_mouse() {
		try {
			return (int)BridJ.getNativeLibrary("msdos").getSymbolPointer("have_mouse").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public MsdosLibrary have_mouse(int have_mouse) {
		try {
			{
				BridJ.getNativeLibrary("msdos").getSymbolPointer("have_mouse").as(int.class).set(have_mouse);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface frame {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface terminal {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface tty_display_info {
		
	};
}
