package emacs.w32heap;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>w32heap</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("w32heap") 
@Runtime(CRuntime.class) 
public class W32heapLibrary {
	static {
		BridJ.register();
	}
	public static final int OS_WIN95 = (int)1;
	public static final int OS_NT = (int)2;
	/**
	 * Original signature : <code>char* get_data_start()</code><br>
	 * <i>native declaration : w32heap.h:1</i>
	 */
	public static native Pointer<Byte > get_data_start();
	/**
	 * Original signature : <code>char* get_data_end()</code><br>
	 * <i>native declaration : w32heap.h:3</i>
	 */
	public static native Pointer<Byte > get_data_end();
	/**
	 * Emulation of Unix sbrk().<br>
	 * Original signature : <code>void* sbrk(unsigned long)</code><br>
	 * <i>native declaration : w32heap.h:20</i>
	 */
	public static native Pointer<? > sbrk(@CLong long size);
	/**
	 * Initialize heap structures for sbrk on startup.<br>
	 * Original signature : <code>void init_heap()</code><br>
	 * <i>native declaration : w32heap.h:25</i>
	 */
	public static native void init_heap();
	/**
	 * Round the heap to this size.<br>
	 * Original signature : <code>void round_heap(unsigned long)</code><br>
	 * <i>native declaration : w32heap.h:30</i>
	 */
	public static native void round_heap(@CLong long size);
	/**
	 * Cache system info, e.g., the NT page size.<br>
	 * Original signature : <code>void cache_system_info()</code><br>
	 * <i>native declaration : w32heap.h:35</i>
	 */
	public static native void cache_system_info();
	/**
	 * Original signature : <code>int open_input_file(file_data*, char*)</code><br>
	 * <i>native declaration : w32heap.h:44</i>
	 */
	public static native int open_input_file(Pointer<file_data > p_file, Pointer<Byte > name);
	/**
	 * Original signature : <code>int open_output_file(file_data*, char*, unsigned long)</code><br>
	 * <i>native declaration : w32heap.h:46</i>
	 */
	public static native int open_output_file(Pointer<file_data > p_file, Pointer<Byte > name, @CLong long size);
	/**
	 * Original signature : <code>void close_file_data(file_data*)</code><br>
	 * <i>native declaration : w32heap.h:48</i>
	 */
	public static native void close_file_data(Pointer<file_data > p_file);
	/**
	 * Return pointer to section header for named section.<br>
	 * Original signature : <code>IMAGE_SECTION_HEADER* find_section(char*, IMAGE_NT_HEADERS*)</code><br>
	 * <i>native declaration : w32heap.h:53</i>
	 */
	public static native Pointer<W32heapLibrary.IMAGE_SECTION_HEADER > find_section(Pointer<Byte > name, Pointer<W32heapLibrary.IMAGE_NT_HEADERS > nt_header);
	/**
	 * Return pointer to section header for section containing the given<br>
	 * relative virtual address.<br>
	 * Original signature : <code>IMAGE_SECTION_HEADER* rva_to_section(DWORD, IMAGE_NT_HEADERS*)</code><br>
	 * <i>native declaration : w32heap.h:59</i>
	 */
	public static native Pointer<W32heapLibrary.IMAGE_SECTION_HEADER > rva_to_section(int rva, Pointer<W32heapLibrary.IMAGE_NT_HEADERS > nt_header);
	@CLong 
	public long reserved_heap_size() {
		try {
			return (long)BridJ.getNativeLibrary("w32heap").getSymbolPointer("reserved_heap_size").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	@CLong 
	public W32heapLibrary reserved_heap_size(long reserved_heap_size) {
		try {
			{
				BridJ.getNativeLibrary("w32heap").getSymbolPointer("reserved_heap_size").as(long.class).set(reserved_heap_size);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int using_dynamic_heap() {
		try {
			return (int)BridJ.getNativeLibrary("w32heap").getSymbolPointer("using_dynamic_heap").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public W32heapLibrary using_dynamic_heap(int using_dynamic_heap) {
		try {
			{
				BridJ.getNativeLibrary("w32heap").getSymbolPointer("using_dynamic_heap").as(int.class).set(using_dynamic_heap);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int w32_major_version() {
		try {
			return (int)BridJ.getNativeLibrary("w32heap").getSymbolPointer("w32_major_version").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public W32heapLibrary w32_major_version(int w32_major_version) {
		try {
			{
				BridJ.getNativeLibrary("w32heap").getSymbolPointer("w32_major_version").as(int.class).set(w32_major_version);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int w32_minor_version() {
		try {
			return (int)BridJ.getNativeLibrary("w32heap").getSymbolPointer("w32_minor_version").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public W32heapLibrary w32_minor_version(int w32_minor_version) {
		try {
			{
				BridJ.getNativeLibrary("w32heap").getSymbolPointer("w32_minor_version").as(int.class).set(w32_minor_version);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int w32_build_number() {
		try {
			return (int)BridJ.getNativeLibrary("w32heap").getSymbolPointer("w32_build_number").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public W32heapLibrary w32_build_number(int w32_build_number) {
		try {
			{
				BridJ.getNativeLibrary("w32heap").getSymbolPointer("w32_build_number").as(int.class).set(w32_build_number);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int os_subtype() {
		try {
			return (int)BridJ.getNativeLibrary("w32heap").getSymbolPointer("os_subtype").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public W32heapLibrary os_subtype(int os_subtype) {
		try {
			{
				BridJ.getNativeLibrary("w32heap").getSymbolPointer("os_subtype").as(int.class).set(os_subtype);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface IMAGE_NT_HEADERS {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface IMAGE_SECTION_HEADER {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface SYSTEM_INFO {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HANDLE {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface OSVERSIONINFO {
		
	};
}
