package emacs.charset;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>charset</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("charset") 
@Runtime(CRuntime.class) 
public class CharsetLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : charset.h:19</i>
	 */
	public enum define_charset_arg_index implements IntValuedEnum<define_charset_arg_index > {
		charset_arg_name(0),
		charset_arg_dimension(1),
		charset_arg_code_space(2),
		charset_arg_min_code(3),
		charset_arg_max_code(4),
		charset_arg_iso_final(5),
		charset_arg_iso_revision(6),
		charset_arg_emacs_mule_id(7),
		charset_arg_ascii_compatible_p(8),
		charset_arg_supplementary_p(9),
		charset_arg_invalid_code(10),
		charset_arg_code_offset(11),
		charset_arg_map(12),
		charset_arg_subset(13),
		charset_arg_superset(14),
		charset_arg_unify_map(15),
		charset_arg_plist(16),
		charset_arg_max(17);
		define_charset_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_charset_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_charset_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : charset.h:82</i>
	 */
	public enum charset_attr_index implements IntValuedEnum<charset_attr_index > {
		/// ID number of the charset.
		charset_id(0),
		/// Name of the charset (symbol).
		charset_name(1),
		/// Property list of the charset.
		charset_plist(2),
		/**
		 * If the method of the charset is `MAP', the value is a mapping<br>
		 * vector or a file name that contains mapping vector.  Otherwise,<br>
		 * nil.
		 */
		charset_map(3),
		/**
		 * If the method of the charset is `MAP', the value is a vector<br>
		 * that maps code points of the charset to characters.  The vector<br>
		 * is indexed by a character index.  A character index is<br>
		 * calculated from a code point and the code-space table of the<br>
		 * charset.
		 */
		charset_decoder(4),
		/**
		 * If the method of the charset is `MAP', the value is a<br>
		 * char-table that maps characters of the charset to code<br>
		 * points.
		 */
		charset_encoder(5),
		/**
		 * If the method of the charset is `SUBSET', the value is a vector<br>
		 * that has this form:<br>
		 * [ CHARSET-ID MIN-CODE MAX-CODE OFFSET ]<br>
		 * CHARSET-ID is an ID number of a parent charset.  MIN-CODE and<br>
		 * MAX-CODE specify the range of characters inherited from the<br>
		 * parent.  OFFSET is an integer value to add to a code point of<br>
		 * the parent charset to get the corresponding code point of this<br>
		 * charset.
		 */
		charset_subset(6),
		/**
		 * If the method of the charset is `SUPERSET', the value is a list<br>
		 * whose elements have this form:<br>
		 * (CHARSET-ID . OFFSET)<br>
		 * CHARSET-IDs are ID numbers of parent charsets.  OFFSET is an<br>
		 * integer value to add to a code point of the parent charset to<br>
		 * get the corresponding code point of this charset.
		 */
		charset_superset(7),
		/**
		 * The value is a mapping vector or a file name that contains the<br>
		 * mapping.  This defines how characters in the charset should be<br>
		 * unified with Unicode.  The value of the member<br>
		 * `charset_deunifier' is created from this information.
		 */
		charset_unify_map(8),
		/**
		 * If characters in the charset must be unified Unicode, the value<br>
		 * is a char table that maps a unified Unicode character code to<br>
		 * the non-unified character code in the charset.
		 */
		charset_deunifier(9),
		/// The length of the charset attribute vector.
		charset_attr_max(10);
		charset_attr_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<charset_attr_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<charset_attr_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : charset.h:100</i>
	 */
	public enum charset_method implements IntValuedEnum<charset_method > {
		/**
		 * For a charset of this method, a character code is calculated<br>
		 * from a character index (which is calculated from a code point)<br>
		 * simply by adding an offset value.
		 */
		CHARSET_METHOD_OFFSET(0),
		/**
		 * For a charset of this method, a decoder vector and an encoder<br>
		 * char-table is used for code point <-> character code<br>
		 * conversion.
		 */
		CHARSET_METHOD_MAP(1),
		/// A charset of this method is a subset of another charset.
		CHARSET_METHOD_SUBSET(2),
		/// A charset of this method is a superset of other charsets.
		CHARSET_METHOD_SUPERSET(3);
		charset_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<charset_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<charset_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : charset.h</i>
	public static final int EMACS_MULE_LEADING_CODE_PRIVATE_21 = (int)156;
	/// <i>native declaration : charset.h</i>
	public static final int EMACS_MULE_LEADING_CODE_PRIVATE_22 = (int)157;
	/// <i>native declaration : charset.h</i>
	public static final int EMACS_MULE_LEADING_CODE_PRIVATE_11 = (int)154;
	/// <i>native declaration : charset.h</i>
	public static final int EMACS_MULE_LEADING_CODE_PRIVATE_12 = (int)155;
	/// <i>native declaration : charset.h</i>
	public static final int ISO_MAX_DIMENSION = (int)3;
	/// <i>native declaration : charset.h</i>
	public static final int ISO_MAX_CHARS = (int)2;
	/// <i>native declaration : charset.h</i>
	public static final int ISO_MAX_FINAL = (int)128;
	/// <i>native declaration : charset.h:255</i>
	/// <i>native declaration : charset.h:255</i>
	public static abstract class map_charset_chars_arg1_callback extends Callback<map_charset_chars_arg1_callback > {
		public abstract void apply(CharsetLibrary.Lisp_Object Lisp_Object1, CharsetLibrary.Lisp_Object Lisp_Object2);
	};
	/**
	 * Original signature : <code>charset* char_charset(int, Lisp_Object, unsigned*)</code><br>
	 * <i>native declaration : charset.h:242</i>
	 */
	public static native Pointer<charset > char_charset(int int1, CharsetLibrary.Lisp_Object Lisp_Object1, Pointer<Integer > uPtr1);
	/**
	 * Original signature : <code>Lisp_Object charset_attributes(int)</code><br>
	 * <i>native declaration : charset.h:244</i>
	 */
	public static native CharsetLibrary.Lisp_Object charset_attributes(int int1);
	/**
	 * Original signature : <code>int maybe_unify_char(int, Lisp_Object)</code><br>
	 * <i>native declaration : charset.h:246</i>
	 */
	public static native int maybe_unify_char(int int1, CharsetLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int decode_char(charset*, unsigned)</code><br>
	 * <i>native declaration : charset.h:248</i>
	 */
	public static native int decode_char(Pointer<charset > charsetPtr1, int u1);
	/**
	 * Original signature : <code>int encode_char(charset*, int)</code><br>
	 * <i>native declaration : charset.h:250</i>
	 */
	public static native int encode_char(Pointer<charset > charsetPtr1, int int1);
	/**
	 * Original signature : <code>int string_xstring_p(Lisp_Object)</code><br>
	 * <i>native declaration : charset.h:252</i>
	 */
	public static native int string_xstring_p(CharsetLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void map_charset_chars(map_charset_chars_arg1_callback, Lisp_Object, Lisp_Object, charset*, unsigned, unsigned)</code><br>
	 * <i>native declaration : charset.h:254</i>
	 */
	public static native void map_charset_chars(Pointer<CharsetLibrary.map_charset_chars_arg1_callback > arg1, CharsetLibrary.Lisp_Object Lisp_Object1, CharsetLibrary.Lisp_Object Lisp_Object2, Pointer<charset > charsetPtr1, int u1, int u2);
	/**
	 * Table of struct charset.<br>
	 * C type : extern charset*
	 */
	public Pointer<charset > charset_table() {
		try {
			return (Pointer<charset >)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_table").as(DefaultParameterizedType.paramType(Pointer.class, charset.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Table of struct charset.<br>
	 * C type : extern charset*
	 */
	public CharsetLibrary charset_table(Pointer<charset > charset_table) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_table").as(DefaultParameterizedType.paramType(Pointer.class, charset.class)).set(charset_table);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Incremented everytime we change the priority of charsets.
	public short charset_ordered_list_tick() {
		try {
			return (short)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_ordered_list_tick").as(short.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Incremented everytime we change the priority of charsets.
	public CharsetLibrary charset_ordered_list_tick(short charset_ordered_list_tick) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_ordered_list_tick").as(short.class).set(charset_ordered_list_tick);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern int[256]
	@Array({256}) 
	public Pointer<Integer > emacs_mule_charset() {
		try {
			return (Pointer<Integer >)BridJ.getNativeLibrary("charset").getSymbolPointer("emacs_mule_charset").as(DefaultParameterizedType.paramType(Pointer.class, Integer.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Set to 1 when a charset map is loaded to warn that a buffer text<br>
	 * and a string data may be relocated.
	 */
	public int charset_map_loaded() {
		try {
			return (int)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_map_loaded").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Set to 1 when a charset map is loaded to warn that a buffer text<br>
	 * and a string data may be relocated.
	 */
	public CharsetLibrary charset_map_loaded(int charset_map_loaded) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_map_loaded").as(int.class).set(charset_map_loaded);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Mapping table from ISO2022's charset (specified by DIMENSION,<br>
	 * CHARS, and FINAL_CHAR) to Emacs' charset ID.  Should be accessed by<br>
	 * macro ISO_CHARSET_TABLE (DIMENSION, CHARS, FINAL_CHAR).<br>
	 * C type : extern int[3][2][0x80]
	 */
	@Array({3, 2, 128}) 
	public Pointer<Integer > iso_charset_table() {
		try {
			return (Pointer<Integer >)BridJ.getNativeLibrary("charset").getSymbolPointer("iso_charset_table").as(DefaultParameterizedType.paramType(Pointer.class, Integer.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int charset_ascii() {
		try {
			return (int)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_ascii").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public CharsetLibrary charset_ascii(int charset_ascii) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_ascii").as(int.class).set(charset_ascii);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int charset_eight_bit() {
		try {
			return (int)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_eight_bit").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public CharsetLibrary charset_eight_bit(int charset_eight_bit) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_eight_bit").as(int.class).set(charset_eight_bit);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int charset_unicode() {
		try {
			return (int)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_unicode").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public CharsetLibrary charset_unicode(int charset_unicode) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_unicode").as(int.class).set(charset_unicode);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int charset_jisx0201_roman() {
		try {
			return (int)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_jisx0201_roman").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public CharsetLibrary charset_jisx0201_roman(int charset_jisx0201_roman) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_jisx0201_roman").as(int.class).set(charset_jisx0201_roman);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int charset_jisx0208_1978() {
		try {
			return (int)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_jisx0208_1978").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public CharsetLibrary charset_jisx0208_1978(int charset_jisx0208_1978) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_jisx0208_1978").as(int.class).set(charset_jisx0208_1978);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int charset_jisx0208() {
		try {
			return (int)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_jisx0208").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public CharsetLibrary charset_jisx0208(int charset_jisx0208) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_jisx0208").as(int.class).set(charset_jisx0208);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int charset_ksc5601() {
		try {
			return (int)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_ksc5601").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public CharsetLibrary charset_ksc5601(int charset_ksc5601) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_ksc5601").as(int.class).set(charset_ksc5601);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int charset_unibyte() {
		try {
			return (int)BridJ.getNativeLibrary("charset").getSymbolPointer("charset_unibyte").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public CharsetLibrary charset_unibyte(int charset_unibyte) {
		try {
			{
				BridJ.getNativeLibrary("charset").getSymbolPointer("charset_unibyte").as(int.class).set(charset_unibyte);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
}
