package emacs.regex;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>regex</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("regex") 
@Runtime(CRuntime.class) 
public class RegexLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : regex.h:45</i>
	 */
	public enum reg_errcode_t implements IntValuedEnum<reg_errcode_t > {
		/// Success.
		REG_NOERROR(0),
		/// Didn't find a match (for regexec).
		REG_NOMATCH(1),
		/**
		 * POSIX regcomp return error codes.  (In the order listed in the<br>
		 * standard.)<br>
		 * Invalid pattern.
		 */
		REG_BADPAT(2),
		/// Not implemented.
		REG_ECOLLATE(3),
		/// Invalid character class name.
		REG_ECTYPE(4),
		/// Trailing backslash.
		REG_EESCAPE(5),
		/// Invalid back reference.
		REG_ESUBREG(6),
		/// Unmatched left bracket.
		REG_EBRACK(7),
		/// Parenthesis imbalance.
		REG_EPAREN(8),
		/// Unmatched \{.
		REG_EBRACE(9),
		/// Invalid contents of \{\}.
		REG_BADBR(10),
		/// Invalid range end.
		REG_ERANGE(11),
		/// Ran out of memory.
		REG_ESPACE(12),
		/// No preceding re for repetition op.
		REG_BADRPT(13),
		/**
		 * Error codes we've added.<br>
		 * Premature end.
		 */
		REG_EEND(14),
		/// Compiled pattern bigger than 2^16 bytes.
		REG_ESIZE(15),
		/// Unmatched ) or \); not returned from regcomp.
		REG_ERPAREN(16),
		/// Range striding over charsets.
		REG_ERANGEX(17);
		reg_errcode_t(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<reg_errcode_t > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<reg_errcode_t > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : regex.h:228</i>
	 */
	public enum re_wctype_t implements IntValuedEnum<re_wctype_t > {
		RECC_ERROR(0),
		RECC_ALNUM(1),
		RECC_ALPHA(2),
		RECC_WORD(3),
		RECC_GRAPH(4),
		RECC_PRINT(5),
		RECC_LOWER(6),
		RECC_UPPER(7),
		RECC_PUNCT(8),
		RECC_CNTRL(9),
		RECC_DIGIT(10),
		RECC_XDIGIT(11),
		RECC_BLANK(12),
		RECC_SPACE(13),
		RECC_MULTIBYTE(14),
		RECC_NONASCII(15),
		RECC_ASCII(16),
		RECC_UNIBYTE(17);
		re_wctype_t(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<re_wctype_t > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<re_wctype_t > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : regex.h</i>
	public static final long RE_BK_PLUS_QM = (long)((1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_DOT_NEWLINE = (long)(((((((1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long _RE_SYNTAX_POSIX_COMMON = (long)((((1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final int REGS_FIXED = (int)2;
	/// <i>native declaration : regex.h</i>
	public static final int REG_NOSUB = (int)(((1 << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_NO_BK_BRACES = (long)(((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final int REG_NOTBOL = (int)1;
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_POSIX_BASIC = (long)(((((1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final long RE_LIMITED_OPS = (long)(((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_INTERVALS = (long)((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final int CHAR_CLASS_MAX_LENGTH = (int)9;
	/// <i>native declaration : regex.h</i>
	public static final long RE_NO_EMPTY_RANGES = (long)(((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_SED = (long)(((((1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final long RE_FRUGAL = (long)(((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_POSIX_EXTENDED = (long)(((((1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((1) << 1) << 1) << 1) | (((((1) << 1) << 1) << 1) << 1) | (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_EGREP = (long)((((1) << 1) << 1) | ((((1) << 1) << 1) << 1) | (((((1) << 1) << 1) << 1) << 1) | (((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_GNU_AWK = (long)(((((((1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((1) << 1) << 1) << 1) | (((((1) << 1) << 1) << 1) << 1) | (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (1) | ((((((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) & ~(((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((1) << 1) << 1) << 1) << 1)));
	/// <i>native declaration : regex.h</i>
	public static final int RE_DUP_MAX = (int)(32767);
	/// <i>native declaration : regex.h</i>
	public static final long RE_NO_BK_REFS = (long)(((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_UNMATCHED_RIGHT_PAREN_ORD = (long)((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_GREP = (long)(((1) << 1) | (((1) << 1) << 1) | (((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final int REG_ICASE = (int)(1 << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_DOT_NOT_NULL = (long)((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_POSIX_MINIMAL_BASIC = (long)(((((1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final long RE_DEBUG = (long)((((((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final int REG_NEWLINE = (int)((1 << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_NO_GNU_OPS = (long)((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_NO_POSIX_BACKTRACKING = (long)(((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_NO_BK_PARENS = (long)((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_CONTEXT_INDEP_ANCHORS = (long)((((1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final int REG_NOTEOL = (int)(1 << 1);
	/// <i>native declaration : regex.h</i>
	public static final int REG_EXTENDED = (int)1;
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_ED = (long)(((((1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final long RE_SHY_GROUPS = (long)((((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final int RE_NREGS = (int)30;
	/// <i>native declaration : regex.h</i>
	public static final int REGS_UNALLOCATED = (int)0;
	/// <i>native declaration : regex.h</i>
	public static final long RE_HAT_LISTS_NOT_NEWLINE = (long)(((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_BACKSLASH_ESCAPE_IN_LISTS = (long)(1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_CONTEXT_INVALID_OPS = (long)((((((1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_EMACS = (long)((((1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final int _REGEX_H = (int)1;
	/// <i>native declaration : regex.h</i>
	public static final long RE_CONTEXT_INDEP_OPS = (long)(((((1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_CHAR_CLASSES = (long)(((1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final int REGS_REALLOCATE = (int)1;
	/// <i>native declaration : regex.h</i>
	public static final long RE_NO_BK_VBAR = (long)((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_POSIX_MINIMAL_EXTENDED = (long)(((((1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((1) << 1) << 1) << 1) | ((((((1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_AWK = (long)((1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((1) << 1) << 1) << 1) | ((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_POSIX_EGREP = (long)(((((1) << 1) << 1) | ((((1) << 1) << 1) << 1) | (((((1) << 1) << 1) << 1) << 1) | (((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/// <i>native declaration : regex.h</i>
	public static final long RE_NEWLINE_ALT = (long)((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_NO_NEWLINE_ANCHOR = (long)(((((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
	/// <i>native declaration : regex.h</i>
	public static final long RE_SYNTAX_POSIX_AWK = (long)((((((1) << 1) << 1) | (((((((1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((1) << 1) << 1) << 1) | (((((1) << 1) << 1) << 1) << 1) | (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (1) | ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
	/**
	 * Sets the current default syntax to SYNTAX, and return the old syntax.<br>
	 * You can also simply assign to the `re_syntax_options' variable.<br>
	 * Original signature : <code>reg_syntax_t re_set_syntax(reg_syntax_t)</code><br>
	 * <i>native declaration : regex.h:141</i>
	 */
	@CLong 
	public static native long re_set_syntax(@CLong long syntax);
	/**
	 * Compile the regular expression PATTERN, with length LENGTH<br>
	 * and syntax given by the global `re_syntax_options', into the buffer<br>
	 * BUFFER.  Return NULL if successful, and an error string if not.<br>
	 * Original signature : <code>char* re_compile_pattern(const char*, size_t, re_pattern_buffer*)</code><br>
	 * <i>native declaration : regex.h:148</i>
	 */
	public static native Pointer<Byte > re_compile_pattern(Pointer<Byte > pattern, @Ptr long length, Pointer<re_pattern_buffer > buffer);
	/**
	 * Compile a fastmap for the compiled pattern in BUFFER; used to<br>
	 * accelerate searches.  Return 0 if successful and -2 if was an<br>
	 * internal error.<br>
	 * Original signature : <code>int re_compile_fastmap(re_pattern_buffer*)</code><br>
	 * <i>native declaration : regex.h:155</i>
	 */
	public static native int re_compile_fastmap(Pointer<re_pattern_buffer > buffer);
	/**
	 * Search in the string STRING (with length LENGTH) for the pattern<br>
	 * compiled into BUFFER.  Start searching at position START, for RANGE<br>
	 * characters.  Return the starting position of the match, -1 for no<br>
	 * match, or -2 for an internal error.  Also return register<br>
	 * information in REGS (if REGS and BUFFER->no_sub are nonzero).<br>
	 * Original signature : <code>regoff_t re_search(re_pattern_buffer*, const char*, size_t, ssize_t, ssize_t, re_registers*)</code><br>
	 * <i>native declaration : regex.h:164</i>
	 */
	public static native RegexLibrary.ssize_t re_search(Pointer<re_pattern_buffer > buffer, Pointer<Byte > string, @Ptr long length, RegexLibrary.ssize_t start, RegexLibrary.ssize_t range, Pointer<re_registers > regs);
	/**
	 * Like `re_search', but search in the concatenation of STRING1 and<br>
	 * STRING2.  Also, stop searching at index START + STOP.<br>
	 * Original signature : <code>regoff_t re_search_2(re_pattern_buffer*, const char*, size_t, const char*, size_t, ssize_t, ssize_t, re_registers*, ssize_t)</code><br>
	 * <i>native declaration : regex.h:170</i>
	 */
	public static native RegexLibrary.ssize_t re_search_2(Pointer<re_pattern_buffer > buffer, Pointer<Byte > string1, @Ptr long length1, Pointer<Byte > string2, @Ptr long length2, RegexLibrary.ssize_t start, RegexLibrary.ssize_t range, Pointer<re_registers > regs, RegexLibrary.ssize_t stop);
	/**
	 * Like `re_search', but return how many characters in STRING the regexp<br>
	 * in BUFFER matched, starting at position START.<br>
	 * Original signature : <code>regoff_t re_match(re_pattern_buffer*, const char*, size_t, ssize_t, re_registers*)</code><br>
	 * <i>native declaration : regex.h:176</i>
	 */
	public static native RegexLibrary.ssize_t re_match(Pointer<re_pattern_buffer > buffer, Pointer<Byte > string, @Ptr long length, RegexLibrary.ssize_t start, Pointer<re_registers > regs);
	/**
	 * Relates to `re_match' as `re_search_2' relates to `re_search'.<br>
	 * Original signature : <code>regoff_t re_match_2(re_pattern_buffer*, const char*, size_t, const char*, size_t, ssize_t, re_registers*, ssize_t)</code><br>
	 * <i>native declaration : regex.h:181</i>
	 */
	public static native RegexLibrary.ssize_t re_match_2(Pointer<re_pattern_buffer > buffer, Pointer<Byte > string1, @Ptr long length1, Pointer<Byte > string2, @Ptr long length2, RegexLibrary.ssize_t start, Pointer<re_registers > regs, RegexLibrary.ssize_t stop);
	/**
	 * Set REGS to hold NUM_REGS registers, storing them in STARTS and<br>
	 * ENDS.  Subsequent matches using BUFFER and REGS will use this memory<br>
	 * for recording register information.  STARTS and ENDS must be<br>
	 * allocated with malloc, and must each be at least `NUM_REGS * sizeof<br>
	 * (regoff_t)' bytes long.<br>
	 * If NUM_REGS == 0, then subsequent matches should allocate their own<br>
	 * register data.<br>
	 * Unless this function is called, the first search or match using<br>
	 * PATTERN_BUFFER will allocate its own register data, without<br>
	 * freeing the old data.<br>
	 * Original signature : <code>void re_set_registers(re_pattern_buffer*, re_registers*, unsigned, regoff_t*, regoff_t*)</code><br>
	 * <i>native declaration : regex.h:195</i>
	 */
	public static native void re_set_registers(Pointer<re_pattern_buffer > buffer, Pointer<re_registers > regs, int num_regs, Pointer<RegexLibrary.ssize_t > starts, Pointer<RegexLibrary.ssize_t > ends);
	/**
	 * POSIX compatibility.<br>
	 * Original signature : <code>reg_errcode_t regcomp(regex_t*, const char*, int)</code><br>
	 * <i>native declaration : regex.h:200</i>
	 */
	public static native IntValuedEnum<RegexLibrary.reg_errcode_t > regcomp(Pointer<re_pattern_buffer > __preg, Pointer<Byte > __pattern, int __cflags);
	/**
	 * Original signature : <code>reg_errcode_t regexec(const regex_t*, const char*, size_t, regmatch_t[], int)</code><br>
	 * <i>native declaration : regex.h:202</i>
	 */
	public static native IntValuedEnum<RegexLibrary.reg_errcode_t > regexec(Pointer<re_pattern_buffer > __preg, Pointer<Byte > __string, @Ptr long __nmatch, Pointer<regmatch_t > __pmatch, int __eflags);
	/**
	 * Original signature : <code>size_t regerror(int, const regex_t*, char*, size_t)</code><br>
	 * <i>native declaration : regex.h:204</i>
	 */
	@Ptr 
	public static native long regerror(int __errcode, Pointer<re_pattern_buffer > __preg, Pointer<Byte > __errbuf, @Ptr long __errbuf_size);
	/**
	 * Original signature : <code>void regfree(regex_t*)</code><br>
	 * <i>native declaration : regex.h:206</i>
	 */
	public static native void regfree(Pointer<re_pattern_buffer > __preg);
	/**
	 * Original signature : <code>char re_iswctype(int, re_wctype_t)</code><br>
	 * <i>native declaration : regex.h:230</i>
	 */
	public static native byte re_iswctype(int ch, IntValuedEnum<RegexLibrary.re_wctype_t > cc);
	/**
	 * Original signature : <code>re_wctype_t re_wctype(const unsigned char*)</code><br>
	 * <i>native declaration : regex.h:232</i>
	 */
	public static native IntValuedEnum<RegexLibrary.re_wctype_t > re_wctype(Pointer<Byte > str);
	/**
	 * Original signature : <code>void re_set_whitespace_regexp(const char*)</code><br>
	 * <i>native declaration : regex.h:235</i>
	 */
	public static native void re_set_whitespace_regexp(Pointer<Byte > regexp);
	/**
	 * This global variable defines the particular regexp syntax to use (for<br>
	 * some interfaces).  When a regexp is compiled, the syntax used is<br>
	 * stored in the pattern buffer, so changing this does not affect<br>
	 * already-compiled regexps.<br>
	 * C type : extern reg_syntax_t
	 */
	@CLong 
	public long re_syntax_options() {
		try {
			return (long)BridJ.getNativeLibrary("regex").getSymbolPointer("re_syntax_options").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * This global variable defines the particular regexp syntax to use (for<br>
	 * some interfaces).  When a regexp is compiled, the syntax used is<br>
	 * stored in the pattern buffer, so changing this does not affect<br>
	 * already-compiled regexps.<br>
	 * C type : extern reg_syntax_t
	 */
	@CLong 
	public RegexLibrary re_syntax_options(long re_syntax_options) {
		try {
			{
				BridJ.getNativeLibrary("regex").getSymbolPointer("re_syntax_options").as(long.class).set(re_syntax_options);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface ssize_t {
		
	};
}
