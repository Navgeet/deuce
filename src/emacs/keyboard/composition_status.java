package emacs.keyboard;
import emacs.keyboard.KeyboardLibrary.composition_method;
import emacs.keyboard.KeyboardLibrary.composition_state;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * Structure for the current composition status.<br>
 * <i>native declaration : coding.h:551</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("keyboard") 
public class composition_status extends StructObject {
	public composition_status() {
		super();
	}
	/// C type : composition_state
	@Field(0) 
	public IntValuedEnum<composition_state > state() {
		return this.io.getEnumField(this, 0);
	}
	/// C type : composition_state
	@Field(0) 
	public composition_status state(IntValuedEnum<composition_state > state) {
		this.io.setEnumField(this, 0, state);
		return this;
	}
	/// C type : composition_method
	@Field(1) 
	public IntValuedEnum<composition_method > method() {
		return this.io.getEnumField(this, 1);
	}
	/// C type : composition_method
	@Field(1) 
	public composition_status method(IntValuedEnum<composition_method > method) {
		this.io.setEnumField(this, 1, method);
		return this;
	}
	/// 0:pre-21 form, 1:post-21 form
	@Field(2) 
	public int old_form() {
		return this.io.getIntField(this, 2);
	}
	/// 0:pre-21 form, 1:post-21 form
	@Field(2) 
	public composition_status old_form(int old_form) {
		this.io.setIntField(this, 2, old_form);
		return this;
	}
	/// number of elements produced in charbuf
	@Field(3) 
	public int length() {
		return this.io.getIntField(this, 3);
	}
	/// number of elements produced in charbuf
	@Field(3) 
	public composition_status length(int length) {
		this.io.setIntField(this, 3, length);
		return this;
	}
	/// number of characters composed
	@Field(4) 
	public int nchars() {
		return this.io.getIntField(this, 4);
	}
	/// number of characters composed
	@Field(4) 
	public composition_status nchars(int nchars) {
		this.io.setIntField(this, 4, nchars);
		return this;
	}
	/// number of composition components
	@Field(5) 
	public int ncomps() {
		return this.io.getIntField(this, 5);
	}
	/// number of composition components
	@Field(5) 
	public composition_status ncomps(int ncomps) {
		this.io.setIntField(this, 5, ncomps);
		return this;
	}
	/**
	 * Maximum carryover is for the case of COMPOSITION_WITH_RULE_ALTCHARS.<br>
	 * See the comment in coding.c.<br>
	 * annotation header<br>
	 * C type : int[4 + 16 * 3 - 2 + 2 + 16]
	 */
	@Array({4 + 16 * 3 - 2 + 2 + 16}) 
	@Field(6) 
	public Pointer<Integer > carryover() {
		return this.io.getPointerField(this, 6);
	}
}
