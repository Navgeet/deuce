package emacs.keyboard;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>keyboard</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("keyboard") 
@Runtime(CRuntime.class) 
public class KeyboardLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:324</i>
	 */
	public enum define_coding_system_arg_index implements IntValuedEnum<define_coding_system_arg_index > {
		coding_arg_name(0),
		coding_arg_mnemonic(1),
		coding_arg_coding_type(2),
		coding_arg_charset_list(3),
		coding_arg_ascii_compatible_p(4),
		coding_arg_decode_translation_table(5),
		coding_arg_encode_translation_table(6),
		coding_arg_post_read_conversion(7),
		coding_arg_pre_write_conversion(8),
		coding_arg_default_char(9),
		coding_arg_for_unibyte(10),
		coding_arg_plist(11),
		coding_arg_eol_type(12),
		coding_arg_max(13);
		define_coding_system_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_system_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_system_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:331</i>
	 */
	public enum define_coding_iso2022_arg_index implements IntValuedEnum<define_coding_iso2022_arg_index > {
		coding_arg_iso2022_initial((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value()),
		coding_arg_iso2022_reg_usage((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 1),
		coding_arg_iso2022_request((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 2),
		coding_arg_iso2022_flags((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 3),
		coding_arg_iso2022_max((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 4);
		define_coding_iso2022_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_iso2022_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_iso2022_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:335</i>
	 */
	public enum define_coding_utf8_arg_index implements IntValuedEnum<define_coding_utf8_arg_index > {
		coding_arg_utf8_bom((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value()),
		coding_arg_utf8_max((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 1);
		define_coding_utf8_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_utf8_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_utf8_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:340</i>
	 */
	public enum define_coding_utf16_arg_index implements IntValuedEnum<define_coding_utf16_arg_index > {
		coding_arg_utf16_bom((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value()),
		coding_arg_utf16_endian((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 1),
		coding_arg_utf16_max((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 2);
		define_coding_utf16_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_utf16_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_utf16_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:346</i>
	 */
	public enum define_coding_ccl_arg_index implements IntValuedEnum<define_coding_ccl_arg_index > {
		coding_arg_ccl_decoder((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value()),
		coding_arg_ccl_encoder((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 1),
		coding_arg_ccl_valids((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 2),
		coding_arg_ccl_max((int)KeyboardLibrary.define_coding_system_arg_index.coding_arg_max.value() + 3);
		define_coding_ccl_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_ccl_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_ccl_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:359</i>
	 */
	public enum coding_system_type implements IntValuedEnum<coding_system_type > {
		coding_type_charset(0),
		coding_type_utf_8(1),
		coding_type_utf_16(2),
		coding_type_iso_2022(3),
		coding_type_emacs_mule(4),
		coding_type_sjis(5),
		coding_type_ccl(6),
		coding_type_raw_text(7),
		coding_type_undecided(8),
		coding_type_max(9);
		coding_system_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<coding_system_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<coding_system_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:371</i>
	 */
	public enum end_of_line_type implements IntValuedEnum<end_of_line_type > {
		/**
		 * Line-feed only, same as Emacs' internal<br>
		 * format.
		 */
		eol_lf(0),
		/**
		 * Sequence of carriage-return and<br>
		 * line-feed.
		 */
		eol_crlf(1),
		/// Carriage-return only.
		eol_cr(2),
		/**
		 * Accept any of above.  Produce line-feed<br>
		 * only.
		 */
		eol_any(3),
		/**
		 * This value is used to denote that the<br>
		 * eol-type is not yet undecided.
		 */
		eol_undecided(4),
		eol_type_max(5);
		end_of_line_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<end_of_line_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<end_of_line_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:402</i>
	 */
	public enum coding_attr_index implements IntValuedEnum<coding_attr_index > {
		coding_attr_base_name(0),
		coding_attr_docstring(1),
		coding_attr_mnemonic(2),
		coding_attr_type(3),
		coding_attr_charset_list(4),
		coding_attr_ascii_compat(5),
		coding_attr_decode_tbl(6),
		coding_attr_encode_tbl(7),
		coding_attr_trans_tbl(8),
		coding_attr_post_read(9),
		coding_attr_pre_write(10),
		coding_attr_default_char(11),
		coding_attr_for_unibyte(12),
		coding_attr_plist(13),
		coding_attr_category(14),
		coding_attr_safe_charsets(15),
		/// The followings are extra attributes for each type.
		coding_attr_charset_valids(16),
		coding_attr_ccl_decoder(17),
		coding_attr_ccl_encoder(18),
		coding_attr_ccl_valids(19),
		coding_attr_iso_initial(20),
		coding_attr_iso_usage(21),
		coding_attr_iso_request(22),
		coding_attr_iso_flags(23),
		coding_attr_utf_bom(24),
		coding_attr_utf_16_endian(25),
		coding_attr_emacs_mule_full(26),
		coding_attr_last_index(27);
		coding_attr_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<coding_attr_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<coding_attr_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Enumeration of result code of code conversion.<br>
	 * enum values<br>
	 * <i>native declaration : coding.h:412</i>
	 */
	public enum coding_result_code implements IntValuedEnum<coding_result_code > {
		CODING_RESULT_SUCCESS(0),
		CODING_RESULT_INSUFFICIENT_SRC(1),
		CODING_RESULT_INSUFFICIENT_DST(2),
		CODING_RESULT_INCONSISTENT_EOL(3),
		CODING_RESULT_INVALID_SRC(4),
		CODING_RESULT_INTERRUPT(5),
		CODING_RESULT_INSUFFICIENT_MEM(6);
		coding_result_code(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<coding_result_code > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<coding_result_code > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Methods to display a sequence of components of a composition.<br>
	 * enum values<br>
	 * <i>native declaration : composite.h:429</i>
	 */
	public enum composition_method implements IntValuedEnum<composition_method > {
		/// Compose relatively without alternate characters.
		COMPOSITION_RELATIVE(0),
		/**
		 * Compose by specified composition rules.  This is not used in<br>
		 * Emacs 21 but we need it to decode files saved in the older<br>
		 * versions of Emacs.
		 */
		COMPOSITION_WITH_RULE(1),
		/// Compose relatively with alternate characters.
		COMPOSITION_WITH_ALTCHARS(2),
		/// Compose by specified composition rules with alternate characters.
		COMPOSITION_WITH_RULE_ALTCHARS(3),
		/// This is not a method.
		COMPOSITION_NO(4);
		composition_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<composition_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<composition_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Vector size of Lispy glyph.<br>
	 * enum values<br>
	 * <i>native declaration : composite.h:506</i>
	 */
	public enum lglyph_indices implements IntValuedEnum<lglyph_indices > {
		LGLYPH_IX_FROM(0),
		LGLYPH_IX_TO(1),
		LGLYPH_IX_CHAR(2),
		LGLYPH_IX_CODE(3),
		LGLYPH_IX_WIDTH(4),
		LGLYPH_IX_LBEARING(5),
		LGLYPH_IX_RBEARING(6),
		LGLYPH_IX_ASCENT(7),
		LGLYPH_IX_DESCENT(8),
		LGLYPH_IX_ADJUSTMENT(9),
		/// Not an index.
		LGLYPH_SIZE(10);
		lglyph_indices(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<lglyph_indices > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<lglyph_indices > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:532</i>
	 */
	public enum composition_state implements IntValuedEnum<composition_state > {
		COMPOSING_NO(0),
		COMPOSING_CHAR(1),
		COMPOSING_RULE(2),
		COMPOSING_COMPONENT_CHAR(3),
		COMPOSING_COMPONENT_RULE(4);
		composition_state(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<composition_state > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<composition_state > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:594</i>
	 */
	public enum utf_bom_type implements IntValuedEnum<utf_bom_type > {
		utf_detect_bom(0),
		utf_without_bom(1),
		utf_with_bom(2);
		utf_bom_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<utf_bom_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<utf_bom_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:598</i>
	 */
	public enum utf_16_endian_type implements IntValuedEnum<utf_16_endian_type > {
		utf_16_big_endian(0),
		utf_16_little_endian(1);
		utf_16_endian_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<utf_16_endian_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<utf_16_endian_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : keyboard.h:951</i>
	 */
	public enum menu_item_idx implements IntValuedEnum<menu_item_idx > {
		MENU_ITEMS_ITEM_NAME(0),
		MENU_ITEMS_ITEM_ENABLE(1),
		MENU_ITEMS_ITEM_VALUE(2),
		MENU_ITEMS_ITEM_EQUIV_KEY(3),
		MENU_ITEMS_ITEM_DEFINITION(4),
		MENU_ITEMS_ITEM_TYPE(5),
		MENU_ITEMS_ITEM_SELECTED(6),
		MENU_ITEMS_ITEM_HELP(7),
		MENU_ITEMS_ITEM_LENGTH(8);
		menu_item_idx(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<menu_item_idx > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<menu_item_idx > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_SAFE_ENCODING = (int)32;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_ANNOTATE_DIRECTION_MASK = (int)2;
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_INSIDE = (int)4;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_LAST_BLOCK = (int)2;
	/// <i>native declaration : composite.h</i>
	public static final int MAX_COMPOSITION_COMPONENTS = (int)16;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_ANNOTATE_CHARSET_MASK = (int)3;
	/// <i>native declaration : keyboard.h</i>
	public static final int ITEM_PROPERTY_NAME = (int)1;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_REQUIRE_FLUSHING_MASK = (int)512;
	/// <i>native declaration : keyboard.h</i>
	public static final int MENU_ITEMS_PANE_PREFIX = (int)2;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_SELECTIVE_DISPLAY = (int)4;
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_ALL = (int)((1 | 2) | 4);
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_BORDER = (int)(1 | 2);
	/// <i>native declaration : keyboard.h</i>
	public static final int ITEM_PROPERTY_HELP = (int)7;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_ANNOTATION_MASK = (int)255;
	/// <i>native declaration : keyboard.h</i>
	public static final int MENU_ITEMS_PANE_NAME = (int)1;
	/// <i>native declaration : keyboard.h</i>
	public static final int ITEM_PROPERTY_ENABLE = (int)8;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_FOR_UNIBYTE_MASK = (int)256;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_REQUIRE_ENCODING_MASK = (int)2048;
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_TAIL = (int)2;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_DIRECTION = (int)8;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_REQUIRE_DECODING_MASK = (int)1024;
	/// <i>native declaration : keyboard.h</i>
	public static final int ITEM_PROPERTY_SELECTED = (int)6;
	/// <i>native declaration : keyboard.h</i>
	public static final int ITEM_PROPERTY_ITEM = (int)0;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_FIXED_DESTINATION = (int)16;
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_HEAD = (int)1;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_INHIBIT_INCONSISTENT_EOL = (int)1;
	/// <i>native declaration : keyboard.h</i>
	public static final int ITEM_PROPERTY_DEF = (int)2;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_RESET_AT_BOL_MASK = (int)8192;
	/// <i>native declaration : keyboard.h</i>
	public static final int ITEM_PROPERTY_KEYEQ = (int)5;
	/// <i>native declaration : keyboard.h</i>
	public static final int ITEM_PROPERTY_TYPE = (int)4;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_REQUIRE_DETECTION_MASK = (int)4096;
	/// <i>native declaration : keyboard.h</i>
	public static final int MENU_ITEMS_PANE_LENGTH = (int)3;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_ANNOTATE_COMPOSITION_MASK = (int)1;
	/// <i>native declaration : keyboard.h</i>
	public static final int ITEM_PROPERTY_MAP = (int)3;
	/**
	 * Original signature : <code>int set_file_times(const char*, int, int)</code><br>
	 * <i>native declaration : systime.h:303</i>
	 */
	public static native int set_file_times(Pointer<Byte > charPtr1, int int1, int int2);
	/**
	 * defined in keyboard.c<br>
	 * Original signature : <code>void set_waiting_for_input(int*)</code><br>
	 * <i>native declaration : systime.h:308</i>
	 */
	public static native void set_waiting_for_input(Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>ptrdiff_t get_composition_id(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:479</i>
	 */
	@Ptr 
	public static native long get_composition_id(KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>int find_composition(EMACS_INT*, EMACS_INT*, Lisp_Object*, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:481</i>
	 */
	public static native int find_composition(Pointer<KeyboardLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<KeyboardLibrary.EMACS_INT > EMACS_INTPtr2, Pointer<KeyboardLibrary.Lisp_Object > Lisp_ObjectPtr1, KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void update_compositions(int)</code><br>
	 * <i>native declaration : composite.h:483</i>
	 */
	public static native void update_compositions(int int1);
	/**
	 * Original signature : <code>void make_composition_value_copy(Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:485</i>
	 */
	public static native void make_composition_value_copy(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void compose_region(int, int, Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:487</i>
	 */
	public static native void compose_region(int int1, int int2, KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2, KeyboardLibrary.Lisp_Object Lisp_Object3);
	/**
	 * Original signature : <code>void syms_of_composite()</code><br>
	 * <i>native declaration : composite.h:489</i>
	 */
	public static native void syms_of_composite();
	/**
	 * Original signature : <code>void compose_text(Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:491</i>
	 */
	public static native void compose_text(KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2, KeyboardLibrary.Lisp_Object Lisp_Object3);
	/**
	 * Original signature : <code>Lisp_Object composition_gstring_put_cache(Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:511</i>
	 */
	public static native KeyboardLibrary.Lisp_Object composition_gstring_put_cache(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object composition_gstring_from_id(ptrdiff_t)</code><br>
	 * <i>native declaration : composite.h:513</i>
	 */
	public static native KeyboardLibrary.Lisp_Object composition_gstring_from_id(@Ptr long ptrdiff_t1);
	/**
	 * Original signature : <code>int composition_gstring_p(Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:515</i>
	 */
	public static native int composition_gstring_p(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int composition_gstring_width(Lisp_Object, font_metrics*)</code><br>
	 * <i>native declaration : composite.h:517</i>
	 */
	public static native int composition_gstring_width(KeyboardLibrary.Lisp_Object Lisp_Object1, Pointer<KeyboardLibrary.font_metrics > font_metricsPtr1);
	/**
	 * Original signature : <code>void composition_compute_stop_pos(composition_it*, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:519</i>
	 */
	public static native void composition_compute_stop_pos(Pointer<KeyboardLibrary.composition_it > composition_itPtr1, KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int composition_reseat_it(composition_it*, window*, face*, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:521</i>
	 */
	public static native int composition_reseat_it(Pointer<KeyboardLibrary.composition_it > composition_itPtr1, Pointer<KeyboardLibrary.window > windowPtr1, Pointer<KeyboardLibrary.face > facePtr1, KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int composition_update_it(composition_it*, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:523</i>
	 */
	public static native int composition_update_it(Pointer<KeyboardLibrary.composition_it > composition_itPtr1, KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>EMACS_INT composition_adjust_point(EMACS_INT, EMACS_INT)</code><br>
	 * <i>native declaration : composite.h:525</i>
	 */
	public static native KeyboardLibrary.EMACS_INT composition_adjust_point(KeyboardLibrary.EMACS_INT EMACS_INT1, KeyboardLibrary.EMACS_INT EMACS_INT2);
	/**
	 * Extern declarations.<br>
	 * Original signature : <code>Lisp_Object code_conversion_save(int, int)</code><br>
	 * <i>native declaration : coding.h:726</i>
	 */
	public static native KeyboardLibrary.Lisp_Object code_conversion_save(int int1, int int2);
	/**
	 * Original signature : <code>int decoding_buffer_size(coding_system*, int)</code><br>
	 * <i>native declaration : coding.h:728</i>
	 */
	public static native int decoding_buffer_size(Pointer<coding_system > coding_systemPtr1, int int1);
	/**
	 * Original signature : <code>int encoding_buffer_size(coding_system*, int)</code><br>
	 * <i>native declaration : coding.h:730</i>
	 */
	public static native int encoding_buffer_size(Pointer<coding_system > coding_systemPtr1, int int1);
	/**
	 * Original signature : <code>void setup_coding_system(Lisp_Object, coding_system*)</code><br>
	 * <i>native declaration : coding.h:732</i>
	 */
	public static native void setup_coding_system(KeyboardLibrary.Lisp_Object Lisp_Object1, Pointer<coding_system > coding_systemPtr1);
	/**
	 * Original signature : <code>Lisp_Object coding_charset_list(coding_system*)</code><br>
	 * <i>native declaration : coding.h:734</i>
	 */
	public static native KeyboardLibrary.Lisp_Object coding_charset_list(Pointer<coding_system > coding_systemPtr1);
	/**
	 * Original signature : <code>Lisp_Object coding_system_charset_list(Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:736</i>
	 */
	public static native KeyboardLibrary.Lisp_Object coding_system_charset_list(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object code_convert_string(Lisp_Object, Lisp_Object, Lisp_Object, int, int, int)</code><br>
	 * <i>native declaration : coding.h:738</i>
	 */
	public static native KeyboardLibrary.Lisp_Object code_convert_string(KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2, KeyboardLibrary.Lisp_Object Lisp_Object3, int int1, int int2, int int3);
	/**
	 * Original signature : <code>Lisp_Object code_convert_string_norecord(Lisp_Object, Lisp_Object, int)</code><br>
	 * <i>native declaration : coding.h:740</i>
	 */
	public static native KeyboardLibrary.Lisp_Object code_convert_string_norecord(KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2, int int1);
	/**
	 * Original signature : <code>Lisp_Object raw_text_coding_system(Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:742</i>
	 */
	public static native KeyboardLibrary.Lisp_Object raw_text_coding_system(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object coding_inherit_eol_type(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:744</i>
	 */
	public static native KeyboardLibrary.Lisp_Object coding_inherit_eol_type(KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object complement_process_encoding_system(Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:746</i>
	 */
	public static native KeyboardLibrary.Lisp_Object complement_process_encoding_system(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int decode_coding_gap(coding_system*)</code><br>
	 * <i>native declaration : coding.h:748</i>
	 */
	public static native int decode_coding_gap(Pointer<coding_system > coding_systemPtr1);
	/**
	 * Original signature : <code>void decode_coding_object(coding_system*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:750</i>
	 */
	public static native void decode_coding_object(Pointer<coding_system > coding_systemPtr1, KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void encode_coding_object(coding_system*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:752</i>
	 */
	public static native void encode_coding_object(Pointer<coding_system > coding_systemPtr1, KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object preferred_coding_system()</code><br>
	 * <i>native declaration : coding.h:754</i>
	 */
	public static native KeyboardLibrary.Lisp_Object preferred_coding_system();
	/**
	 * Original signature : <code>int emacs_mule_string_char(unsigned char*)</code><br>
	 * <i>native declaration : coding.h:773</i>
	 */
	public static native int emacs_mule_string_char(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>Lisp_Object unuse_menu_items(Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:953</i>
	 */
	public static native KeyboardLibrary.Lisp_Object unuse_menu_items(KeyboardLibrary.Lisp_Object dummy);
	/**
	 * Original signature : <code>Lisp_Object parse_modifiers(Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:980</i>
	 */
	public static native KeyboardLibrary.Lisp_Object parse_modifiers(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object reorder_modifiers(Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:982</i>
	 */
	public static native KeyboardLibrary.Lisp_Object reorder_modifiers(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object read_char(int, ptrdiff_t, Lisp_Object*, Lisp_Object, int*, int*)</code><br>
	 * <i>native declaration : keyboard.h:984</i>
	 */
	public static native KeyboardLibrary.Lisp_Object read_char(int int1, @Ptr long ptrdiff_t1, Pointer<KeyboardLibrary.Lisp_Object > Lisp_ObjectPtr1, KeyboardLibrary.Lisp_Object Lisp_Object1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2);
	/**
	 * Original signature : <code>int parse_solitary_modifier(Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:986</i>
	 */
	public static native int parse_solitary_modifier(KeyboardLibrary.Lisp_Object symbol);
	/**
	 * Original signature : <code>int menu_separator_name_p(const char*)</code><br>
	 * <i>native declaration : keyboard.h:1015</i>
	 */
	public static native int menu_separator_name_p(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>int parse_menu_item(Lisp_Object, int)</code><br>
	 * <i>native declaration : keyboard.h:1017</i>
	 */
	public static native int parse_menu_item(KeyboardLibrary.Lisp_Object Lisp_Object1, int int1);
	/**
	 * Original signature : <code>void init_kboard(KBOARD*)</code><br>
	 * <i>native declaration : keyboard.h:1019</i>
	 */
	public static native void init_kboard(Pointer<kboard > KBOARDPtr1);
	/**
	 * Original signature : <code>void delete_kboard(KBOARD*)</code><br>
	 * <i>native declaration : keyboard.h:1021</i>
	 */
	public static native void delete_kboard(Pointer<kboard > KBOARDPtr1);
	/**
	 * Original signature : <code>void not_single_kboard_state(KBOARD*)</code><br>
	 * <i>native declaration : keyboard.h:1023</i>
	 */
	public static native void not_single_kboard_state(Pointer<kboard > KBOARDPtr1);
	/**
	 * Original signature : <code>void push_kboard(kboard*)</code><br>
	 * <i>native declaration : keyboard.h:1025</i>
	 */
	public static native void push_kboard(Pointer<kboard > kboardPtr1);
	/**
	 * Original signature : <code>void push_frame_kboard(frame*)</code><br>
	 * <i>native declaration : keyboard.h:1027</i>
	 */
	public static native void push_frame_kboard(Pointer<KeyboardLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void pop_kboard()</code><br>
	 * <i>native declaration : keyboard.h:1029</i>
	 */
	public static native void pop_kboard();
	/**
	 * Original signature : <code>void temporarily_switch_to_single_kboard(frame*)</code><br>
	 * <i>native declaration : keyboard.h:1031</i>
	 */
	public static native void temporarily_switch_to_single_kboard(Pointer<KeyboardLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void record_asynch_buffer_change()</code><br>
	 * <i>native declaration : keyboard.h:1033</i>
	 */
	public static native void record_asynch_buffer_change();
	/**
	 * Original signature : <code>void input_poll_signal(int)</code><br>
	 * <i>native declaration : keyboard.h:1035</i>
	 */
	public static native void input_poll_signal(int int1);
	/**
	 * Original signature : <code>void start_polling()</code><br>
	 * <i>native declaration : keyboard.h:1037</i>
	 */
	public static native void start_polling();
	/**
	 * Original signature : <code>void stop_polling()</code><br>
	 * <i>native declaration : keyboard.h:1039</i>
	 */
	public static native void stop_polling();
	/**
	 * Original signature : <code>void set_poll_suppress_count(int)</code><br>
	 * <i>native declaration : keyboard.h:1041</i>
	 */
	public static native void set_poll_suppress_count(int int1);
	/**
	 * Original signature : <code>void gobble_input(int)</code><br>
	 * <i>native declaration : keyboard.h:1043</i>
	 */
	public static native void gobble_input(int int1);
	/**
	 * Original signature : <code>int input_polling_used()</code><br>
	 * <i>native declaration : keyboard.h:1045</i>
	 */
	public static native int input_polling_used();
	/**
	 * Original signature : <code>void clear_input_pending()</code><br>
	 * <i>native declaration : keyboard.h:1047</i>
	 */
	public static native void clear_input_pending();
	/**
	 * Original signature : <code>int requeued_events_pending_p()</code><br>
	 * <i>native declaration : keyboard.h:1049</i>
	 */
	public static native int requeued_events_pending_p();
	/**
	 * Original signature : <code>void bind_polling_period(int)</code><br>
	 * <i>native declaration : keyboard.h:1051</i>
	 */
	public static native void bind_polling_period(int int1);
	/**
	 * Original signature : <code>int make_ctrl_char(int)</code><br>
	 * <i>native declaration : keyboard.h:1053</i>
	 */
	public static native int make_ctrl_char(int int1);
	/**
	 * Original signature : <code>void stuff_buffered_input(Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:1055</i>
	 */
	public static native void stuff_buffered_input(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void clear_waiting_for_input()</code><br>
	 * <i>native declaration : keyboard.h:1057</i>
	 */
	public static native void clear_waiting_for_input();
	/**
	 * Original signature : <code>void swallow_events(int)</code><br>
	 * <i>native declaration : keyboard.h:1059</i>
	 */
	public static native void swallow_events(int int1);
	/**
	 * Original signature : <code>int lucid_event_type_list_p(Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:1061</i>
	 */
	public static native int lucid_event_type_list_p(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void kbd_buffer_store_event(input_event*)</code><br>
	 * <i>native declaration : keyboard.h:1063</i>
	 */
	public static native void kbd_buffer_store_event(Pointer<KeyboardLibrary.input_event > input_eventPtr1);
	/**
	 * Original signature : <code>void kbd_buffer_store_event_hold(input_event*, input_event*)</code><br>
	 * <i>native declaration : keyboard.h:1065</i>
	 */
	public static native void kbd_buffer_store_event_hold(Pointer<KeyboardLibrary.input_event > input_eventPtr1, Pointer<KeyboardLibrary.input_event > input_eventPtr2);
	/**
	 * Original signature : <code>void kbd_buffer_unget_event(input_event*)</code><br>
	 * <i>native declaration : keyboard.h:1067</i>
	 */
	public static native void kbd_buffer_unget_event(Pointer<KeyboardLibrary.input_event > input_eventPtr1);
	/**
	 * Original signature : <code>void poll_for_input_1()</code><br>
	 * <i>native declaration : keyboard.h:1069</i>
	 */
	public static native void poll_for_input_1();
	/**
	 * Original signature : <code>void show_help_echo(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:1071</i>
	 */
	public static native void show_help_echo(KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2, KeyboardLibrary.Lisp_Object Lisp_Object3, KeyboardLibrary.Lisp_Object Lisp_Object4);
	/**
	 * Original signature : <code>void gen_help_event(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:1073</i>
	 */
	public static native void gen_help_event(KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2, KeyboardLibrary.Lisp_Object Lisp_Object3, KeyboardLibrary.Lisp_Object Lisp_Object4);
	/**
	 * Original signature : <code>void kbd_buffer_store_help_event(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:1075</i>
	 */
	public static native void kbd_buffer_store_help_event(KeyboardLibrary.Lisp_Object Lisp_Object1, KeyboardLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object menu_item_eval_property(Lisp_Object)</code><br>
	 * <i>native declaration : keyboard.h:1077</i>
	 */
	public static native KeyboardLibrary.Lisp_Object menu_item_eval_property(KeyboardLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int kbd_buffer_events_waiting(int)</code><br>
	 * <i>native declaration : keyboard.h:1079</i>
	 */
	public static native int kbd_buffer_events_waiting(int int1);
	/**
	 * Original signature : <code>void add_user_signal(int, const char*)</code><br>
	 * <i>native declaration : keyboard.h:1081</i>
	 */
	public static native void add_user_signal(int int1, Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>int tty_read_avail_input(terminal*, int, input_event*)</code><br>
	 * <i>native declaration : keyboard.h:1083</i>
	 */
	public static native int tty_read_avail_input(Pointer<KeyboardLibrary.terminal > terminalPtr1, int int1, Pointer<KeyboardLibrary.input_event > input_eventPtr1);
	/**
	 * Original signature : <code>int timer_check()</code><br>
	 * <i>native declaration : keyboard.h:1085</i>
	 */
	public static native int timer_check();
	/**
	 * Original signature : <code>void mark_kboards()</code><br>
	 * <i>native declaration : keyboard.h:1087</i>
	 */
	public static native void mark_kboards();
	/**
	 * Table of pointers to the structure `composition' indexed by<br>
	 * COMPOSITION-ID.<br>
	 * C type : extern composition**
	 */
	public Pointer<Pointer<composition > > composition_table() {
		try {
			return (Pointer<Pointer<composition > >)BridJ.getNativeLibrary("keyboard").getSymbolPointer("composition_table").as(DefaultParameterizedType.paramType(Pointer.class, DefaultParameterizedType.paramType(Pointer.class, composition.class))).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Table of pointers to the structure `composition' indexed by<br>
	 * COMPOSITION-ID.<br>
	 * C type : extern composition**
	 */
	public KeyboardLibrary composition_table(Pointer<Pointer<composition > > composition_table) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("composition_table").as(DefaultParameterizedType.paramType(Pointer.class, DefaultParameterizedType.paramType(Pointer.class, composition.class))).set(composition_table);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Number of the currently registered compositions.
	@Ptr 
	public long n_compositions() {
		try {
			return (long)BridJ.getNativeLibrary("keyboard").getSymbolPointer("n_compositions").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Number of the currently registered compositions.
	@Ptr 
	public KeyboardLibrary n_compositions(long n_compositions) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("n_compositions").as(long.class).set(n_compositions);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[256]
	@Array({256}) 
	public Pointer<Byte > emacs_mule_bytes() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("keyboard").getSymbolPointer("emacs_mule_bytes").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Temporarily used before a frame has been opened.<br>
	 * C type : extern KBOARD*
	 */
	public Pointer<kboard > initial_kboard() {
		try {
			return (Pointer<kboard >)BridJ.getNativeLibrary("keyboard").getSymbolPointer("initial_kboard").as(DefaultParameterizedType.paramType(Pointer.class, kboard.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Temporarily used before a frame has been opened.<br>
	 * C type : extern KBOARD*
	 */
	public KeyboardLibrary initial_kboard(Pointer<kboard > initial_kboard) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("initial_kboard").as(DefaultParameterizedType.paramType(Pointer.class, kboard.class)).set(initial_kboard);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * In the single-kboard state, this is the kboard<br>
	 * from which input is accepted.<br>
	 * In the any-kboard state, this is the kboard from which we are<br>
	 * right now considering input.  We can consider input from another<br>
	 * kboard, but doing so requires throwing to wrong_kboard_jmpbuf.<br>
	 * C type : extern KBOARD*
	 */
	public Pointer<kboard > current_kboard() {
		try {
			return (Pointer<kboard >)BridJ.getNativeLibrary("keyboard").getSymbolPointer("current_kboard").as(DefaultParameterizedType.paramType(Pointer.class, kboard.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * In the single-kboard state, this is the kboard<br>
	 * from which input is accepted.<br>
	 * In the any-kboard state, this is the kboard from which we are<br>
	 * right now considering input.  We can consider input from another<br>
	 * kboard, but doing so requires throwing to wrong_kboard_jmpbuf.<br>
	 * C type : extern KBOARD*
	 */
	public KeyboardLibrary current_kboard(Pointer<kboard > current_kboard) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("current_kboard").as(DefaultParameterizedType.paramType(Pointer.class, kboard.class)).set(current_kboard);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * A list of all kboard objects, linked through next_kboard.<br>
	 * C type : extern KBOARD*
	 */
	public Pointer<kboard > all_kboards() {
		try {
			return (Pointer<kboard >)BridJ.getNativeLibrary("keyboard").getSymbolPointer("all_kboards").as(DefaultParameterizedType.paramType(Pointer.class, kboard.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * A list of all kboard objects, linked through next_kboard.<br>
	 * C type : extern KBOARD*
	 */
	public KeyboardLibrary all_kboards(Pointer<kboard > all_kboards) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("all_kboards").as(DefaultParameterizedType.paramType(Pointer.class, kboard.class)).set(all_kboards);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero means polling for input is temporarily suppressed.
	public int poll_suppress_count() {
		try {
			return (int)BridJ.getNativeLibrary("keyboard").getSymbolPointer("poll_suppress_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero means polling for input is temporarily suppressed.
	public KeyboardLibrary poll_suppress_count(int poll_suppress_count) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("poll_suppress_count").as(int.class).set(poll_suppress_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int this_command_key_count() {
		try {
			return (int)BridJ.getNativeLibrary("keyboard").getSymbolPointer("this_command_key_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public KeyboardLibrary this_command_key_count(int this_command_key_count) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("this_command_key_count").as(int.class).set(this_command_key_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Number of slots currently allocated in menu_items.
	public int menu_items_allocated() {
		try {
			return (int)BridJ.getNativeLibrary("keyboard").getSymbolPointer("menu_items_allocated").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Number of slots currently allocated in menu_items.
	public KeyboardLibrary menu_items_allocated(int menu_items_allocated) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("menu_items_allocated").as(int.class).set(menu_items_allocated);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// This is the index in menu_items of the first empty slot.
	public int menu_items_used() {
		try {
			return (int)BridJ.getNativeLibrary("keyboard").getSymbolPointer("menu_items_used").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// This is the index in menu_items of the first empty slot.
	public KeyboardLibrary menu_items_used(int menu_items_used) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("menu_items_used").as(int.class).set(menu_items_used);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * The number of panes currently recorded in menu_items,<br>
	 * excluding those within submenus.
	 */
	public int menu_items_n_panes() {
		try {
			return (int)BridJ.getNativeLibrary("keyboard").getSymbolPointer("menu_items_n_panes").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * The number of panes currently recorded in menu_items,<br>
	 * excluding those within submenus.
	 */
	public KeyboardLibrary menu_items_n_panes(int menu_items_n_panes) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("menu_items_n_panes").as(int.class).set(menu_items_n_panes);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// True while doing kbd input.
	public int waiting_for_input() {
		try {
			return (int)BridJ.getNativeLibrary("keyboard").getSymbolPointer("waiting_for_input").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// True while doing kbd input.
	public KeyboardLibrary waiting_for_input(int waiting_for_input) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("waiting_for_input").as(int.class).set(waiting_for_input);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Address (if not 0) of EMACS_TIME to zero out if a SIGIO interrupt<br>
	 * happens.<br>
	 * C type : extern int*
	 */
	public Pointer<Integer > input_available_clear_time() {
		try {
			return (Pointer<Integer >)BridJ.getNativeLibrary("keyboard").getSymbolPointer("input_available_clear_time").as(DefaultParameterizedType.paramType(Pointer.class, Integer.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Address (if not 0) of EMACS_TIME to zero out if a SIGIO interrupt<br>
	 * happens.<br>
	 * C type : extern int*
	 */
	public KeyboardLibrary input_available_clear_time(Pointer<Integer > input_available_clear_time) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("input_available_clear_time").as(DefaultParameterizedType.paramType(Pointer.class, Integer.class)).set(input_available_clear_time);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int quit_char() {
		try {
			return (int)BridJ.getNativeLibrary("keyboard").getSymbolPointer("quit_char").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public KeyboardLibrary quit_char(int quit_char) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("quit_char").as(int.class).set(quit_char);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int timers_run() {
		try {
			return (int)BridJ.getNativeLibrary("keyboard").getSymbolPointer("timers_run").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public KeyboardLibrary timers_run(int timers_run) {
		try {
			{
				BridJ.getNativeLibrary("keyboard").getSymbolPointer("timers_run").as(int.class).set(timers_run);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface face {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface ccl_spec {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Time {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface frame {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface terminal {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface window {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface composition_it {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface font_metrics {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface input_event {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface uintmax_t {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface EMACS_INT {
		
	};
}
