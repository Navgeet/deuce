package emacs.keyboard;
import emacs.keyboard.KeyboardLibrary.EMACS_INT;
import emacs.keyboard.KeyboardLibrary.ccl_spec;
import emacs.keyboard.KeyboardLibrary.coding_result_code;
import emacs.keyboard.KeyboardLibrary.utf_bom_type;
import org.bridj.Callback;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Union;
/**
 * <i>native declaration : coding.h:721</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("keyboard") 
public class coding_system extends StructObject {
	public coding_system() {
		super();
	}
	/**
	 * ID number of the coding system.  This is an index to<br>
	 * Vcoding_system_hash_table.  This value is set by<br>
	 * setup_coding_system.  At the early stage of building time, this<br>
	 * value is -1 in the array coding_categories to indicate that no<br>
	 * coding-system of that category is yet defined.
	 */
	@Ptr 
	@Field(0) 
	public long id() {
		return this.io.getSizeTField(this, 0);
	}
	/**
	 * ID number of the coding system.  This is an index to<br>
	 * Vcoding_system_hash_table.  This value is set by<br>
	 * setup_coding_system.  At the early stage of building time, this<br>
	 * value is -1 in the array coding_categories to indicate that no<br>
	 * coding-system of that category is yet defined.
	 */
	@Ptr 
	@Field(0) 
	public coding_system id(long id) {
		this.io.setSizeTField(this, 0, id);
		return this;
	}
	/**
	 * Flag bits of the coding system.  The meaning of each bit is common<br>
	 * to all types of coding systems.
	 */
	@Field(1) 
	public int common_flags() {
		return this.io.getIntField(this, 1);
	}
	/**
	 * Flag bits of the coding system.  The meaning of each bit is common<br>
	 * to all types of coding systems.
	 */
	@Field(1) 
	public coding_system common_flags(int common_flags) {
		this.io.setIntField(this, 1, common_flags);
		return this;
	}
	/**
	 * Mode bits of the coding system.  See the comments of the macros<br>
	 * CODING_MODE_XXX.
	 */
	@Field(2) 
	public int mode() {
		return this.io.getIntField(this, 2);
	}
	/**
	 * Mode bits of the coding system.  See the comments of the macros<br>
	 * CODING_MODE_XXX.
	 */
	@Field(2) 
	public coding_system mode(int mode) {
		this.io.setIntField(this, 2, mode);
		return this;
	}
	/**
	 * Detailed information specific to each type of coding system.<br>
	 * C type : spec_union
	 */
	@Field(3) 
	public coding_system.spec_union spec() {
		return this.io.getNativeObjectField(this, 3);
	}
	/**
	 * Detailed information specific to each type of coding system.<br>
	 * C type : spec_union
	 */
	@Field(3) 
	public coding_system spec(coding_system.spec_union spec) {
		this.io.setNativeObjectField(this, 3, spec);
		return this;
	}
	@Field(4) 
	public int max_charset_id() {
		return this.io.getIntField(this, 4);
	}
	@Field(4) 
	public coding_system max_charset_id(int max_charset_id) {
		this.io.setIntField(this, 4, max_charset_id);
		return this;
	}
	/// C type : unsigned char*
	@Field(5) 
	public Pointer<Byte > safe_charsets() {
		return this.io.getPointerField(this, 5);
	}
	/// C type : unsigned char*
	@Field(5) 
	public coding_system safe_charsets(Pointer<Byte > safe_charsets) {
		this.io.setPointerField(this, 5, safe_charsets);
		return this;
	}
	/**
	 * The following two members specify how binary 8-bit code 128..255<br>
	 * are represented in source and destination text respectively.  1<br>
	 * means they are represented by 2-byte sequence, 0 means they are<br>
	 * represented by 1-byte as is (see the comment in character.h).
	 */
	@Field(6) 
	@Bits(1) 
	public int src_multibyte() {
		return this.io.getIntField(this, 6);
	}
	/**
	 * The following two members specify how binary 8-bit code 128..255<br>
	 * are represented in source and destination text respectively.  1<br>
	 * means they are represented by 2-byte sequence, 0 means they are<br>
	 * represented by 1-byte as is (see the comment in character.h).
	 */
	@Field(6) 
	@Bits(1) 
	public coding_system src_multibyte(int src_multibyte) {
		this.io.setIntField(this, 6, src_multibyte);
		return this;
	}
	@Field(7) 
	@Bits(1) 
	public int dst_multibyte() {
		return this.io.getIntField(this, 7);
	}
	@Field(7) 
	@Bits(1) 
	public coding_system dst_multibyte(int dst_multibyte) {
		this.io.setIntField(this, 7, dst_multibyte);
		return this;
	}
	/// Number of error source data found in a decoding routine.
	@Field(13) 
	public int errors() {
		return this.io.getIntField(this, 13);
	}
	/// Number of error source data found in a decoding routine.
	@Field(13) 
	public coding_system errors(int errors) {
		this.io.setIntField(this, 13, errors);
		return this;
	}
	/**
	 * Store the positions of error source data.<br>
	 * C type : EMACS_INT*
	 */
	@Field(14) 
	public Pointer<EMACS_INT > error_positions() {
		return this.io.getPointerField(this, 14);
	}
	/**
	 * Store the positions of error source data.<br>
	 * C type : EMACS_INT*
	 */
	@Field(14) 
	public coding_system error_positions(Pointer<EMACS_INT > error_positions) {
		this.io.setPointerField(this, 14, error_positions);
		return this;
	}
	/**
	 * Finish status of code conversion.<br>
	 * C type : coding_result_code
	 */
	@Field(15) 
	public IntValuedEnum<coding_result_code > result() {
		return this.io.getEnumField(this, 15);
	}
	/**
	 * Finish status of code conversion.<br>
	 * C type : coding_result_code
	 */
	@Field(15) 
	public coding_system result(IntValuedEnum<coding_result_code > result) {
		this.io.setEnumField(this, 15, result);
		return this;
	}
	/// C type : const unsigned char*
	@Field(21) 
	public Pointer<Byte > source() {
		return this.io.getPointerField(this, 21);
	}
	/// C type : const unsigned char*
	@Field(21) 
	public coding_system source(Pointer<Byte > source) {
		this.io.setPointerField(this, 21, source);
		return this;
	}
	/// C type : unsigned char*
	@Field(26) 
	public Pointer<Byte > destination() {
		return this.io.getPointerField(this, 26);
	}
	/// C type : unsigned char*
	@Field(26) 
	public coding_system destination(Pointer<Byte > destination) {
		this.io.setPointerField(this, 26, destination);
		return this;
	}
	/**
	 * Set to 1 if the source of conversion is not in the member<br>
	 * `charbuf', but at `src_object'.
	 */
	@Field(27) 
	public int chars_at_source() {
		return this.io.getIntField(this, 27);
	}
	/**
	 * Set to 1 if the source of conversion is not in the member<br>
	 * `charbuf', but at `src_object'.
	 */
	@Field(27) 
	public coding_system chars_at_source(int chars_at_source) {
		this.io.setIntField(this, 27, chars_at_source);
		return this;
	}
	/**
	 * If an element is non-negative, it is a character code.<br>
	 * If it is in the range -128..-1, it is a 8-bit character code<br>
	 * minus 256.<br>
	 * If it is less than -128, it specifies the start of an annotation<br>
	 * chunk.  The length of the chunk is -128 minus the value of the<br>
	 * element.  The following elements are OFFSET, ANNOTATION-TYPE, and<br>
	 * a sequence of actual data for the annotation.  OFFSET is a<br>
	 * character position offset from dst_pos or src_pos,<br>
	 * ANNOTATION-TYPE specifies the meaning of the annotation and how to<br>
	 * handle the following data..<br>
	 * C type : int*
	 */
	@Field(28) 
	public Pointer<Integer > charbuf() {
		return this.io.getPointerField(this, 28);
	}
	/**
	 * If an element is non-negative, it is a character code.<br>
	 * If it is in the range -128..-1, it is a 8-bit character code<br>
	 * minus 256.<br>
	 * If it is less than -128, it specifies the start of an annotation<br>
	 * chunk.  The length of the chunk is -128 minus the value of the<br>
	 * element.  The following elements are OFFSET, ANNOTATION-TYPE, and<br>
	 * a sequence of actual data for the annotation.  OFFSET is a<br>
	 * character position offset from dst_pos or src_pos,<br>
	 * ANNOTATION-TYPE specifies the meaning of the annotation and how to<br>
	 * handle the following data..<br>
	 * C type : int*
	 */
	@Field(28) 
	public coding_system charbuf(Pointer<Integer > charbuf) {
		this.io.setPointerField(this, 28, charbuf);
		return this;
	}
	@Field(29) 
	public int charbuf_size() {
		return this.io.getIntField(this, 29);
	}
	@Field(29) 
	public coding_system charbuf_size(int charbuf_size) {
		this.io.setIntField(this, 29, charbuf_size);
		return this;
	}
	@Field(30) 
	public int charbuf_used() {
		return this.io.getIntField(this, 30);
	}
	@Field(30) 
	public coding_system charbuf_used(int charbuf_used) {
		this.io.setIntField(this, 30, charbuf_used);
		return this;
	}
	/// Set to 1 if charbuf contains an annotation.
	@Field(31) 
	public int annotated() {
		return this.io.getIntField(this, 31);
	}
	/// Set to 1 if charbuf contains an annotation.
	@Field(31) 
	public coding_system annotated(int annotated) {
		this.io.setIntField(this, 31, annotated);
		return this;
	}
	/// C type : unsigned char[64]
	@Array({64}) 
	@Field(32) 
	public Pointer<Byte > carryover() {
		return this.io.getPointerField(this, 32);
	}
	@Field(33) 
	public int carryover_bytes() {
		return this.io.getIntField(this, 33);
	}
	@Field(33) 
	public coding_system carryover_bytes(int carryover_bytes) {
		this.io.setIntField(this, 33, carryover_bytes);
		return this;
	}
	@Field(34) 
	public int default_char() {
		return this.io.getIntField(this, 34);
	}
	@Field(34) 
	public coding_system default_char(int default_char) {
		this.io.setIntField(this, 34, default_char);
		return this;
	}
	/// C type : detector_callback
	@Field(35) 
	public Pointer<coding_system.detector_callback > detector() {
		return this.io.getPointerField(this, 35);
	}
	/// C type : detector_callback
	@Field(35) 
	public coding_system detector(Pointer<coding_system.detector_callback > detector) {
		this.io.setPointerField(this, 35, detector);
		return this;
	}
	/// C type : decoder_callback
	@Field(36) 
	public Pointer<coding_system.decoder_callback > decoder() {
		return this.io.getPointerField(this, 36);
	}
	/// C type : decoder_callback
	@Field(36) 
	public coding_system decoder(Pointer<coding_system.decoder_callback > decoder) {
		this.io.setPointerField(this, 36, decoder);
		return this;
	}
	/// C type : encoder_callback
	@Field(37) 
	public Pointer<coding_system.encoder_callback > encoder() {
		return this.io.getPointerField(this, 37);
	}
	/// C type : encoder_callback
	@Field(37) 
	public coding_system encoder(Pointer<coding_system.encoder_callback > encoder) {
		this.io.setPointerField(this, 37, encoder);
		return this;
	}
	/// <i>native declaration : coding.h:715</i>
	/// <i>native declaration : coding.h:715</i>
	@Union 
	public static class spec_union extends StructObject {
		public spec_union() {
			super();
		}
		/// C type : iso_2022_spec
		@Field(0) 
		public iso_2022_spec iso_2022() {
			return this.io.getNativeObjectField(this, 0);
		}
		/// C type : iso_2022_spec
		@Field(0) 
		public spec_union iso_2022(iso_2022_spec iso_2022) {
			this.io.setNativeObjectField(this, 0, iso_2022);
			return this;
		}
		/**
		 * Defined in ccl.h.<br>
		 * C type : ccl_spec*
		 */
		@Field(1) 
		public Pointer<ccl_spec > ccl() {
			return this.io.getPointerField(this, 1);
		}
		/**
		 * Defined in ccl.h.<br>
		 * C type : ccl_spec*
		 */
		@Field(1) 
		public spec_union ccl(Pointer<ccl_spec > ccl) {
			this.io.setPointerField(this, 1, ccl);
			return this;
		}
		/// C type : utf_16_spec
		@Field(2) 
		public utf_16_spec utf_16() {
			return this.io.getNativeObjectField(this, 2);
		}
		/// C type : utf_16_spec
		@Field(2) 
		public spec_union utf_16(utf_16_spec utf_16) {
			this.io.setNativeObjectField(this, 2, utf_16);
			return this;
		}
		/// C type : utf_bom_type
		@Field(3) 
		public IntValuedEnum<utf_bom_type > utf_8_bom() {
			return this.io.getEnumField(this, 3);
		}
		/// C type : utf_bom_type
		@Field(3) 
		public spec_union utf_8_bom(IntValuedEnum<utf_bom_type > utf_8_bom) {
			this.io.setEnumField(this, 3, utf_8_bom);
			return this;
		}
		/// C type : emacs_mule_spec
		@Field(4) 
		public emacs_mule_spec emacs_mule() {
			return this.io.getNativeObjectField(this, 4);
		}
		/// C type : emacs_mule_spec
		@Field(4) 
		public spec_union emacs_mule(emacs_mule_spec emacs_mule) {
			this.io.setNativeObjectField(this, 4, emacs_mule);
			return this;
		}
	};
	/// <i>native declaration : coding.h:718</i>
	/// <i>native declaration : coding.h:718</i>
	public static abstract class detector_callback extends Callback<detector_callback > {
		public abstract int apply(Pointer<coding_system > coding_systemPtr1, Pointer<coding_detection_info > coding_detection_infoPtr1);
	};
	/// <i>native declaration : coding.h:719</i>
	/// <i>native declaration : coding.h:719</i>
	public static abstract class decoder_callback extends Callback<decoder_callback > {
		public abstract void apply(Pointer<coding_system > coding_systemPtr1);
	};
	/// <i>native declaration : coding.h:720</i>
	/// <i>native declaration : coding.h:720</i>
	public static abstract class encoder_callback extends Callback<encoder_callback > {
		public abstract int apply(Pointer<coding_system > coding_systemPtr1);
	};
}
