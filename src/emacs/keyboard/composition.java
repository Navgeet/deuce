package emacs.keyboard;
import emacs.keyboard.KeyboardLibrary.composition_method;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : composite.h:468</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("keyboard") 
public class composition extends StructObject {
	public composition() {
		super();
	}
	/// Number of glyphs of the composition components.
	@Field(0) 
	public int glyph_len() {
		return this.io.getIntField(this, 0);
	}
	/// Number of glyphs of the composition components.
	@Field(0) 
	public composition glyph_len(int glyph_len) {
		this.io.setIntField(this, 0, glyph_len);
		return this;
	}
	/// Width, ascent, and descent pixels of the composition.
	@Field(1) 
	public short pixel_width() {
		return this.io.getShortField(this, 1);
	}
	/// Width, ascent, and descent pixels of the composition.
	@Field(1) 
	public composition pixel_width(short pixel_width) {
		this.io.setShortField(this, 1, pixel_width);
		return this;
	}
	/// Width, ascent, and descent pixels of the composition.
	@Field(2) 
	public short ascent() {
		return this.io.getShortField(this, 2);
	}
	/// Width, ascent, and descent pixels of the composition.
	@Field(2) 
	public composition ascent(short ascent) {
		this.io.setShortField(this, 2, ascent);
		return this;
	}
	/// Width, ascent, and descent pixels of the composition.
	@Field(3) 
	public short descent() {
		return this.io.getShortField(this, 3);
	}
	/// Width, ascent, and descent pixels of the composition.
	@Field(3) 
	public composition descent(short descent) {
		this.io.setShortField(this, 3, descent);
		return this;
	}
	@Field(4) 
	public short lbearing() {
		return this.io.getShortField(this, 4);
	}
	@Field(4) 
	public composition lbearing(short lbearing) {
		this.io.setShortField(this, 4, lbearing);
		return this;
	}
	@Field(5) 
	public short rbearing() {
		return this.io.getShortField(this, 5);
	}
	@Field(5) 
	public composition rbearing(short rbearing) {
		this.io.setShortField(this, 5, rbearing);
		return this;
	}
	/**
	 * How many columns the overall glyphs occupy on the screen.  This<br>
	 * gives an approximate value for column calculation in<br>
	 * Fcurrent_column, and etc.
	 */
	@Field(6) 
	public short width() {
		return this.io.getShortField(this, 6);
	}
	/**
	 * How many columns the overall glyphs occupy on the screen.  This<br>
	 * gives an approximate value for column calculation in<br>
	 * Fcurrent_column, and etc.
	 */
	@Field(6) 
	public composition width(short width) {
		this.io.setShortField(this, 6, width);
		return this;
	}
	/**
	 * Method of the composition.<br>
	 * C type : composition_method
	 */
	@Field(7) 
	public IntValuedEnum<composition_method > method() {
		return this.io.getEnumField(this, 7);
	}
	/**
	 * Method of the composition.<br>
	 * C type : composition_method
	 */
	@Field(7) 
	public composition method(IntValuedEnum<composition_method > method) {
		this.io.setEnumField(this, 7, method);
		return this;
	}
	/**
	 * For which font we have calculated the remaining members.  The<br>
	 * actual type is device dependent.<br>
	 * C type : void*
	 */
	@Field(9) 
	public Pointer<? > font() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * For which font we have calculated the remaining members.  The<br>
	 * actual type is device dependent.<br>
	 * C type : void*
	 */
	@Field(9) 
	public composition font(Pointer<? > font) {
		this.io.setPointerField(this, 9, font);
		return this;
	}
	/**
	 * Pointer to an array of x-offset and y-offset (by pixels) of<br>
	 * glyphs.  This points to a sufficient memory space (sizeof (short) *<br>
	 * glyph_len * 2) that is allocated when the composition is<br>
	 * registered in composition_table.  X-offset and Y-offset of Nth<br>
	 * glyph are (2N)th and (2N+1)th elements respectively.<br>
	 * C type : short*
	 */
	@Field(10) 
	public Pointer<Short > offsets() {
		return this.io.getPointerField(this, 10);
	}
	/**
	 * Pointer to an array of x-offset and y-offset (by pixels) of<br>
	 * glyphs.  This points to a sufficient memory space (sizeof (short) *<br>
	 * glyph_len * 2) that is allocated when the composition is<br>
	 * registered in composition_table.  X-offset and Y-offset of Nth<br>
	 * glyph are (2N)th and (2N+1)th elements respectively.<br>
	 * C type : short*
	 */
	@Field(10) 
	public composition offsets(Pointer<Short > offsets) {
		this.io.setPointerField(this, 10, offsets);
		return this;
	}
}
