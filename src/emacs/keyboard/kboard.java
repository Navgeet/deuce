package emacs.keyboard;
import emacs.keyboard.KeyboardLibrary.Lisp_Object;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : keyboard.h:871</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("keyboard") 
public class kboard extends StructObject {
	public kboard() {
		super();
	}
	/// C type : KBOARD*
	@Field(0) 
	public Pointer<kboard > next_kboard() {
		return this.io.getPointerField(this, 0);
	}
	/// C type : KBOARD*
	@Field(0) 
	public kboard next_kboard(Pointer<kboard > next_kboard) {
		this.io.setPointerField(this, 0, next_kboard);
		return this;
	}
	/**
	 * The start of storage for the current keyboard macro.<br>
	 * C type : Lisp_Object*
	 */
	@Field(10) 
	public Pointer<Lisp_Object > kbd_macro_buffer() {
		return this.io.getPointerField(this, 10);
	}
	/**
	 * The start of storage for the current keyboard macro.<br>
	 * C type : Lisp_Object*
	 */
	@Field(10) 
	public kboard kbd_macro_buffer(Pointer<Lisp_Object > kbd_macro_buffer) {
		this.io.setPointerField(this, 10, kbd_macro_buffer);
		return this;
	}
	/**
	 * Where to store the next keystroke of the macro.<br>
	 * C type : Lisp_Object*
	 */
	@Field(11) 
	public Pointer<Lisp_Object > kbd_macro_ptr() {
		return this.io.getPointerField(this, 11);
	}
	/**
	 * Where to store the next keystroke of the macro.<br>
	 * C type : Lisp_Object*
	 */
	@Field(11) 
	public kboard kbd_macro_ptr(Pointer<Lisp_Object > kbd_macro_ptr) {
		this.io.setPointerField(this, 11, kbd_macro_ptr);
		return this;
	}
	/**
	 * The finalized section of the macro starts at kbd_macro_buffer and<br>
	 * ends before this.  This is not the same as kbd_macro_ptr, because<br>
	 * we advance this to kbd_macro_ptr when a key's command is complete.<br>
	 * This way, the keystrokes for "end-kbd-macro" are not included in the<br>
	 * macro.  This also allows us to throw away the events added to the<br>
	 * macro by the last command: all the events between kbd_macro_end and<br>
	 * kbd_macro_ptr belong to the last command; see<br>
	 * cancel-kbd-macro-events.<br>
	 * C type : Lisp_Object*
	 */
	@Field(12) 
	public Pointer<Lisp_Object > kbd_macro_end() {
		return this.io.getPointerField(this, 12);
	}
	/**
	 * The finalized section of the macro starts at kbd_macro_buffer and<br>
	 * ends before this.  This is not the same as kbd_macro_ptr, because<br>
	 * we advance this to kbd_macro_ptr when a key's command is complete.<br>
	 * This way, the keystrokes for "end-kbd-macro" are not included in the<br>
	 * macro.  This also allows us to throw away the events added to the<br>
	 * macro by the last command: all the events between kbd_macro_end and<br>
	 * kbd_macro_ptr belong to the last command; see<br>
	 * cancel-kbd-macro-events.<br>
	 * C type : Lisp_Object*
	 */
	@Field(12) 
	public kboard kbd_macro_end(Pointer<Lisp_Object > kbd_macro_end) {
		this.io.setPointerField(this, 12, kbd_macro_end);
		return this;
	}
	/// Allocated size of kbd_macro_buffer.
	@Ptr 
	@Field(13) 
	public long kbd_macro_bufsize() {
		return this.io.getSizeTField(this, 13);
	}
	/// Allocated size of kbd_macro_buffer.
	@Ptr 
	@Field(13) 
	public kboard kbd_macro_bufsize(long kbd_macro_bufsize) {
		this.io.setSizeTField(this, 13, kbd_macro_bufsize);
		return this;
	}
	/**
	 * Number of displays using this KBOARD.  Normally 1, but can be<br>
	 * larger when you have multiple screens on a single X display.
	 */
	@Field(21) 
	public int reference_count() {
		return this.io.getIntField(this, 21);
	}
	/**
	 * Number of displays using this KBOARD.  Normally 1, but can be<br>
	 * larger when you have multiple screens on a single X display.
	 */
	@Field(21) 
	public kboard reference_count(int reference_count) {
		this.io.setIntField(this, 21, reference_count);
		return this;
	}
	/**
	 * This flag indicates that events were put into kbd_queue<br>
	 * while Emacs was running for some other KBOARD.<br>
	 * The flag means that, when Emacs goes into the any-kboard state again,<br>
	 * it should check this KBOARD to see if there is a complete command<br>
	 * waiting.<br>
	 * Note that the kbd_queue field can be non-nil even when<br>
	 * kbd_queue_has_data is 0.  When we push back an incomplete<br>
	 * command, then this flag is 0, meaning we don't want to try<br>
	 * reading from this KBOARD again until more input arrives.
	 */
	@Field(23) 
	public byte kbd_queue_has_data() {
		return this.io.getByteField(this, 23);
	}
	/**
	 * This flag indicates that events were put into kbd_queue<br>
	 * while Emacs was running for some other KBOARD.<br>
	 * The flag means that, when Emacs goes into the any-kboard state again,<br>
	 * it should check this KBOARD to see if there is a complete command<br>
	 * waiting.<br>
	 * Note that the kbd_queue field can be non-nil even when<br>
	 * kbd_queue_has_data is 0.  When we push back an incomplete<br>
	 * command, then this flag is 0, meaning we don't want to try<br>
	 * reading from this KBOARD again until more input arrives.
	 */
	@Field(23) 
	public kboard kbd_queue_has_data(byte kbd_queue_has_data) {
		this.io.setByteField(this, 23, kbd_queue_has_data);
		return this;
	}
	/// Nonzero means echo each character as typed.
	@Field(24) 
	public byte immediate_echo() {
		return this.io.getByteField(this, 24);
	}
	/// Nonzero means echo each character as typed.
	@Field(24) 
	public kboard immediate_echo(byte immediate_echo) {
		this.io.setByteField(this, 24, immediate_echo);
		return this;
	}
	/**
	 * If we have echoed a prompt string specified by the user,<br>
	 * this is its length in characters.  Otherwise this is -1.
	 */
	@Field(25) 
	public byte echo_after_prompt() {
		return this.io.getByteField(this, 25);
	}
	/**
	 * If we have echoed a prompt string specified by the user,<br>
	 * this is its length in characters.  Otherwise this is -1.
	 */
	@Field(25) 
	public kboard echo_after_prompt(byte echo_after_prompt) {
		this.io.setByteField(this, 25, echo_after_prompt);
		return this;
	}
}
