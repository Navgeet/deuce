package emacs.process;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : process.h:1142</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("process") 
public class Lisp_Process extends StructObject {
	public Lisp_Process() {
		super();
	}
	/**
	 * Number of this process.<br>
	 * allocate_process assumes this is the first non-Lisp_Object field.<br>
	 * A value 0 is used for pseudo-processes such as network or serial<br>
	 * connections.<br>
	 * C type : pid_t
	 */
	@Field(17) 
	public int pid() {
		return this.io.getIntField(this, 17);
	}
	/**
	 * Number of this process.<br>
	 * allocate_process assumes this is the first non-Lisp_Object field.<br>
	 * A value 0 is used for pseudo-processes such as network or serial<br>
	 * connections.<br>
	 * C type : pid_t
	 */
	@Field(17) 
	public Lisp_Process pid(int pid) {
		this.io.setIntField(this, 17, pid);
		return this;
	}
	/// Descriptor by which we read from this process
	@Field(18) 
	public int infd() {
		return this.io.getIntField(this, 18);
	}
	/// Descriptor by which we read from this process
	@Field(18) 
	public Lisp_Process infd(int infd) {
		this.io.setIntField(this, 18, infd);
		return this;
	}
	/// Descriptor by which we write to this process
	@Field(19) 
	public int outfd() {
		return this.io.getIntField(this, 19);
	}
	/// Descriptor by which we write to this process
	@Field(19) 
	public Lisp_Process outfd(int outfd) {
		this.io.setIntField(this, 19, outfd);
		return this;
	}
	/// Event-count of last event in which this process changed status.
	@Field(20) 
	public int tick() {
		return this.io.getIntField(this, 20);
	}
	/// Event-count of last event in which this process changed status.
	@Field(20) 
	public Lisp_Process tick(int tick) {
		this.io.setIntField(this, 20, tick);
		return this;
	}
	/// Event-count of last such event reported.
	@Field(21) 
	public int update_tick() {
		return this.io.getIntField(this, 21);
	}
	/// Event-count of last such event reported.
	@Field(21) 
	public Lisp_Process update_tick(int update_tick) {
		this.io.setIntField(this, 21, update_tick);
		return this;
	}
	/// Size of carryover in decoding.
	@Field(22) 
	public int decoding_carryover() {
		return this.io.getIntField(this, 22);
	}
	/// Size of carryover in decoding.
	@Field(22) 
	public Lisp_Process decoding_carryover(int decoding_carryover) {
		this.io.setIntField(this, 22, decoding_carryover);
		return this;
	}
	/**
	 * Hysteresis to try to read process output in larger blocks.<br>
	 * On some systems, e.g. GNU/Linux, Emacs is seen as<br>
	 * an interactive app also when reading process output, meaning<br>
	 * that process output can be read in as little as 1 byte at a<br>
	 * time.  Value is micro-seconds to delay reading output from<br>
	 * this process.  Range is 0 .. 50000.
	 */
	@Field(23) 
	public int read_output_delay() {
		return this.io.getIntField(this, 23);
	}
	/**
	 * Hysteresis to try to read process output in larger blocks.<br>
	 * On some systems, e.g. GNU/Linux, Emacs is seen as<br>
	 * an interactive app also when reading process output, meaning<br>
	 * that process output can be read in as little as 1 byte at a<br>
	 * time.  Value is micro-seconds to delay reading output from<br>
	 * this process.  Range is 0 .. 50000.
	 */
	@Field(23) 
	public Lisp_Process read_output_delay(int read_output_delay) {
		this.io.setIntField(this, 23, read_output_delay);
		return this;
	}
	/**
	 * Should we delay reading output from this process.<br>
	 * Initialized from `Vprocess_adaptive_read_buffering'.<br>
	 * 0 = nil, 1 = t, 2 = other.
	 */
	@Field(24) 
	@Bits(2) 
	public int adaptive_read_buffering() {
		return this.io.getIntField(this, 24);
	}
	/**
	 * Should we delay reading output from this process.<br>
	 * Initialized from `Vprocess_adaptive_read_buffering'.<br>
	 * 0 = nil, 1 = t, 2 = other.
	 */
	@Field(24) 
	@Bits(2) 
	public Lisp_Process adaptive_read_buffering(int adaptive_read_buffering) {
		this.io.setIntField(this, 24, adaptive_read_buffering);
		return this;
	}
	/// Skip reading this process on next read.
	@Field(25) 
	@Bits(1) 
	public int read_output_skip() {
		return this.io.getIntField(this, 25);
	}
	/// Skip reading this process on next read.
	@Field(25) 
	@Bits(1) 
	public Lisp_Process read_output_skip(int read_output_skip) {
		this.io.setIntField(this, 25, read_output_skip);
		return this;
	}
	/**
	 * Non-nil means kill silently if Emacs is exited.<br>
	 * This is the inverse of the `query-on-exit' flag.
	 */
	@Field(26) 
	@Bits(1) 
	public int kill_without_query() {
		return this.io.getIntField(this, 26);
	}
	/**
	 * Non-nil means kill silently if Emacs is exited.<br>
	 * This is the inverse of the `query-on-exit' flag.
	 */
	@Field(26) 
	@Bits(1) 
	public Lisp_Process kill_without_query(int kill_without_query) {
		this.io.setIntField(this, 26, kill_without_query);
		return this;
	}
	/// Non-nil if communicating through a pty.
	@Field(27) 
	@Bits(1) 
	public int pty_flag() {
		return this.io.getIntField(this, 27);
	}
	/// Non-nil if communicating through a pty.
	@Field(27) 
	@Bits(1) 
	public Lisp_Process pty_flag(int pty_flag) {
		this.io.setIntField(this, 27, pty_flag);
		return this;
	}
	/**
	 * Flag to set coding-system of the process buffer from the<br>
	 * coding_system used to decode process output.
	 */
	@Field(28) 
	@Bits(1) 
	public int inherit_coding_system_flag() {
		return this.io.getIntField(this, 28);
	}
	/**
	 * Flag to set coding-system of the process buffer from the<br>
	 * coding_system used to decode process output.
	 */
	@Field(28) 
	@Bits(1) 
	public Lisp_Process inherit_coding_system_flag(int inherit_coding_system_flag) {
		this.io.setIntField(this, 28, inherit_coding_system_flag);
		return this;
	}
	/**
	 * Record the process status in the raw form in which it comes from `wait'.<br>
	 * This is to avoid consing in a signal handler.  The `raw_status_new'<br>
	 * flag indicates that `raw_status' contains a new status that still<br>
	 * needs to be synced to `status'.
	 */
	@Field(29) 
	@Bits(1) 
	public int raw_status_new() {
		return this.io.getIntField(this, 29);
	}
	/**
	 * Record the process status in the raw form in which it comes from `wait'.<br>
	 * This is to avoid consing in a signal handler.  The `raw_status_new'<br>
	 * flag indicates that `raw_status' contains a new status that still<br>
	 * needs to be synced to `status'.
	 */
	@Field(29) 
	@Bits(1) 
	public Lisp_Process raw_status_new(int raw_status_new) {
		this.io.setIntField(this, 29, raw_status_new);
		return this;
	}
	@Field(30) 
	public int raw_status() {
		return this.io.getIntField(this, 30);
	}
	@Field(30) 
	public Lisp_Process raw_status(int raw_status) {
		this.io.setIntField(this, 30, raw_status);
		return this;
	}
}
