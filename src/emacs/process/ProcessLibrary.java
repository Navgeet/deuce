package emacs.process;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>process</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("process") 
@Runtime(CRuntime.class) 
public class ProcessLibrary {
	static {
		BridJ.register();
	}
	/// <i>native declaration : process.h</i>
	public static final String NULL_DEVICE = (String)"/dev/null";
	/// <i>native declaration : process.h:1213</i>
	/// <i>native declaration : process.h:1213</i>
	public static abstract class fd_callback extends Callback<fd_callback > {
		public abstract void apply(int fd, Pointer<? > data, int for_read);
	};
	/**
	 * Original signature : <code>Lisp_Object list_system_processes()</code><br>
	 * <i>native declaration : process.h:1204</i>
	 */
	public static native ProcessLibrary.Lisp_Object list_system_processes();
	/**
	 * Original signature : <code>Lisp_Object system_process_attributes(Lisp_Object)</code><br>
	 * <i>native declaration : process.h:1206</i>
	 */
	public static native ProcessLibrary.Lisp_Object system_process_attributes(ProcessLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void hold_keyboard_input()</code><br>
	 * <i>native declaration : process.h:1208</i>
	 */
	public static native void hold_keyboard_input();
	/**
	 * Original signature : <code>void unhold_keyboard_input()</code><br>
	 * <i>native declaration : process.h:1210</i>
	 */
	public static native void unhold_keyboard_input();
	/**
	 * Original signature : <code>int kbd_on_hold_p()</code><br>
	 * <i>native declaration : process.h:1212</i>
	 */
	public static native int kbd_on_hold_p();
	/**
	 * Original signature : <code>void add_read_fd(int, fd_callback, void*)</code><br>
	 * <i>native declaration : process.h:1215</i>
	 */
	public static native void add_read_fd(int fd, Pointer<ProcessLibrary.fd_callback > func, Pointer<? > data);
	/**
	 * Original signature : <code>void delete_read_fd(int)</code><br>
	 * <i>native declaration : process.h:1217</i>
	 */
	public static native void delete_read_fd(int fd);
	/**
	 * Original signature : <code>void add_write_fd(int, fd_callback, void*)</code><br>
	 * <i>native declaration : process.h:1219</i>
	 */
	public static native void add_write_fd(int fd, Pointer<ProcessLibrary.fd_callback > func, Pointer<? > data);
	/**
	 * Original signature : <code>void delete_write_fd(int)</code><br>
	 * <i>native declaration : process.h:1221</i>
	 */
	public static native void delete_write_fd(int fd);
	/**
	 * True if we are about to fork off a synchronous process or if we<br>
	 * are waiting for it.
	 */
	public int synch_process_alive() {
		try {
			return (int)BridJ.getNativeLibrary("process").getSymbolPointer("synch_process_alive").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * True if we are about to fork off a synchronous process or if we<br>
	 * are waiting for it.
	 */
	public ProcessLibrary synch_process_alive(int synch_process_alive) {
		try {
			{
				BridJ.getNativeLibrary("process").getSymbolPointer("synch_process_alive").as(int.class).set(synch_process_alive);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Nonzero => this is a string explaining death of synchronous subprocess.<br>
	 * C type : extern const char*
	 */
	public Pointer<Byte > synch_process_death() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("process").getSymbolPointer("synch_process_death").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Nonzero => this is a string explaining death of synchronous subprocess.<br>
	 * C type : extern const char*
	 */
	public ProcessLibrary synch_process_death(Pointer<Byte > synch_process_death) {
		try {
			{
				BridJ.getNativeLibrary("process").getSymbolPointer("synch_process_death").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(synch_process_death);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero => this is the signal number that terminated the subprocess.
	public int synch_process_termsig() {
		try {
			return (int)BridJ.getNativeLibrary("process").getSymbolPointer("synch_process_termsig").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero => this is the signal number that terminated the subprocess.
	public ProcessLibrary synch_process_termsig(int synch_process_termsig) {
		try {
			{
				BridJ.getNativeLibrary("process").getSymbolPointer("synch_process_termsig").as(int.class).set(synch_process_termsig);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * If synch_process_death is zero,<br>
	 * this is exit code of synchronous subprocess.
	 */
	public int synch_process_retcode() {
		try {
			return (int)BridJ.getNativeLibrary("process").getSymbolPointer("synch_process_retcode").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * If synch_process_death is zero,<br>
	 * this is exit code of synchronous subprocess.
	 */
	public ProcessLibrary synch_process_retcode(int synch_process_retcode) {
		try {
			{
				BridJ.getNativeLibrary("process").getSymbolPointer("synch_process_retcode").as(int.class).set(synch_process_retcode);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Nonzero means don't run process sentinels.  This is used<br>
	 * when exiting.
	 */
	public int inhibit_sentinels() {
		try {
			return (int)BridJ.getNativeLibrary("process").getSymbolPointer("inhibit_sentinels").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Nonzero means don't run process sentinels.  This is used<br>
	 * when exiting.
	 */
	public ProcessLibrary inhibit_sentinels(int inhibit_sentinels) {
		try {
			{
				BridJ.getNativeLibrary("process").getSymbolPointer("inhibit_sentinels").as(int.class).set(inhibit_sentinels);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface vectorlike_header {
		
	};
}
