package emacs.fontset;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>fontset</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("fontset") 
@Runtime(CRuntime.class) 
public class FontsetLibrary {
	static {
		BridJ.register();
	}
	/// <i>native declaration : fontset.h:25</i>
	/// <i>native declaration : fontset.h:25</i>
	public static abstract class check_window_system_func_callback extends Callback<check_window_system_func_callback > {
		public abstract void apply();
	};
	/**
	 * Original signature : <code>void free_face_fontset(face*)</code><br>
	 * <i>native declaration : fontset.h:4</i>
	 */
	public static native void free_face_fontset(Pointer<FontsetLibrary.face > facePtr1);
	/**
	 * Original signature : <code>int face_for_char(face*, int, int)</code><br>
	 * <i>native declaration : fontset.h:6</i>
	 */
	public static native int face_for_char(Pointer<FontsetLibrary.face > facePtr1, int int1, int int2);
	/**
	 * Original signature : <code>Lisp_Object font_for_char(face*, int, int, Lisp_Object)</code><br>
	 * <i>native declaration : fontset.h:8</i>
	 */
	public static native FontsetLibrary.Lisp_Object font_for_char(Pointer<FontsetLibrary.face > facePtr1, int int1, int int2, FontsetLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int make_fontset_for_ascii_face(int, face*)</code><br>
	 * <i>native declaration : fontset.h:10</i>
	 */
	public static native int make_fontset_for_ascii_face(int int1, Pointer<FontsetLibrary.face > facePtr1);
	/**
	 * Original signature : <code>int fontset_from_font()</code><br>
	 * <i>native declaration : fontset.h:12</i>
	 */
	public static native int fontset_from_font();
	/**
	 * Original signature : <code>int fs_query_fontset(int)</code><br>
	 * <i>native declaration : fontset.h:14</i>
	 */
	public static native int fs_query_fontset(int int1);
	/**
	 * Original signature : <code>Lisp_Object list_fontsets(frame*, Lisp_Object, int)</code><br>
	 * <i>native declaration : fontset.h:16</i>
	 */
	public static native FontsetLibrary.Lisp_Object list_fontsets(Pointer<FontsetLibrary.frame > framePtr1, FontsetLibrary.Lisp_Object Lisp_Object1, int int1);
	/**
	 * Original signature : <code>Lisp_Object fontset_name(int)</code><br>
	 * <i>native declaration : fontset.h:19</i>
	 */
	public static native FontsetLibrary.Lisp_Object fontset_name(int int1);
	/**
	 * Original signature : <code>Lisp_Object fontset_ascii(int)</code><br>
	 * <i>native declaration : fontset.h:21</i>
	 */
	public static native FontsetLibrary.Lisp_Object fontset_ascii(int int1);
	/**
	 * Original signature : <code>int face_for_font(frame*, Lisp_Object, face*)</code><br>
	 * <i>native declaration : fontset.h:24</i>
	 */
	public static native int face_for_font(Pointer<FontsetLibrary.frame > framePtr1, FontsetLibrary.Lisp_Object Lisp_Object1, Pointer<FontsetLibrary.face > facePtr1);
	/**
	 * Check if any window system is used now.<br>
	 * C type : check_window_system_func_callback
	 */
	public Pointer<FontsetLibrary.check_window_system_func_callback > check_window_system_func() {
		try {
			return (Pointer<FontsetLibrary.check_window_system_func_callback >)BridJ.getNativeLibrary("fontset").getSymbolPointer("check_window_system_func").as(DefaultParameterizedType.paramType(Pointer.class, FontsetLibrary.check_window_system_func_callback.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Check if any window system is used now.<br>
	 * C type : check_window_system_func_callback
	 */
	public FontsetLibrary check_window_system_func(Pointer<FontsetLibrary.check_window_system_func_callback > check_window_system_func) {
		try {
			{
				BridJ.getNativeLibrary("fontset").getSymbolPointer("check_window_system_func").as(DefaultParameterizedType.paramType(Pointer.class, FontsetLibrary.check_window_system_func_callback.class)).set(check_window_system_func);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface face {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface frame {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
}
