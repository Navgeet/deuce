package emacs.dispextern;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>dispextern</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("dispextern") 
@Runtime(CRuntime.class) 
public class DispexternLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:26</i>
	 */
	public enum window_part implements IntValuedEnum<window_part > {
		ON_NOTHING(0),
		ON_TEXT(1),
		ON_MODE_LINE(2),
		ON_VERTICAL_BORDER(3),
		ON_HEADER_LINE(4),
		ON_LEFT_FRINGE(5),
		ON_RIGHT_FRINGE(6),
		ON_LEFT_MARGIN(7),
		ON_RIGHT_MARGIN(8),
		ON_SCROLL_BAR(9);
		window_part(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<window_part > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<window_part > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:67</i>
	 */
	public enum glyph_type implements IntValuedEnum<glyph_type > {
		/// Glyph describes a character.
		CHAR_GLYPH(0),
		/// Glyph describes a static composition.
		COMPOSITE_GLYPH(1),
		/// Glyph describes a glyphless character.
		GLYPHLESS_GLYPH(2),
		/// Glyph describes an image.
		IMAGE_GLYPH(3),
		/// Glyph is a space of fractional width and/or height.
		STRETCH_GLYPH(4);
		glyph_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<glyph_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<glyph_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:337</i>
	 */
	public enum glyph_row_area implements IntValuedEnum<glyph_row_area > {
		LEFT_MARGIN_AREA(0),
		TEXT_AREA(1),
		RIGHT_MARGIN_AREA(2),
		LAST_AREA(3);
		glyph_row_area(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<glyph_row_area > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<glyph_row_area > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:607</i>
	 */
	public enum draw_glyphs_face implements IntValuedEnum<draw_glyphs_face > {
		DRAW_NORMAL_TEXT(0),
		DRAW_INVERSE_VIDEO(1),
		DRAW_CURSOR(2),
		DRAW_MOUSE_FACE(3),
		DRAW_IMAGE_RAISED(4),
		DRAW_IMAGE_SUNKEN(5);
		draw_glyphs_face(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<draw_glyphs_face > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<draw_glyphs_face > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:627</i>
	 */
	public enum lface_attribute_index implements IntValuedEnum<lface_attribute_index > {
		LFACE_FAMILY_INDEX(1),
		LFACE_FOUNDRY_INDEX(2),
		LFACE_SWIDTH_INDEX(3),
		LFACE_HEIGHT_INDEX(4),
		LFACE_WEIGHT_INDEX(5),
		LFACE_SLANT_INDEX(6),
		LFACE_UNDERLINE_INDEX(7),
		LFACE_INVERSE_INDEX(8),
		LFACE_FOREGROUND_INDEX(9),
		LFACE_BACKGROUND_INDEX(10),
		LFACE_STIPPLE_INDEX(11),
		LFACE_OVERLINE_INDEX(12),
		LFACE_STRIKE_THROUGH_INDEX(13),
		LFACE_BOX_INDEX(14),
		LFACE_FONT_INDEX(15),
		LFACE_INHERIT_INDEX(16),
		LFACE_FONTSET_INDEX(17),
		LFACE_VECTOR_SIZE(18);
		lface_attribute_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<lface_attribute_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<lface_attribute_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:642</i>
	 */
	public enum face_box_type implements IntValuedEnum<face_box_type > {
		/// No box around text.
		FACE_NO_BOX(0),
		/**
		 * Simple box of specified width and color.  Default width is 1, and<br>
		 * default color is the foreground color of the face.
		 */
		FACE_SIMPLE_BOX(1),
		/**
		 * Boxes with 3D shadows.  Color equals the background color of the<br>
		 * face.  Width is specified.
		 */
		FACE_RAISED_BOX(2),
		FACE_SUNKEN_BOX(3);
		face_box_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<face_box_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<face_box_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:782</i>
	 */
	public enum face_id implements IntValuedEnum<face_id > {
		DEFAULT_FACE_ID(0),
		MODE_LINE_FACE_ID(1),
		MODE_LINE_INACTIVE_FACE_ID(2),
		TOOL_BAR_FACE_ID(3),
		FRINGE_FACE_ID(4),
		HEADER_LINE_FACE_ID(5),
		SCROLL_BAR_FACE_ID(6),
		BORDER_FACE_ID(7),
		CURSOR_FACE_ID(8),
		MOUSE_FACE_ID(9),
		MENU_FACE_ID(10),
		VERTICAL_BORDER_FACE_ID(11),
		BASIC_FACE_ID_SENTINEL(12);
		face_id(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<face_id > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<face_id > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:830</i>
	 */
	public enum bidi_type_t implements IntValuedEnum<bidi_type_t > {
		UNKNOWN_BT(0),
		STRONG_L(1),
		STRONG_R(2),
		WEAK_EN(3),
		WEAK_AN(4),
		WEAK_BN(5),
		NEUTRAL_B(6),
		STRONG_AL(7),
		LRE(8),
		LRO(9),
		RLE(10),
		RLO(11),
		PDF(12),
		WEAK_ES(13),
		WEAK_ET(14),
		WEAK_CS(15),
		WEAK_NSM(16),
		NEUTRAL_S(17),
		NEUTRAL_WS(18),
		/// other neutrals
		NEUTRAL_ON(19);
		bidi_type_t(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<bidi_type_t > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<bidi_type_t > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:836</i>
	 */
	public enum bidi_dir_t implements IntValuedEnum<bidi_dir_t > {
		NEUTRAL_DIR(0),
		L2R(1),
		R2L(2);
		bidi_dir_t(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<bidi_dir_t > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<bidi_dir_t > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:960</i>
	 */
	public enum display_element_type implements IntValuedEnum<display_element_type > {
		/// A normal character.
		IT_CHARACTER(0),
		/// A composition (static and automatic).
		IT_COMPOSITION(1),
		/// A glyphless character (e.g. ZWNJ, LRE).
		IT_GLYPHLESS(2),
		/// An image.
		IT_IMAGE(3),
		/// A flexible width and height space.
		IT_STRETCH(4),
		/// End of buffer or string.
		IT_EOB(5),
		/**
		 * Truncation glyphs.  Never returned by get_next_display_element.<br>
		 * Used to get display information about truncation glyphs via<br>
		 * produce_glyphs.
		 */
		IT_TRUNCATION(6),
		/// Continuation glyphs.  See the comment for IT_TRUNCATION.
		IT_CONTINUATION(7);
		display_element_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<display_element_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<display_element_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:971</i>
	 */
	public enum prop_idx implements IntValuedEnum<prop_idx > {
		FONTIFIED_PROP_IDX(0),
		FACE_PROP_IDX(1),
		INVISIBLE_PROP_IDX(2),
		DISPLAY_PROP_IDX(3),
		COMPOSITION_PROP_IDX(4),
		/// Not a property.  Used to indicate changes in overlays.
		OVERLAY_PROP_IDX(5),
		/// Sentinel.
		LAST_PROP_IDX(6);
		prop_idx(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<prop_idx > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<prop_idx > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:976</i>
	 */
	public enum line_wrap_method implements IntValuedEnum<line_wrap_method > {
		TRUNCATE(0),
		WORD_WRAP(1),
		WINDOW_WRAP(2);
		line_wrap_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<line_wrap_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<line_wrap_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:989</i>
	 */
	public enum glyphless_display_method implements IntValuedEnum<glyphless_display_method > {
		/**
		 * Display a thin (1-pixel width) space.  On a TTY, display a<br>
		 * 1-character width space.
		 */
		GLYPHLESS_DISPLAY_THIN_SPACE(0),
		/// Display an empty box of proper width.
		GLYPHLESS_DISPLAY_EMPTY_BOX(1),
		/// Display an acronym string in a box.
		GLYPHLESS_DISPLAY_ACRONYM(2),
		/// Display the hexadecimal code of the character in a box.
		GLYPHLESS_DISPLAY_HEX_CODE(3);
		glyphless_display_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<glyphless_display_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<glyphless_display_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:1004</i>
	 */
	public enum it_method implements IntValuedEnum<it_method > {
		GET_FROM_BUFFER(0),
		GET_FROM_DISPLAY_VECTOR(1),
		GET_FROM_STRING(2),
		GET_FROM_C_STRING(3),
		GET_FROM_IMAGE(4),
		GET_FROM_STRETCH(5),
		NUM_IT_METHODS(6);
		it_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<it_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<it_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:1585</i>
	 */
	public enum move_operation_enum implements IntValuedEnum<move_operation_enum > {
		/// Stop if specified x-position is reached.
		MOVE_TO_X(1),
		/// Stop if specified y-position is reached.
		MOVE_TO_Y(2),
		/// Stop if specified vpos is reached.
		MOVE_TO_VPOS(4),
		/// Stop if specified buffer or string position is reached.
		MOVE_TO_POS(8);
		move_operation_enum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<move_operation_enum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<move_operation_enum > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:1725</i>
	 */
	public enum tool_bar_item_idx implements IntValuedEnum<tool_bar_item_idx > {
		/**
		 * The key of the tool-bar item.  Used to remove items when a binding<br>
		 * for `undefined' is found.
		 */
		TOOL_BAR_ITEM_KEY(0),
		/// Non-nil if item is enabled.
		TOOL_BAR_ITEM_ENABLED_P(1),
		/// Non-nil if item is selected (pressed).
		TOOL_BAR_ITEM_SELECTED_P(2),
		/// Caption.
		TOOL_BAR_ITEM_CAPTION(3),
		/**
		 * Image(s) to display.  This is either a single image specification<br>
		 * or a vector of specifications.
		 */
		TOOL_BAR_ITEM_IMAGES(4),
		/// The binding.
		TOOL_BAR_ITEM_BINDING(5),
		/**
		 * Button type.  One of nil (default button), t (a separator),<br>
		 * `:radio', or `:toggle'.  The latter two currently do nothing.
		 */
		TOOL_BAR_ITEM_TYPE(6),
		/// Help string.
		TOOL_BAR_ITEM_HELP(7),
		/// Icon file name of right to left image when an RTL locale is used.
		TOOL_BAR_ITEM_RTL_IMAGE(8),
		/// Label to show when text labels are enabled.
		TOOL_BAR_ITEM_LABEL(9),
		/// If we shall show the label only below the icon and not beside it.
		TOOL_BAR_ITEM_VERT_ONLY(10),
		/**
		 * Sentinel = number of slots in tool_bar_items occupied by one<br>
		 * tool-bar item.
		 */
		TOOL_BAR_ITEM_NSLOTS(11);
		tool_bar_item_idx(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<tool_bar_item_idx > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<tool_bar_item_idx > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:1731</i>
	 */
	public enum tool_bar_item_image implements IntValuedEnum<tool_bar_item_image > {
		TOOL_BAR_IMAGE_ENABLED_SELECTED(0),
		TOOL_BAR_IMAGE_ENABLED_DESELECTED(1),
		TOOL_BAR_IMAGE_DISABLED_SELECTED(2),
		TOOL_BAR_IMAGE_DISABLED_DESELECTED(3);
		tool_bar_item_image(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<tool_bar_item_image > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<tool_bar_item_image > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : dispextern.h</i>
	public static final int FACE_ID_BITS = (int)20;
	/// <i>native declaration : dispextern.h</i>
	public static final int TRY_WINDOW_IGNORE_FONTS_CHANGE = (int)(1 << 1);
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_ALT_CHARSET = (int)32;
	/// <i>native declaration : dispextern.h</i>
	public static final int MAX_FRINGE_BITMAPS = (int)(1 << 16);
	/// <i>native declaration : dispextern.h</i>
	public static final int FONT_TYPE_UNKNOWN = (int)0;
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_BOLD = (int)4;
	/// <i>native declaration : dispextern.h</i>
	public static final long FACE_TTY_DEFAULT_COLOR = (long)(-1);
	/// <i>native declaration : dispextern.h</i>
	public static final long FACE_TTY_DEFAULT_BG_COLOR = (long)(-3);
	/// <i>native declaration : dispextern.h</i>
	public static final int XASSERTS = (int)0;
	/// <i>native declaration : dispextern.h</i>
	public static final int TRY_WINDOW_CHECK_MARGINS = (int)(1 << 0);
	/// <i>native declaration : dispextern.h</i>
	public static final int IT_STACK_SIZE = (int)5;
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_DIM = (int)8;
	/// <i>native declaration : dispextern.h</i>
	public static final int BIDI_MAXLEVEL = (int)64;
	/// <i>native declaration : dispextern.h</i>
	public static final int MAX_FACE_ID = (int)((1 << 20) - 1);
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_UNDERLINE = (int)2;
	/// <i>native declaration : dispextern.h</i>
	public static final int OVERLAY_STRING_CHUNK_SIZE = (int)16;
	/// <i>native declaration : dispextern.h</i>
	public static final int No_Cursor = (int)(0);
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_BLINK = (int)16;
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_INVERSE = (int)1;
	/// <i>native declaration : dispextern.h</i>
	public static final int DEFAULT_TOOL_BAR_LABEL_SIZE = (int)14;
	/// <i>native declaration : dispextern.h</i>
	public static final int DEFAULT_TOOL_BAR_BUTTON_MARGIN = (int)4;
	/// <i>native declaration : dispextern.h</i>
	public static final int DEFAULT_TOOL_BAR_IMAGE_HEIGHT = (int)24;
	/// <i>native declaration : dispextern.h</i>
	public static final int FRINGE_HEIGHT_BITS = (int)8;
	/// <i>native declaration : dispextern.h</i>
	public static final int FRINGE_ID_BITS = (int)16;
	/// <i>native declaration : dispextern.h</i>
	public static final int DEFAULT_TOOL_BAR_BUTTON_RELIEF = (int)1;
	/// <i>native declaration : dispextern.h</i>
	public static final int GLYPH_DEBUG = (int)0;
	/// <i>native declaration : dispextern.h</i>
	public static final long FACE_TTY_DEFAULT_FG_COLOR = (long)(-2);
	/// <i>native declaration : dispextern.h:1600</i>
	/// <i>native declaration : dispextern.h:1600</i>
	public static abstract class frame_parm_handler extends Callback<frame_parm_handler > {
		public abstract void apply(Pointer<DispexternLibrary.frame > framePtr1, DispexternLibrary.Lisp_Object Lisp_Object1);
	};
	/**
	 * Original signature : <code>void bidi_init_it(int, bidi_it*)</code><br>
	 * <i>native declaration : dispextern.h:1733</i>
	 */
	public static native void bidi_init_it(int int1, Pointer<bidi_it > bidi_itPtr1);
	/**
	 * Original signature : <code>void bidi_move_to_visually_next(bidi_it*)</code><br>
	 * <i>native declaration : dispextern.h:1735</i>
	 */
	public static native void bidi_move_to_visually_next(Pointer<bidi_it > bidi_itPtr1);
	/**
	 * Original signature : <code>void bidi_paragraph_init(bidi_dir_t, bidi_it*, int)</code><br>
	 * <i>native declaration : dispextern.h:1737</i>
	 */
	public static native void bidi_paragraph_init(IntValuedEnum<DispexternLibrary.bidi_dir_t > bidi_dir_t1, Pointer<bidi_it > bidi_itPtr1, int int1);
	/**
	 * Original signature : <code>int bidi_mirror_char(int)</code><br>
	 * <i>native declaration : dispextern.h:1739</i>
	 */
	public static native int bidi_mirror_char(int int1);
	/**
	 * Original signature : <code>void bidi_push_it(bidi_it*)</code><br>
	 * <i>native declaration : dispextern.h:1741</i>
	 */
	public static native void bidi_push_it(Pointer<bidi_it > bidi_itPtr1);
	/**
	 * Original signature : <code>void bidi_pop_it(bidi_it*)</code><br>
	 * <i>native declaration : dispextern.h:1743</i>
	 */
	public static native void bidi_pop_it(Pointer<bidi_it > bidi_itPtr1);
	/**
	 * Original signature : <code>void* bidi_shelve_cache()</code><br>
	 * <i>native declaration : dispextern.h:1745</i>
	 */
	public static native Pointer<? > bidi_shelve_cache();
	/**
	 * Original signature : <code>void bidi_unshelve_cache(void*, int)</code><br>
	 * <i>native declaration : dispextern.h:1747</i>
	 */
	public static native void bidi_unshelve_cache(Pointer<? > voidPtr1, int int1);
	/**
	 * Original signature : <code>glyph_row* row_containing_pos(window*, glyph_row*, glyph_row*, int)</code><br>
	 * <i>native declaration : dispextern.h:1749</i>
	 */
	public static native Pointer<glyph_row > row_containing_pos(Pointer<DispexternLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, Pointer<glyph_row > glyph_rowPtr2, int int1);
	/**
	 * Original signature : <code>int line_bottom_y(it*)</code><br>
	 * <i>native declaration : dispextern.h:1751</i>
	 */
	public static native int line_bottom_y(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>int display_prop_intangible_p(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1753</i>
	 */
	public static native int display_prop_intangible_p(DispexternLibrary.Lisp_Object Lisp_Object1, DispexternLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void resize_echo_area_exactly()</code><br>
	 * <i>native declaration : dispextern.h:1755</i>
	 */
	public static native void resize_echo_area_exactly();
	/**
	 * Original signature : <code>int resize_mini_window(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1757</i>
	 */
	public static native int resize_mini_window(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int try_window(Lisp_Object, text_pos, int)</code><br>
	 * <i>native declaration : dispextern.h:1759</i>
	 */
	public static native int try_window(DispexternLibrary.Lisp_Object Lisp_Object1, text_pos text_pos1, int int1);
	/**
	 * Original signature : <code>void window_box(window*, int, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1761</i>
	 */
	public static native void window_box(Pointer<DispexternLibrary.window > windowPtr1, int int1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4);
	/**
	 * Original signature : <code>int window_box_height(window*)</code><br>
	 * <i>native declaration : dispextern.h:1763</i>
	 */
	public static native int window_box_height(Pointer<DispexternLibrary.window > windowPtr1);
	/**
	 * Original signature : <code>int window_text_bottom_y(window*)</code><br>
	 * <i>native declaration : dispextern.h:1765</i>
	 */
	public static native int window_text_bottom_y(Pointer<DispexternLibrary.window > windowPtr1);
	/**
	 * Original signature : <code>int window_box_width(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1767</i>
	 */
	public static native int window_box_width(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int window_box_left(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1769</i>
	 */
	public static native int window_box_left(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int window_box_left_offset(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1771</i>
	 */
	public static native int window_box_left_offset(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int window_box_right(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1773</i>
	 */
	public static native int window_box_right(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int window_box_right_offset(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1775</i>
	 */
	public static native int window_box_right_offset(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int estimate_mode_line_height(frame*, face_id)</code><br>
	 * <i>native declaration : dispextern.h:1777</i>
	 */
	public static native int estimate_mode_line_height(Pointer<DispexternLibrary.frame > framePtr1, IntValuedEnum<DispexternLibrary.face_id > arg1);
	/**
	 * Original signature : <code>void pixel_to_glyph_coords(frame*, int, int, int*, int*, int*, int)</code><br>
	 * <i>native declaration : dispextern.h:1779</i>
	 */
	public static native void pixel_to_glyph_coords(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > intPtr3, int int3);
	/**
	 * Original signature : <code>void remember_mouse_glyph(frame*, int, int, int*)</code><br>
	 * <i>native declaration : dispextern.h:1781</i>
	 */
	public static native void remember_mouse_glyph(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2, Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>void mark_window_display_accurate(Lisp_Object, int)</code><br>
	 * <i>native declaration : dispextern.h:1783</i>
	 */
	public static native void mark_window_display_accurate(DispexternLibrary.Lisp_Object Lisp_Object1, int int1);
	/**
	 * Original signature : <code>void redisplay_preserve_echo_area(int)</code><br>
	 * <i>native declaration : dispextern.h:1785</i>
	 */
	public static native void redisplay_preserve_echo_area(int int1);
	/**
	 * Original signature : <code>void init_iterator(it*, window*, glyph_row*, face_id)</code><br>
	 * <i>native declaration : dispextern.h:1787</i>
	 */
	public static native void init_iterator(Pointer<it > itPtr1, Pointer<DispexternLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, IntValuedEnum<DispexternLibrary.face_id > arg1);
	/**
	 * Original signature : <code>void init_iterator_to_row_start(it*, window*, glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1789</i>
	 */
	public static native void init_iterator_to_row_start(Pointer<it > itPtr1, Pointer<DispexternLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>void start_display(it*, window*, text_pos)</code><br>
	 * <i>native declaration : dispextern.h:1791</i>
	 */
	public static native void start_display(Pointer<it > itPtr1, Pointer<DispexternLibrary.window > windowPtr1, text_pos text_pos1);
	/**
	 * Original signature : <code>void move_it_to(it*, int, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1793</i>
	 */
	public static native void move_it_to(Pointer<it > itPtr1, int int1, int int2, int int3, int int4);
	/**
	 * Original signature : <code>void move_it_vertically(it*, int)</code><br>
	 * <i>native declaration : dispextern.h:1795</i>
	 */
	public static native void move_it_vertically(Pointer<it > itPtr1, int int1);
	/**
	 * Original signature : <code>void move_it_vertically_backward(it*, int)</code><br>
	 * <i>native declaration : dispextern.h:1797</i>
	 */
	public static native void move_it_vertically_backward(Pointer<it > itPtr1, int int1);
	/**
	 * Original signature : <code>void move_it_by_lines(it*, int)</code><br>
	 * <i>native declaration : dispextern.h:1799</i>
	 */
	public static native void move_it_by_lines(Pointer<it > itPtr1, int int1);
	/**
	 * Original signature : <code>void move_it_past_eol(it*)</code><br>
	 * <i>native declaration : dispextern.h:1801</i>
	 */
	public static native void move_it_past_eol(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>void move_it_in_display_line(it*, EMACS_INT, int, move_operation_enum)</code><br>
	 * <i>native declaration : dispextern.h:1803</i>
	 */
	public static native void move_it_in_display_line(Pointer<it > it, DispexternLibrary.EMACS_INT to_charpos, int to_x, IntValuedEnum<DispexternLibrary.move_operation_enum > op);
	/**
	 * Original signature : <code>int in_display_vector_p(it*)</code><br>
	 * <i>native declaration : dispextern.h:1805</i>
	 */
	public static native int in_display_vector_p(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>int frame_mode_line_height(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1807</i>
	 */
	public static native int frame_mode_line_height(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void reseat_at_previous_visible_line_start(it*)</code><br>
	 * <i>native declaration : dispextern.h:1821</i>
	 */
	public static native void reseat_at_previous_visible_line_start(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>Lisp_Object lookup_glyphless_char_display(int, it*)</code><br>
	 * <i>native declaration : dispextern.h:1823</i>
	 */
	public static native DispexternLibrary.Lisp_Object lookup_glyphless_char_display(int int1, Pointer<it > itPtr1);
	/**
	 * Original signature : <code>EMACS_INT compute_display_string_pos(text_pos*, bidi_string_data*, int, int*)</code><br>
	 * <i>native declaration : dispextern.h:1825</i>
	 */
	public static native DispexternLibrary.EMACS_INT compute_display_string_pos(Pointer<text_pos > text_posPtr1, Pointer<bidi_string_data > bidi_string_dataPtr1, int int1, Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>EMACS_INT compute_display_string_end(EMACS_INT, bidi_string_data*)</code><br>
	 * <i>native declaration : dispextern.h:1827</i>
	 */
	public static native DispexternLibrary.EMACS_INT compute_display_string_end(DispexternLibrary.EMACS_INT EMACS_INT1, Pointer<bidi_string_data > bidi_string_dataPtr1);
	/**
	 * Original signature : <code>void produce_stretch_glyph(it*)</code><br>
	 * <i>native declaration : dispextern.h:1829</i>
	 */
	public static native void produce_stretch_glyph(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>void note_mouse_highlight(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1831</i>
	 */
	public static native void note_mouse_highlight(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void x_clear_window_mouse_face(window*)</code><br>
	 * <i>native declaration : dispextern.h:1833</i>
	 */
	public static native void x_clear_window_mouse_face(Pointer<DispexternLibrary.window > windowPtr1);
	/**
	 * Original signature : <code>void cancel_mouse_face(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1835</i>
	 */
	public static native void cancel_mouse_face(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int clear_mouse_face(Mouse_HLInfo*)</code><br>
	 * <i>native declaration : dispextern.h:1837</i>
	 */
	public static native int clear_mouse_face(Pointer<DispexternLibrary.Mouse_HLInfo > Mouse_HLInfoPtr1);
	/**
	 * Original signature : <code>int cursor_in_mouse_face_p(window*)</code><br>
	 * <i>native declaration : dispextern.h:1839</i>
	 */
	public static native int cursor_in_mouse_face_p(Pointer<DispexternLibrary.window > w);
	/**
	 * Original signature : <code>void tty_draw_row_with_mouse_face(window*, glyph_row*, int, int, draw_glyphs_face)</code><br>
	 * <i>native declaration : dispextern.h:1841</i>
	 */
	public static native void tty_draw_row_with_mouse_face(Pointer<DispexternLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, int int1, int int2, IntValuedEnum<DispexternLibrary.draw_glyphs_face > arg1);
	/**
	 * Original signature : <code>int lookup_fringe_bitmap(Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1843</i>
	 */
	public static native int lookup_fringe_bitmap(DispexternLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void draw_fringe_bitmap(window*, glyph_row*, int)</code><br>
	 * <i>native declaration : dispextern.h:1845</i>
	 */
	public static native void draw_fringe_bitmap(Pointer<DispexternLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, int int1);
	/**
	 * Original signature : <code>void draw_row_fringe_bitmaps(window*, glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1847</i>
	 */
	public static native void draw_row_fringe_bitmaps(Pointer<DispexternLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>int draw_window_fringes(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1849</i>
	 */
	public static native int draw_window_fringes(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int update_window_fringes(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1851</i>
	 */
	public static native int update_window_fringes(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>void compute_fringe_widths(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1853</i>
	 */
	public static native void compute_fringe_widths(Pointer<DispexternLibrary.frame > framePtr1, int int1);
	/**
	 * Original signature : <code>int row_hash(glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1855</i>
	 */
	public static native int row_hash(Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>void get_tty_size(int, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1857</i>
	 */
	public static native void get_tty_size(int int1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2);
	/**
	 * Original signature : <code>void request_sigio()</code><br>
	 * <i>native declaration : dispextern.h:1859</i>
	 */
	public static native void request_sigio();
	/**
	 * Original signature : <code>void unrequest_sigio()</code><br>
	 * <i>native declaration : dispextern.h:1861</i>
	 */
	public static native void unrequest_sigio();
	/**
	 * Original signature : <code>int tabs_safe_p(int)</code><br>
	 * <i>native declaration : dispextern.h:1863</i>
	 */
	public static native int tabs_safe_p(int int1);
	/**
	 * Original signature : <code>void init_baud_rate(int)</code><br>
	 * <i>native declaration : dispextern.h:1865</i>
	 */
	public static native void init_baud_rate(int int1);
	/**
	 * Original signature : <code>void init_sigio(int)</code><br>
	 * <i>native declaration : dispextern.h:1867</i>
	 */
	public static native void init_sigio(int int1);
	/**
	 * Original signature : <code>void update_face_from_frame_parameter(frame*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1869</i>
	 */
	public static native void update_face_from_frame_parameter(Pointer<DispexternLibrary.frame > framePtr1, DispexternLibrary.Lisp_Object Lisp_Object1, DispexternLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object tty_color_name(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1871</i>
	 */
	public static native DispexternLibrary.Lisp_Object tty_color_name(Pointer<DispexternLibrary.frame > framePtr1, int int1);
	/**
	 * Original signature : <code>void clear_face_cache(int)</code><br>
	 * <i>native declaration : dispextern.h:1873</i>
	 */
	public static native void clear_face_cache(int int1);
	/**
	 * Original signature : <code>long load_color(frame*, face*, Lisp_Object, lface_attribute_index)</code><br>
	 * <i>native declaration : dispextern.h:1875</i>
	 */
	@CLong 
	public static native long load_color(Pointer<DispexternLibrary.frame > framePtr1, Pointer<face > facePtr1, DispexternLibrary.Lisp_Object Lisp_Object1, IntValuedEnum<DispexternLibrary.lface_attribute_index > arg1);
	/**
	 * Original signature : <code>void unload_color(frame*, unsigned long)</code><br>
	 * <i>native declaration : dispextern.h:1877</i>
	 */
	public static native void unload_color(Pointer<DispexternLibrary.frame > framePtr1, @CLong long u1);
	/**
	 * Original signature : <code>char* choose_face_font(frame*, Lisp_Object*, Lisp_Object, int*)</code><br>
	 * <i>native declaration : dispextern.h:1879</i>
	 */
	public static native Pointer<Byte > choose_face_font(Pointer<DispexternLibrary.frame > framePtr1, Pointer<DispexternLibrary.Lisp_Object > Lisp_ObjectPtr1, DispexternLibrary.Lisp_Object Lisp_Object1, Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>void prepare_face_for_display(frame*, face*)</code><br>
	 * <i>native declaration : dispextern.h:1881</i>
	 */
	public static native void prepare_face_for_display(Pointer<DispexternLibrary.frame > framePtr1, Pointer<face > facePtr1);
	/**
	 * Original signature : <code>int xstrcasecmp(const char*, const char*)</code><br>
	 * <i>native declaration : dispextern.h:1883</i>
	 */
	public static native int xstrcasecmp(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	/**
	 * Original signature : <code>int lookup_named_face(frame*, Lisp_Object, int)</code><br>
	 * <i>native declaration : dispextern.h:1885</i>
	 */
	public static native int lookup_named_face(Pointer<DispexternLibrary.frame > framePtr1, DispexternLibrary.Lisp_Object Lisp_Object1, int int1);
	/**
	 * Original signature : <code>int lookup_basic_face(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1887</i>
	 */
	public static native int lookup_basic_face(Pointer<DispexternLibrary.frame > framePtr1, int int1);
	/**
	 * Original signature : <code>int smaller_face(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1889</i>
	 */
	public static native int smaller_face(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>int face_with_height(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1891</i>
	 */
	public static native int face_with_height(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>int lookup_derived_face(frame*, Lisp_Object, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1893</i>
	 */
	public static native int lookup_derived_face(Pointer<DispexternLibrary.frame > framePtr1, DispexternLibrary.Lisp_Object Lisp_Object1, int int1, int int2);
	/**
	 * Original signature : <code>void init_frame_faces(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1895</i>
	 */
	public static native void init_frame_faces(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void free_frame_faces(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1897</i>
	 */
	public static native void free_frame_faces(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void recompute_basic_faces(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1899</i>
	 */
	public static native void recompute_basic_faces(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int face_at_buffer_position(window*, EMACS_INT, EMACS_INT, EMACS_INT, EMACS_INT*, EMACS_INT, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1901</i>
	 */
	public static native int face_at_buffer_position(Pointer<DispexternLibrary.window > w, DispexternLibrary.EMACS_INT pos, DispexternLibrary.EMACS_INT region_beg, DispexternLibrary.EMACS_INT region_end, Pointer<DispexternLibrary.EMACS_INT > endptr, DispexternLibrary.EMACS_INT limit, int mouse, int base_face_id);
	/**
	 * Original signature : <code>int face_for_overlay_string(window*, EMACS_INT, EMACS_INT, EMACS_INT, EMACS_INT*, EMACS_INT, int, Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1903</i>
	 */
	public static native int face_for_overlay_string(Pointer<DispexternLibrary.window > w, DispexternLibrary.EMACS_INT pos, DispexternLibrary.EMACS_INT region_beg, DispexternLibrary.EMACS_INT region_end, Pointer<DispexternLibrary.EMACS_INT > endptr, DispexternLibrary.EMACS_INT limit, int mouse, DispexternLibrary.Lisp_Object overlay);
	/**
	 * Original signature : <code>int face_at_string_position(window*, Lisp_Object, EMACS_INT, EMACS_INT, EMACS_INT, EMACS_INT, EMACS_INT*, face_id, int)</code><br>
	 * <i>native declaration : dispextern.h:1905</i>
	 */
	public static native int face_at_string_position(Pointer<DispexternLibrary.window > w, DispexternLibrary.Lisp_Object string, DispexternLibrary.EMACS_INT pos, DispexternLibrary.EMACS_INT bufpos, DispexternLibrary.EMACS_INT region_beg, DispexternLibrary.EMACS_INT region_end, Pointer<DispexternLibrary.EMACS_INT > endptr, IntValuedEnum<DispexternLibrary.face_id > arg1, int mouse);
	/**
	 * Original signature : <code>int merge_faces(frame*, Lisp_Object, EMACS_INT, int)</code><br>
	 * <i>native declaration : dispextern.h:1907</i>
	 */
	public static native int merge_faces(Pointer<DispexternLibrary.frame > framePtr1, DispexternLibrary.Lisp_Object Lisp_Object1, DispexternLibrary.EMACS_INT EMACS_INT1, int int1);
	/**
	 * Original signature : <code>int compute_char_face(frame*, int, Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1909</i>
	 */
	public static native int compute_char_face(Pointer<DispexternLibrary.frame > framePtr1, int int1, DispexternLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void free_all_realized_faces(Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1911</i>
	 */
	public static native void free_all_realized_faces(DispexternLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int popup_activated()</code><br>
	 * <i>native declaration : dispextern.h:1917</i>
	 */
	public static native int popup_activated();
	/**
	 * Original signature : <code>Lisp_Object buffer_posn_from_coords(window*, int*, int*, display_pos*, Lisp_Object*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1919</i>
	 */
	public static native DispexternLibrary.Lisp_Object buffer_posn_from_coords(Pointer<DispexternLibrary.window > windowPtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<display_pos > display_posPtr1, Pointer<DispexternLibrary.Lisp_Object > Lisp_ObjectPtr1, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4, Pointer<Integer > intPtr5, Pointer<Integer > intPtr6);
	/**
	 * Original signature : <code>Lisp_Object mode_line_string(window*, window_part, int*, int*, EMACS_INT*, Lisp_Object*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1921</i>
	 */
	public static native DispexternLibrary.Lisp_Object mode_line_string(Pointer<DispexternLibrary.window > windowPtr1, IntValuedEnum<DispexternLibrary.window_part > arg1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<DispexternLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<DispexternLibrary.Lisp_Object > Lisp_ObjectPtr1, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4, Pointer<Integer > intPtr5, Pointer<Integer > intPtr6);
	/**
	 * Original signature : <code>Lisp_Object marginal_area_string(window*, window_part, int*, int*, EMACS_INT*, Lisp_Object*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1923</i>
	 */
	public static native DispexternLibrary.Lisp_Object marginal_area_string(Pointer<DispexternLibrary.window > windowPtr1, IntValuedEnum<DispexternLibrary.window_part > arg1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<DispexternLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<DispexternLibrary.Lisp_Object > Lisp_ObjectPtr1, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4, Pointer<Integer > intPtr5, Pointer<Integer > intPtr6);
	/**
	 * Original signature : <code>void redraw_frame(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1925</i>
	 */
	public static native void redraw_frame(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void cancel_line(int, frame*)</code><br>
	 * <i>native declaration : dispextern.h:1927</i>
	 */
	public static native void cancel_line(int int1, Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void init_desired_glyphs(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1929</i>
	 */
	public static native void init_desired_glyphs(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int update_frame(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1931</i>
	 */
	public static native int update_frame(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void bitch_at_user()</code><br>
	 * <i>native declaration : dispextern.h:1933</i>
	 */
	public static native void bitch_at_user();
	/**
	 * Original signature : <code>void adjust_glyphs(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1935</i>
	 */
	public static native void adjust_glyphs(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void free_glyphs(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1937</i>
	 */
	public static native void free_glyphs(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void free_window_matrices(window*)</code><br>
	 * <i>native declaration : dispextern.h:1939</i>
	 */
	public static native void free_window_matrices(Pointer<DispexternLibrary.window > windowPtr1);
	/**
	 * Original signature : <code>void check_glyph_memory()</code><br>
	 * <i>native declaration : dispextern.h:1941</i>
	 */
	public static native void check_glyph_memory();
	/**
	 * Original signature : <code>void mirrored_line_dance(glyph_matrix*, int, int, int*, char*)</code><br>
	 * <i>native declaration : dispextern.h:1943</i>
	 */
	public static native void mirrored_line_dance(Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, Pointer<Integer > intPtr1, Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void clear_glyph_matrix(glyph_matrix*)</code><br>
	 * <i>native declaration : dispextern.h:1945</i>
	 */
	public static native void clear_glyph_matrix(Pointer<glyph_matrix > glyph_matrixPtr1);
	/**
	 * Original signature : <code>void clear_current_matrices(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1947</i>
	 */
	public static native void clear_current_matrices(Pointer<DispexternLibrary.frame > f);
	/**
	 * Original signature : <code>void clear_desired_matrices(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1949</i>
	 */
	public static native void clear_desired_matrices(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void shift_glyph_matrix(window*, glyph_matrix*, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1951</i>
	 */
	public static native void shift_glyph_matrix(Pointer<DispexternLibrary.window > windowPtr1, Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, int int3);
	/**
	 * Original signature : <code>void rotate_matrix(glyph_matrix*, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1953</i>
	 */
	public static native void rotate_matrix(Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, int int3);
	/**
	 * Original signature : <code>void increment_matrix_positions(glyph_matrix*, int, int, EMACS_INT, EMACS_INT)</code><br>
	 * <i>native declaration : dispextern.h:1955</i>
	 */
	public static native void increment_matrix_positions(Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, DispexternLibrary.EMACS_INT EMACS_INT1, DispexternLibrary.EMACS_INT EMACS_INT2);
	/**
	 * Original signature : <code>void blank_row(window*, glyph_row*, int)</code><br>
	 * <i>native declaration : dispextern.h:1957</i>
	 */
	public static native void blank_row(Pointer<DispexternLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, int int1);
	/**
	 * Original signature : <code>void enable_glyph_matrix_rows(glyph_matrix*, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1959</i>
	 */
	public static native void enable_glyph_matrix_rows(Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, int int3);
	/**
	 * Original signature : <code>void clear_glyph_row(glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1961</i>
	 */
	public static native void clear_glyph_row(Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>void prepare_desired_row(glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1963</i>
	 */
	public static native void prepare_desired_row(Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>void set_window_update_flags(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1965</i>
	 */
	public static native void set_window_update_flags(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>void update_single_window(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1967</i>
	 */
	public static native void update_single_window(Pointer<DispexternLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>void do_pending_window_change(int)</code><br>
	 * <i>native declaration : dispextern.h:1969</i>
	 */
	public static native void do_pending_window_change(int int1);
	/**
	 * Original signature : <code>void change_frame_size(frame*, int, int, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1971</i>
	 */
	public static native void change_frame_size(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2, int int3, int int4, int int5);
	/**
	 * Original signature : <code>void init_display()</code><br>
	 * <i>native declaration : dispextern.h:1973</i>
	 */
	public static native void init_display();
	/**
	 * Original signature : <code>void syms_of_display()</code><br>
	 * <i>native declaration : dispextern.h:1975</i>
	 */
	public static native void syms_of_display();
	/**
	 * Original signature : <code>void spec_glyph_lookup_face(window*, GLYPH*)</code><br>
	 * <i>native declaration : dispextern.h:1978</i>
	 */
	public static native void spec_glyph_lookup_face(Pointer<DispexternLibrary.window > windowPtr1, Pointer<DispexternLibrary.GLYPH > GLYPHPtr1);
	/**
	 * Original signature : <code>void ring_bell(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1980</i>
	 */
	public static native void ring_bell(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void update_begin(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1982</i>
	 */
	public static native void update_begin(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void update_end(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1984</i>
	 */
	public static native void update_end(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void set_terminal_window(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1986</i>
	 */
	public static native void set_terminal_window(Pointer<DispexternLibrary.frame > framePtr1, int int1);
	/**
	 * Original signature : <code>void cursor_to(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1988</i>
	 */
	public static native void cursor_to(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void raw_cursor_to(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1990</i>
	 */
	public static native void raw_cursor_to(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void clear_to_end(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1992</i>
	 */
	public static native void clear_to_end(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void clear_frame(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1994</i>
	 */
	public static native void clear_frame(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void clear_end_of_line(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1996</i>
	 */
	public static native void clear_end_of_line(Pointer<DispexternLibrary.frame > framePtr1, int int1);
	/**
	 * Original signature : <code>void write_glyphs(frame*, glyph*, int)</code><br>
	 * <i>native declaration : dispextern.h:1998</i>
	 */
	public static native void write_glyphs(Pointer<DispexternLibrary.frame > framePtr1, Pointer<glyph > glyphPtr1, int int1);
	/**
	 * Original signature : <code>void insert_glyphs(frame*, glyph*, int)</code><br>
	 * <i>native declaration : dispextern.h:2000</i>
	 */
	public static native void insert_glyphs(Pointer<DispexternLibrary.frame > framePtr1, Pointer<glyph > glyphPtr1, int int1);
	/**
	 * Original signature : <code>void delete_glyphs(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:2002</i>
	 */
	public static native void delete_glyphs(Pointer<DispexternLibrary.frame > framePtr1, int int1);
	/**
	 * Original signature : <code>void ins_del_lines(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:2004</i>
	 */
	public static native void ins_del_lines(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>terminal* init_initial_terminal()</code><br>
	 * <i>native declaration : dispextern.h:2006</i>
	 */
	public static native Pointer<DispexternLibrary.terminal > init_initial_terminal();
	/**
	 * Original signature : <code>void tty_turn_off_insert(tty_display_info*)</code><br>
	 * <i>native declaration : dispextern.h:2008</i>
	 */
	public static native void tty_turn_off_insert(Pointer<DispexternLibrary.tty_display_info > tty_display_infoPtr1);
	/**
	 * Original signature : <code>int string_cost(const char*)</code><br>
	 * <i>native declaration : dispextern.h:2010</i>
	 */
	public static native int string_cost(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>int per_line_cost(const char*)</code><br>
	 * <i>native declaration : dispextern.h:2012</i>
	 */
	public static native int per_line_cost(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void calculate_costs(frame*)</code><br>
	 * <i>native declaration : dispextern.h:2014</i>
	 */
	public static native void calculate_costs(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void produce_glyphs(it*)</code><br>
	 * <i>native declaration : dispextern.h:2016</i>
	 */
	public static native void produce_glyphs(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>void produce_special_glyphs(it*, display_element_type)</code><br>
	 * <i>native declaration : dispextern.h:2018</i>
	 */
	public static native void produce_special_glyphs(Pointer<it > itPtr1, IntValuedEnum<DispexternLibrary.display_element_type > arg1);
	/**
	 * Original signature : <code>int tty_capable_p(tty_display_info*, unsigned, unsigned long, unsigned long)</code><br>
	 * <i>native declaration : dispextern.h:2020</i>
	 */
	public static native int tty_capable_p(Pointer<DispexternLibrary.tty_display_info > tty_display_infoPtr1, int u1, @CLong long u2, @CLong long u3);
	/**
	 * Original signature : <code>void set_tty_color_mode(tty_display_info*, frame*)</code><br>
	 * <i>native declaration : dispextern.h:2022</i>
	 */
	public static native void set_tty_color_mode(Pointer<DispexternLibrary.tty_display_info > tty_display_infoPtr1, Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>terminal* get_named_tty(const char*)</code><br>
	 * <i>native declaration : dispextern.h:2024</i>
	 */
	public static native Pointer<DispexternLibrary.terminal > get_named_tty(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void create_tty_output(frame*)</code><br>
	 * <i>native declaration : dispextern.h:2026</i>
	 */
	public static native void create_tty_output(Pointer<DispexternLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>terminal* init_tty(const char*, const char*, int)</code><br>
	 * <i>native declaration : dispextern.h:2028</i>
	 */
	public static native Pointer<DispexternLibrary.terminal > init_tty(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, int int1);
	/**
	 * Original signature : <code>void tty_append_glyph(it*)</code><br>
	 * <i>native declaration : dispextern.h:2030</i>
	 */
	public static native void tty_append_glyph(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>int scrolling_max_lines_saved(int, int, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:2032</i>
	 */
	public static native int scrolling_max_lines_saved(int int1, int int2, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > intPtr3);
	/**
	 * Original signature : <code>void do_line_insertion_deletion_costs(frame*, const char*, const char*, const char*, const char*, const char*, const char*, int)</code><br>
	 * <i>native declaration : dispextern.h:2034</i>
	 */
	public static native void do_line_insertion_deletion_costs(Pointer<DispexternLibrary.frame > framePtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<Byte > charPtr3, Pointer<Byte > charPtr4, Pointer<Byte > charPtr5, Pointer<Byte > charPtr6, int int1);
	/**
	 * Original signature : <code>void scrolling_1(frame*, int, int, int, int*, int*, int*, int*, int)</code><br>
	 * <i>native declaration : dispextern.h:2036</i>
	 */
	public static native void scrolling_1(Pointer<DispexternLibrary.frame > framePtr1, int int1, int int2, int int3, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4, int int4);
	public int fonts_changed_p() {
		try {
			return (int)BridJ.getNativeLibrary("dispextern").getSymbolPointer("fonts_changed_p").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public DispexternLibrary fonts_changed_p(int fonts_changed_p) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("fonts_changed_p").as(int.class).set(fonts_changed_p);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern glyph
	public glyph space_glyph() {
		try {
			return (glyph)BridJ.getNativeLibrary("dispextern").getSymbolPointer("space_glyph").as(glyph.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern glyph
	public DispexternLibrary space_glyph(glyph space_glyph) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("space_glyph").as(glyph.class).set(space_glyph);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern window*
	public Pointer<DispexternLibrary.window > updated_window() {
		try {
			return (Pointer<DispexternLibrary.window >)BridJ.getNativeLibrary("dispextern").getSymbolPointer("updated_window").as(DefaultParameterizedType.paramType(Pointer.class, DispexternLibrary.window.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern window*
	public DispexternLibrary updated_window(Pointer<DispexternLibrary.window > updated_window) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("updated_window").as(DefaultParameterizedType.paramType(Pointer.class, DispexternLibrary.window.class)).set(updated_window);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern glyph_row*
	public Pointer<glyph_row > updated_row() {
		try {
			return (Pointer<glyph_row >)BridJ.getNativeLibrary("dispextern").getSymbolPointer("updated_row").as(DefaultParameterizedType.paramType(Pointer.class, glyph_row.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern glyph_row*
	public DispexternLibrary updated_row(Pointer<glyph_row > updated_row) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("updated_row").as(DefaultParameterizedType.paramType(Pointer.class, glyph_row.class)).set(updated_row);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int updated_area() {
		try {
			return (int)BridJ.getNativeLibrary("dispextern").getSymbolPointer("updated_area").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public DispexternLibrary updated_area(int updated_area) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("updated_area").as(int.class).set(updated_area);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int display_completed() {
		try {
			return (int)BridJ.getNativeLibrary("dispextern").getSymbolPointer("display_completed").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public DispexternLibrary display_completed(int display_completed) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("display_completed").as(int.class).set(display_completed);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int face_change_count() {
		try {
			return (int)BridJ.getNativeLibrary("dispextern").getSymbolPointer("face_change_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public DispexternLibrary face_change_count(int face_change_count) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("face_change_count").as(int.class).set(face_change_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int redisplaying_p() {
		try {
			return (int)BridJ.getNativeLibrary("dispextern").getSymbolPointer("redisplaying_p").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public DispexternLibrary redisplaying_p(int redisplaying_p) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("redisplaying_p").as(int.class).set(redisplaying_p);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int help_echo_showing_p() {
		try {
			return (int)BridJ.getNativeLibrary("dispextern").getSymbolPointer("help_echo_showing_p").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public DispexternLibrary help_echo_showing_p(int help_echo_showing_p) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("help_echo_showing_p").as(int.class).set(help_echo_showing_p);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int current_mode_line_height() {
		try {
			return (int)BridJ.getNativeLibrary("dispextern").getSymbolPointer("current_mode_line_height").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public DispexternLibrary current_mode_line_height(int current_mode_line_height) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("current_mode_line_height").as(int.class).set(current_mode_line_height);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int current_header_line_height() {
		try {
			return (int)BridJ.getNativeLibrary("dispextern").getSymbolPointer("current_header_line_height").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public DispexternLibrary current_header_line_height(int current_header_line_height) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("current_header_line_height").as(int.class).set(current_header_line_height);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern frame*
	public Pointer<DispexternLibrary.frame > last_mouse_frame() {
		try {
			return (Pointer<DispexternLibrary.frame >)BridJ.getNativeLibrary("dispextern").getSymbolPointer("last_mouse_frame").as(DefaultParameterizedType.paramType(Pointer.class, DispexternLibrary.frame.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern frame*
	public DispexternLibrary last_mouse_frame(Pointer<DispexternLibrary.frame > last_mouse_frame) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("last_mouse_frame").as(DefaultParameterizedType.paramType(Pointer.class, DispexternLibrary.frame.class)).set(last_mouse_frame);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int last_tool_bar_item() {
		try {
			return (int)BridJ.getNativeLibrary("dispextern").getSymbolPointer("last_tool_bar_item").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public DispexternLibrary last_tool_bar_item(int last_tool_bar_item) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("last_tool_bar_item").as(int.class).set(last_tool_bar_item);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[]
	public Pointer<Byte > unspecified_fg() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("dispextern").getSymbolPointer("unspecified_fg").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[]
	public DispexternLibrary unspecified_fg(Pointer<Byte > unspecified_fg) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("unspecified_fg").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(unspecified_fg);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[]
	public Pointer<Byte > unspecified_bg() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("dispextern").getSymbolPointer("unspecified_bg").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[]
	public DispexternLibrary unspecified_bg(Pointer<Byte > unspecified_bg) {
		try {
			{
				BridJ.getNativeLibrary("dispextern").getSymbolPointer("unspecified_bg").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(unspecified_bg);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface buffer {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface id {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface GLYPH {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface frame {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface terminal {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface window {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface font {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface tty_display_info {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Char_Table {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Mouse_HLInfo {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface EMACS_INT {
		
	};
}
