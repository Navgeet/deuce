package emacs.w32term;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>w32term</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("w32term") 
@Runtime(CRuntime.class) 
public class W32termLibrary {
	static {
		BridJ.register();
	}
	/**
	 * Values for focus_state, used as bit mask.<br>
	 * EXPLICIT means we received a FocusIn for the frame and know it has<br>
	 * the focus.  IMPLICIT means we received an EnterNotify and the frame<br>
	 * may have the focus if no window manager is running.<br>
	 * FocusOut and LeaveNotify clears EXPLICIT/IMPLICIT.
	 */
	public static final int FOCUS_NONE = (int)0;
	public static final int FOCUS_IMPLICIT = (int)1;
	public static final int FOCUS_EXPLICIT = (int)2;
	/// <i>native declaration : w32term.h</i>
	public static final int WND_SCROLLBAR_INDEX = (int)(12);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_ENTER = (int)(146 + 1);
	/// <i>native declaration : w32gui.h</i>
	public static final int AllValues = (int)15;
	/// <i>native declaration : w32gui.h</i>
	public static final int WidthValue = (int)4;
	/// <i>native declaration : w32term.h</i>
	public static final int WND_LINEHEIGHT_INDEX = (int)(4);
	/// <i>native declaration : w32gui.h</i>
	public static final int PAspect = (int)(1 << 7);
	/// <i>native declaration : w32term.h</i>
	public static final int WND_EXTRA_BYTES = (int)(20);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_LEFT = (int)(146 + 6);
	/// <i>native declaration : w32gui.h</i>
	public static final int StaticGravity = (int)10;
	/// <i>native declaration : w32term.h</i>
	public static final int VERTICAL_SCROLL_BAR_LEFT_BORDER = (int)(0);
	/// <i>native declaration : w32gui.h</i>
	public static final int FACE_DEFAULT = (int)(~0);
	/// <i>native declaration : w32gui.h</i>
	public static final int SouthEastGravity = (int)9;
	/// <i>native declaration : w32term.h</i>
	public static final int VK_APPS = (int)93;
	/// <i>native declaration : w32term.h</i>
	public static final int WND_BORDER_INDEX = (int)(8);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_NEXT = (int)(146 + 3);
	/// <i>native declaration : w32term.h</i>
	public static final int WM_UNICHAR = (int)265;
	/// <i>native declaration : w32gui.h</i>
	public static final int GCForeground = (int)1;
	/// <i>native declaration : w32gui.h</i>
	public static final int PWinGravity = (int)(1 << 9);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_CLEAR = (int)(146 + 0);
	/// <i>native declaration : w32term.h</i>
	public static final int APPS_PRESSED = (int)8192;
	/// <i>native declaration : w32gui.h</i>
	public static final int GCBackground = (int)2;
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_INSERT = (int)(146 + 10);
	/// <i>native declaration : w32gui.h</i>
	public static final int NorthEastGravity = (int)3;
	/// <i>native declaration : w32gui.h</i>
	public static final int WestGravity = (int)4;
	/// <i>native declaration : w32term.h</i>
	public static final String MSH_MOUSEWHEEL = (String)"MSWHEEL_ROLLMSG";
	/// <i>native declaration : w32gui.h</i>
	public static final int XValue = (int)1;
	/// <i>native declaration : w32term.h</i>
	public static final int VERTICAL_SCROLL_BAR_RIGHT_BORDER = (int)(0);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_RWIN = (int)92;
	/// <i>native declaration : w32term.h</i>
	public static final int UNICODE_NOCHAR = (int)65535;
	/// <i>native declaration : w32gui.h</i>
	public static final int ForgetGravity = (int)0;
	/// <i>native declaration : w32term.h</i>
	public static final int WND_LAST_INDEX = (int)(20);
	/// <i>native declaration : w32gui.h</i>
	public static final int GCFont = (int)3;
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_PRIOR = (int)(146 + 2);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_RIGHT = (int)(146 + 8);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_DOWN = (int)(146 + 9);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_DELETE = (int)(146 + 11);
	/// <i>native declaration : w32gui.h</i>
	public static final int SouthWestGravity = (int)7;
	/// <i>native declaration : w32gui.h</i>
	public static final int YValue = (int)2;
	/// <i>native declaration : w32term.h</i>
	public static final int WND_FONTWIDTH_INDEX = (int)(0);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_UP = (int)(146 + 7);
	/// <i>native declaration : w32gui.h</i>
	public static final int EastGravity = (int)6;
	/// <i>native declaration : w32gui.h</i>
	public static final int USPosition = (int)(1 << 0);
	/// <i>native declaration : w32gui.h</i>
	public static final int PBaseSize = (int)(1 << 8);
	/// <i>native declaration : w32term.h</i>
	public static final int VERTICAL_SCROLL_BAR_WIDTH_TRIM = (int)(0);
	/// <i>native declaration : w32gui.h</i>
	public static final int USSize = (int)(1 << 1);
	/// <i>native declaration : w32gui.h</i>
	public static final int CenterGravity = (int)5;
	/// <i>native declaration : w32term.h</i>
	public static final int WM_APPCOMMAND = (int)793;
	/// <i>native declaration : w32term.h</i>
	public static final int RIGHT_WIN_PRESSED = (int)16384;
	/// <i>native declaration : w32term.h</i>
	public static final int WND_BACKGROUND_INDEX = (int)(16);
	/// <i>native declaration : w32gui.h</i>
	public static final int PSize = (int)(1 << 3);
	/// <i>native declaration : w32term.h</i>
	public static final int WM_MOUSELEAVE = (int)675;
	/// <i>native declaration : w32gui.h</i>
	public static final int PPosition = (int)(1 << 2);
	/// <i>native declaration : w32gui.h</i>
	public static final int PMinSize = (int)(1 << 4);
	/// <i>native declaration : w32term.h</i>
	public static final int LEFT_WIN_PRESSED = (int)32768;
	/// <i>native declaration : w32gui.h</i>
	public static final int XNegative = (int)16;
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_HOME = (int)(146 + 5);
	/// <i>native declaration : w32gui.h</i>
	public static final int HeightValue = (int)8;
	/// <i>native declaration : w32gui.h</i>
	public static final int PMaxSize = (int)(1 << 5);
	/// <i>native declaration : w32gui.h</i>
	public static final int NorthGravity = (int)2;
	/// <i>native declaration : w32gui.h</i>
	public static final int PResizeInc = (int)(1 << 6);
	/// <i>native declaration : w32gui.h</i>
	public static final int No_Cursor = (int)(0);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_END = (int)(146 + 4);
	/// <i>native declaration : w32term.h</i>
	public static final int VK_NUMPAD_BEGIN = (int)146;
	/// <i>native declaration : w32term.h</i>
	public static final int CP_DEFAULT = (int)1004;
	/// <i>native declaration : w32gui.h</i>
	public static final int SouthGravity = (int)8;
	/// <i>native declaration : w32gui.h</i>
	public static final int NorthWestGravity = (int)1;
	/// <i>native declaration : w32gui.h</i>
	public static final int YNegative = (int)32;
	/// <i>native declaration : w32term.h</i>
	public static final int TME_LEAVE = (int)2;
	/// <i>native declaration : w32gui.h</i>
	public static final int NoValue = (int)0;
	/// <i>native declaration : w32term.h</i>
	public static final int VK_LWIN = (int)91;
	/**
	 * Original signature : <code>int set_file_times(const char*, int, int)</code><br>
	 * <i>native declaration : systime.h:303</i>
	 */
	public static native int set_file_times(Pointer<Byte > charPtr1, int int1, int int2);
	/**
	 * defined in keyboard.c<br>
	 * Original signature : <code>void set_waiting_for_input(int*)</code><br>
	 * <i>native declaration : systime.h:308</i>
	 */
	public static native void set_waiting_for_input(Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>int XParseGeometry(char*, int*, int*, unsigned*, unsigned*)</code><br>
	 * <i>native declaration : w32gui.h:333</i>
	 */
	public static native int XParseGeometry(Pointer<Byte > charPtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > uPtr1, Pointer<Integer > uPtr2);
	/**
	 * Original signature : <code>void w32_regenerate_palette(frame*)</code><br>
	 * <i>native declaration : w32term.h:359</i>
	 */
	public static native void w32_regenerate_palette(Pointer<W32termLibrary.frame > f);
	/**
	 * Original signature : <code>frame* x_window_to_frame(w32_display_info*, HWND)</code><br>
	 * <i>native declaration : w32term.h:464</i>
	 */
	public static native Pointer<W32termLibrary.frame > x_window_to_frame(Pointer<w32_display_info > w32_display_infoPtr1, W32termLibrary.HWND HWND1);
	/**
	 * Original signature : <code>w32_display_info* x_display_info_for_name(Lisp_Object)</code><br>
	 * <i>native declaration : w32term.h:466</i>
	 */
	public static native Pointer<w32_display_info > x_display_info_for_name(W32termLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object display_x_get_resource(w32_display_info*, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : w32term.h:468</i>
	 */
	public static native W32termLibrary.Lisp_Object display_x_get_resource(Pointer<w32_display_info > w32_display_infoPtr1, W32termLibrary.Lisp_Object Lisp_Object1, W32termLibrary.Lisp_Object Lisp_Object2, W32termLibrary.Lisp_Object Lisp_Object3, W32termLibrary.Lisp_Object Lisp_Object4);
	/**
	 * Original signature : <code>w32_display_info* w32_term_init(Lisp_Object, char*, char*)</code><br>
	 * <i>native declaration : w32term.h:470</i>
	 */
	public static native Pointer<w32_display_info > w32_term_init(W32termLibrary.Lisp_Object Lisp_Object1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	/**
	 * Original signature : <code>int x_display_pixel_height(w32_display_info*)</code><br>
	 * <i>native declaration : w32term.h:472</i>
	 */
	public static native int x_display_pixel_height(Pointer<w32_display_info > w32_display_infoPtr1);
	/**
	 * Original signature : <code>int x_display_pixel_width(w32_display_info*)</code><br>
	 * <i>native declaration : w32term.h:474</i>
	 */
	public static native int x_display_pixel_width(Pointer<w32_display_info > w32_display_infoPtr1);
	/**
	 * Original signature : <code>void w32_fill_rect(frame*, HDC, COLORREF, RECT*)</code><br>
	 * <i>native declaration : w32term.h:691</i>
	 */
	public static native void w32_fill_rect(Pointer<W32termLibrary.frame > framePtr1, W32termLibrary.HDC HDC1, W32termLibrary.COLORREF COLORREF1, Pointer<W32termLibrary.RECT > RECTPtr1);
	/**
	 * Original signature : <code>void w32_clear_window(frame*)</code><br>
	 * <i>native declaration : w32term.h:693</i>
	 */
	public static native void w32_clear_window(Pointer<W32termLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void init_crit()</code><br>
	 * <i>native declaration : w32term.h:716</i>
	 */
	public static native void init_crit();
	/**
	 * Original signature : <code>void delete_crit()</code><br>
	 * <i>native declaration : w32term.h:718</i>
	 */
	public static native void delete_crit();
	/**
	 * Original signature : <code>void signal_quit()</code><br>
	 * <i>native declaration : w32term.h:720</i>
	 */
	public static native void signal_quit();
	/**
	 * Original signature : <code>void select_palette(frame*, HDC)</code><br>
	 * <i>native declaration : w32term.h:722</i>
	 */
	public static native void select_palette(Pointer<W32termLibrary.frame > f, W32termLibrary.HDC hdc);
	/**
	 * Original signature : <code>void deselect_palette(frame*, HDC)</code><br>
	 * <i>native declaration : w32term.h:724</i>
	 */
	public static native void deselect_palette(Pointer<W32termLibrary.frame > f, W32termLibrary.HDC hdc);
	/**
	 * Original signature : <code>HDC get_frame_dc(frame*)</code><br>
	 * <i>native declaration : w32term.h:726</i>
	 */
	public static native W32termLibrary.HDC get_frame_dc(Pointer<W32termLibrary.frame > f);
	/**
	 * Original signature : <code>int release_frame_dc(frame*, HDC)</code><br>
	 * <i>native declaration : w32term.h:728</i>
	 */
	public static native int release_frame_dc(Pointer<W32termLibrary.frame > f, W32termLibrary.HDC hDC);
	/**
	 * Original signature : <code>void drain_message_queue()</code><br>
	 * <i>native declaration : w32term.h:730</i>
	 */
	public static native void drain_message_queue();
	/**
	 * Original signature : <code>BOOL get_next_msg(W32Msg*, BOOL)</code><br>
	 * <i>native declaration : w32term.h:732</i>
	 */
	public static native int get_next_msg(Pointer<W32Msg > W32MsgPtr1, int BOOL1);
	/**
	 * Original signature : <code>BOOL post_msg(W32Msg*)</code><br>
	 * <i>native declaration : w32term.h:734</i>
	 */
	public static native int post_msg(Pointer<W32Msg > W32MsgPtr1);
	/**
	 * Original signature : <code>void complete_deferred_msg(HWND, UINT, LRESULT)</code><br>
	 * <i>native declaration : w32term.h:736</i>
	 */
	public static native void complete_deferred_msg(W32termLibrary.HWND hwnd, int msg, W32termLibrary.LRESULT result);
	/**
	 * Original signature : <code>BOOL parse_button(int, int, int*, int*)</code><br>
	 * <i>native declaration : w32term.h:738</i>
	 */
	public static native int parse_button(int int1, int int2, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2);
	/**
	 * Original signature : <code>void w32_sys_ring_bell(frame*)</code><br>
	 * <i>native declaration : w32term.h:740</i>
	 */
	public static native void w32_sys_ring_bell(Pointer<W32termLibrary.frame > f);
	/**
	 * Original signature : <code>void x_delete_display(w32_display_info*)</code><br>
	 * <i>native declaration : w32term.h:742</i>
	 */
	public static native void x_delete_display(Pointer<w32_display_info > dpyinfo);
	/**
	 * Original signature : <code>XGCValues* XCreateGC(void*, Window, unsigned long, XGCValues*)</code><br>
	 * <i>native declaration : w32term.h:752</i>
	 */
	public static native Pointer<XGCValues > XCreateGC(Pointer<? > voidPtr1, W32termLibrary.HWND Window1, @CLong long u1, Pointer<XGCValues > XGCValuesPtr1);
	/**
	 * Original signature : <code>frame* check_x_frame(Lisp_Object)</code><br>
	 * <i>native declaration : w32term.h:754</i>
	 */
	public static native Pointer<W32termLibrary.frame > check_x_frame(W32termLibrary.Lisp_Object Lisp_Object1);
	public int nCmdShow() {
		try {
			return (int)BridJ.getNativeLibrary("w32term").getSymbolPointer("nCmdShow").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public W32termLibrary nCmdShow(int nCmdShow) {
		try {
			{
				BridJ.getNativeLibrary("w32term").getSymbolPointer("nCmdShow").as(int.class).set(nCmdShow);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int bUseDflt() {
		try {
			return (int)BridJ.getNativeLibrary("w32term").getSymbolPointer("bUseDflt").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public W32termLibrary bUseDflt(int bUseDflt) {
		try {
			{
				BridJ.getNativeLibrary("w32term").getSymbolPointer("bUseDflt").as(int.class).set(bUseDflt);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * This is a chain of structures for all the displays currently in use.<br>
	 * C type : extern w32_display_info*
	 */
	public Pointer<w32_display_info > x_display_list() {
		try {
			return (Pointer<w32_display_info >)BridJ.getNativeLibrary("w32term").getSymbolPointer("x_display_list").as(DefaultParameterizedType.paramType(Pointer.class, w32_display_info.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * This is a chain of structures for all the displays currently in use.<br>
	 * C type : extern w32_display_info*
	 */
	public W32termLibrary x_display_list(Pointer<w32_display_info > x_display_list) {
		try {
			{
				BridJ.getNativeLibrary("w32term").getSymbolPointer("x_display_list").as(DefaultParameterizedType.paramType(Pointer.class, w32_display_info.class)).set(x_display_list);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern w32_display_info
	public w32_display_info one_w32_display_info() {
		try {
			return (w32_display_info)BridJ.getNativeLibrary("w32term").getSymbolPointer("one_w32_display_info").as(w32_display_info.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern w32_display_info
	public W32termLibrary one_w32_display_info(w32_display_info one_w32_display_info) {
		try {
			{
				BridJ.getNativeLibrary("w32term").getSymbolPointer("one_w32_display_info").as(w32_display_info.class).set(one_w32_display_info);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern w32_output
	public w32_output w32term_display() {
		try {
			return (w32_output)BridJ.getNativeLibrary("w32term").getSymbolPointer("w32term_display").as(w32_output.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern w32_output
	public W32termLibrary w32term_display(w32_output w32term_display) {
		try {
			{
				BridJ.getNativeLibrary("w32term").getSymbolPointer("w32term_display").as(w32_output.class).set(w32term_display);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int dwWindowsThreadId() {
		try {
			return (int)BridJ.getNativeLibrary("w32term").getSymbolPointer("dwWindowsThreadId").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public W32termLibrary dwWindowsThreadId(int dwWindowsThreadId) {
		try {
			{
				BridJ.getNativeLibrary("w32term").getSymbolPointer("dwWindowsThreadId").as(int.class).set(dwWindowsThreadId);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int dwMainThreadId() {
		try {
			return (int)BridJ.getNativeLibrary("w32term").getSymbolPointer("dwMainThreadId").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public W32termLibrary dwMainThreadId(int dwMainThreadId) {
		try {
			{
				BridJ.getNativeLibrary("w32term").getSymbolPointer("dwMainThreadId").as(int.class).set(dwMainThreadId);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface CRITICAL_SECTION {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface COLORREF {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface BITMAPINFO {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface font {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HANDLE {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HWND {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HCURSOR {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface PALETTEENTRY {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HBITMAP {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Mouse_HLInfo {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface LRESULT {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface LPSTR {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HPALETTE {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface MSG {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface frame {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Vector {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface terminal {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HDC {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HMENU {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HINSTANCE {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface RECT {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface EMACS_INT {
		
	};
}
