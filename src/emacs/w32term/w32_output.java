package emacs.w32term;
import emacs.w32term.W32termLibrary.font;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : w32term.h:602</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("w32term") 
public class w32_output extends StructObject {
	public w32_output() {
		super();
	}
	/**
	 * Placeholder for things accessed through output_data.x.<br>
	 * C type : x_output
	 */
	@Field(0) 
	public x_output x_compatible() {
		return this.io.getNativeObjectField(this, 0);
	}
	/**
	 * Placeholder for things accessed through output_data.x.<br>
	 * C type : x_output
	 */
	@Field(0) 
	public w32_output x_compatible(x_output x_compatible) {
		this.io.setNativeObjectField(this, 0, x_compatible);
		return this;
	}
	/**
	 * Here are the Graphics Contexts for the default font.<br>
	 * cursor drawing<br>
	 * C type : XGCValues*
	 */
	@Field(3) 
	public Pointer<XGCValues > cursor_gc() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * Here are the Graphics Contexts for the default font.<br>
	 * cursor drawing<br>
	 * C type : XGCValues*
	 */
	@Field(3) 
	public w32_output cursor_gc(Pointer<XGCValues > cursor_gc) {
		this.io.setPointerField(this, 3, cursor_gc);
		return this;
	}
	/**
	 * Default ASCII font of this frame.<br>
	 * C type : font*
	 */
	@Field(6) 
	public Pointer<font > font() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * Default ASCII font of this frame.<br>
	 * C type : font*
	 */
	@Field(6) 
	public w32_output font(Pointer<font > font) {
		this.io.setPointerField(this, 6, font);
		return this;
	}
	/// The baseline offset of the default ASCII font.
	@Field(7) 
	public int baseline_offset() {
		return this.io.getIntField(this, 7);
	}
	/// The baseline offset of the default ASCII font.
	@Field(7) 
	public w32_output baseline_offset(int baseline_offset) {
		this.io.setIntField(this, 7, baseline_offset);
		return this;
	}
	/**
	 * If a fontset is specified for this frame instead of font, this<br>
	 * value contains an ID of the fontset, else -1.
	 */
	@Field(8) 
	public int fontset() {
		return this.io.getIntField(this, 8);
	}
	/**
	 * If a fontset is specified for this frame instead of font, this<br>
	 * value contains an ID of the fontset, else -1.
	 */
	@Field(8) 
	public w32_output fontset(int fontset) {
		this.io.setIntField(this, 8, fontset);
		return this;
	}
	/// Non-zero means hourglass cursor is currently displayed.
	@Field(21) 
	@Bits(1) 
	public int hourglass_p() {
		return this.io.getIntField(this, 21);
	}
	/// Non-zero means hourglass cursor is currently displayed.
	@Field(21) 
	@Bits(1) 
	public w32_output hourglass_p(int hourglass_p) {
		this.io.setIntField(this, 21, hourglass_p);
		return this;
	}
	/// Flag to set when the window needs to be completely repainted.
	@Field(23) 
	public int needs_exposure() {
		return this.io.getIntField(this, 23);
	}
	/// Flag to set when the window needs to be completely repainted.
	@Field(23) 
	public w32_output needs_exposure(int needs_exposure) {
		this.io.setIntField(this, 23, needs_exposure);
		return this;
	}
	@Field(24) 
	public int dwStyle() {
		return this.io.getIntField(this, 24);
	}
	@Field(24) 
	public w32_output dwStyle(int dwStyle) {
		this.io.setIntField(this, 24, dwStyle);
		return this;
	}
	/**
	 * Nonzero means our parent is another application's window<br>
	 * and was explicitly specified.
	 */
	@Field(25) 
	public byte explicit_parent() {
		return this.io.getByteField(this, 25);
	}
	/**
	 * Nonzero means our parent is another application's window<br>
	 * and was explicitly specified.
	 */
	@Field(25) 
	public w32_output explicit_parent(byte explicit_parent) {
		this.io.setByteField(this, 25, explicit_parent);
		return this;
	}
	/// Nonzero means tried already to make this frame visible.
	@Field(26) 
	public byte asked_for_visible() {
		return this.io.getByteField(this, 26);
	}
	/// Nonzero means tried already to make this frame visible.
	@Field(26) 
	public w32_output asked_for_visible(byte asked_for_visible) {
		this.io.setByteField(this, 26, asked_for_visible);
		return this;
	}
	/// Nonzero means menubar is currently active.
	@Field(27) 
	public byte menubar_active() {
		return this.io.getByteField(this, 27);
	}
	/// Nonzero means menubar is currently active.
	@Field(27) 
	public w32_output menubar_active(byte menubar_active) {
		this.io.setByteField(this, 27, menubar_active);
		return this;
	}
	/**
	 * Nonzero means menubar is about to become active, but should be<br>
	 * brought up to date first.
	 */
	@Field(28) 
	public byte pending_menu_activation() {
		return this.io.getByteField(this, 28);
	}
	/**
	 * Nonzero means menubar is about to become active, but should be<br>
	 * brought up to date first.
	 */
	@Field(28) 
	public w32_output pending_menu_activation(byte pending_menu_activation) {
		this.io.setByteField(this, 28, pending_menu_activation);
		return this;
	}
	/**
	 * Relief GCs, colors etc.<br>
	 * C type : relief
	 */
	@Field(29) 
	public w32_output.relief black_relief() {
		return this.io.getNativeObjectField(this, 29);
	}
	/**
	 * Relief GCs, colors etc.<br>
	 * C type : relief
	 */
	@Field(29) 
	public w32_output black_relief(w32_output.relief black_relief) {
		this.io.setNativeObjectField(this, 29, black_relief);
		return this;
	}
	/**
	 * Relief GCs, colors etc.<br>
	 * C type : relief
	 */
	@Field(30) 
	public w32_output.relief white_relief() {
		return this.io.getNativeObjectField(this, 30);
	}
	/**
	 * Relief GCs, colors etc.<br>
	 * C type : relief
	 */
	@Field(30) 
	public w32_output white_relief(w32_output.relief white_relief) {
		this.io.setNativeObjectField(this, 30, white_relief);
		return this;
	}
	/**
	 * The background for which the above relief GCs were set up.<br>
	 * They are changed only when a different background is involved.
	 */
	@CLong 
	@Field(31) 
	public long relief_background() {
		return this.io.getCLongField(this, 31);
	}
	/**
	 * The background for which the above relief GCs were set up.<br>
	 * They are changed only when a different background is involved.
	 */
	@CLong 
	@Field(31) 
	public w32_output relief_background(long relief_background) {
		this.io.setCLongField(this, 31, relief_background);
		return this;
	}
	/// <i>native declaration : w32term.h:596</i>
	/// <i>native declaration : w32term.h:596</i>
	public static class relief extends StructObject {
		public relief() {
			super();
		}
		/// C type : XGCValues*
		@Field(0) 
		public Pointer<XGCValues > gc() {
			return this.io.getPointerField(this, 0);
		}
		/// C type : XGCValues*
		@Field(0) 
		public relief gc(Pointer<XGCValues > gc) {
			this.io.setPointerField(this, 0, gc);
			return this;
		}
		@CLong 
		@Field(1) 
		public long pixel() {
			return this.io.getCLongField(this, 1);
		}
		@CLong 
		@Field(1) 
		public relief pixel(long pixel) {
			this.io.setCLongField(this, 1, pixel);
			return this;
		}
		@Field(2) 
		public int allocated_p() {
			return this.io.getIntField(this, 2);
		}
		@Field(2) 
		public relief allocated_p(int allocated_p) {
			this.io.setIntField(this, 2, allocated_p);
			return this;
		}
	};
}
