package emacs.widgetprv;
import emacs.widgetprv.WidgetprvLibrary.font;
import emacs.widgetprv.WidgetprvLibrary.frame;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : widgetprv.h:4153</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("widgetprv") 
public class EmacsFramePart extends StructObject {
	public EmacsFramePart() {
		super();
	}
	/**
	 * the *emacs* frame object<br>
	 * C type : frame*
	 */
	@Field(0) 
	public Pointer<frame > frame() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * the *emacs* frame object<br>
	 * C type : frame*
	 */
	@Field(0) 
	public EmacsFramePart frame(Pointer<frame > frame) {
		this.io.setPointerField(this, 0, frame);
		return this;
	}
	/**
	 * Resources that can't be done from lisp.<br>
	 * geometry spec of this frame<br>
	 * C type : char*
	 */
	@Field(1) 
	public Pointer<Byte > geometry() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Resources that can't be done from lisp.<br>
	 * geometry spec of this frame<br>
	 * C type : char*
	 */
	@Field(1) 
	public EmacsFramePart geometry(Pointer<Byte > geometry) {
		this.io.setPointerField(this, 1, geometry);
		return this;
	}
	/// whether this frame is iconic
	@Field(2) 
	public boolean iconic() {
		return this.io.getBooleanField(this, 2);
	}
	/// whether this frame is iconic
	@Field(2) 
	public EmacsFramePart iconic(boolean iconic) {
		this.io.setBooleanField(this, 2, iconic);
		return this;
	}
	/**
	 * The rest of this is crap and should be deleted.<br>
	 * 0: normal frames with minibuffers.<br>
	 * 1: frames without minibuffers<br>
	 * 2: minibuffer only.
	 */
	@Field(3) 
	public int minibuffer() {
		return this.io.getIntField(this, 3);
	}
	/**
	 * The rest of this is crap and should be deleted.<br>
	 * 0: normal frames with minibuffers.<br>
	 * 1: frames without minibuffers<br>
	 * 2: minibuffer only.
	 */
	@Field(3) 
	public EmacsFramePart minibuffer(int minibuffer) {
		this.io.setIntField(this, 3, minibuffer);
		return this;
	}
	/// frame can only have one window
	@Field(4) 
	public boolean unsplittable() {
		return this.io.getBooleanField(this, 4);
	}
	/// frame can only have one window
	@Field(4) 
	public EmacsFramePart unsplittable(boolean unsplittable) {
		this.io.setBooleanField(this, 4, unsplittable);
		return this;
	}
	/// internal borders
	@Field(5) 
	public int internal_border_width() {
		return this.io.getIntField(this, 5);
	}
	/// internal borders
	@Field(5) 
	public EmacsFramePart internal_border_width(int internal_border_width) {
		this.io.setIntField(this, 5, internal_border_width);
		return this;
	}
	/// skips between lines
	@Field(6) 
	public int interline() {
		return this.io.getIntField(this, 6);
	}
	/// skips between lines
	@Field(6) 
	public EmacsFramePart interline(int interline) {
		this.io.setIntField(this, 6, interline);
		return this;
	}
	/**
	 * font<br>
	 * C type : font*
	 */
	@Field(7) 
	public Pointer<font > font() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * font<br>
	 * C type : font*
	 */
	@Field(7) 
	public EmacsFramePart font(Pointer<font > font) {
		this.io.setPointerField(this, 7, font);
		return this;
	}
	/**
	 * foreground<br>
	 * C type : Pixel
	 */
	@CLong 
	@Field(8) 
	public long foreground_pixel() {
		return this.io.getCLongField(this, 8);
	}
	/**
	 * foreground<br>
	 * C type : Pixel
	 */
	@CLong 
	@Field(8) 
	public EmacsFramePart foreground_pixel(long foreground_pixel) {
		this.io.setCLongField(this, 8, foreground_pixel);
		return this;
	}
	/**
	 * text cursor color<br>
	 * C type : Pixel
	 */
	@CLong 
	@Field(9) 
	public long cursor_color() {
		return this.io.getCLongField(this, 9);
	}
	/**
	 * text cursor color<br>
	 * C type : Pixel
	 */
	@CLong 
	@Field(9) 
	public EmacsFramePart cursor_color(long cursor_color) {
		this.io.setCLongField(this, 9, cursor_color);
		return this;
	}
	/// 1 if bar, 0 if block
	@Field(10) 
	public boolean bar_cursor() {
		return this.io.getBooleanField(this, 10);
	}
	/// 1 if bar, 0 if block
	@Field(10) 
	public EmacsFramePart bar_cursor(boolean bar_cursor) {
		this.io.setBooleanField(this, 10, bar_cursor);
		return this;
	}
	/// flash instead of beep
	@Field(11) 
	public boolean visual_bell() {
		return this.io.getBooleanField(this, 11);
	}
	/// flash instead of beep
	@Field(11) 
	public EmacsFramePart visual_bell(boolean visual_bell) {
		this.io.setBooleanField(this, 11, visual_bell);
		return this;
	}
	/// how loud is beep
	@Field(12) 
	public int bell_volume() {
		return this.io.getIntField(this, 12);
	}
	/// how loud is beep
	@Field(12) 
	public EmacsFramePart bell_volume(int bell_volume) {
		this.io.setIntField(this, 12, bell_volume);
		return this;
	}
}
