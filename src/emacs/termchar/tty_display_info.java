package emacs.termchar;
import emacs.termchar.TermcharLibrary.FILE;
import emacs.termchar.TermcharLibrary.cm;
import emacs.termchar.TermcharLibrary.emacs_tty;
import emacs.termchar.TermcharLibrary.frame;
import emacs.termchar.TermcharLibrary.terminal;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : termchar.h:128</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("termchar") 
public class tty_display_info extends StructObject {
	public tty_display_info() {
		super();
	}
	/**
	 * Chain of all tty devices.<br>
	 * C type : tty_display_info*
	 */
	@Field(0) 
	public Pointer<tty_display_info > next() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Chain of all tty devices.<br>
	 * C type : tty_display_info*
	 */
	@Field(0) 
	public tty_display_info next(Pointer<tty_display_info > next) {
		this.io.setPointerField(this, 0, next);
		return this;
	}
	/**
	 * The name of the device file or 0 if<br>
	 * stdin/stdout.<br>
	 * C type : char*
	 */
	@Field(1) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * The name of the device file or 0 if<br>
	 * stdin/stdout.<br>
	 * C type : char*
	 */
	@Field(1) 
	public tty_display_info name(Pointer<Byte > name) {
		this.io.setPointerField(this, 1, name);
		return this;
	}
	/**
	 * The type of the tty.<br>
	 * C type : char*
	 */
	@Field(2) 
	public Pointer<Byte > type() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * The type of the tty.<br>
	 * C type : char*
	 */
	@Field(2) 
	public tty_display_info type(Pointer<Byte > type) {
		this.io.setPointerField(this, 2, type);
		return this;
	}
	/**
	 * The stream to be used for terminal input.<br>
	 * NULL if the terminal is suspended.<br>
	 * C type : FILE*
	 */
	@Field(3) 
	public Pointer<FILE > input() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * The stream to be used for terminal input.<br>
	 * NULL if the terminal is suspended.<br>
	 * C type : FILE*
	 */
	@Field(3) 
	public tty_display_info input(Pointer<FILE > input) {
		this.io.setPointerField(this, 3, input);
		return this;
	}
	/**
	 * The stream to be used for terminal output.<br>
	 * NULL if the terminal is suspended.<br>
	 * C type : FILE*
	 */
	@Field(4) 
	public Pointer<FILE > output() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * The stream to be used for terminal output.<br>
	 * NULL if the terminal is suspended.<br>
	 * C type : FILE*
	 */
	@Field(4) 
	public tty_display_info output(Pointer<FILE > output) {
		this.io.setPointerField(this, 4, output);
		return this;
	}
	/**
	 * If nonzero, send all terminal output<br>
	 * characters to this stream also.<br>
	 * C type : FILE*
	 */
	@Field(5) 
	public Pointer<FILE > termscript() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * If nonzero, send all terminal output<br>
	 * characters to this stream also.<br>
	 * C type : FILE*
	 */
	@Field(5) 
	public tty_display_info termscript(Pointer<FILE > termscript) {
		this.io.setPointerField(this, 5, termscript);
		return this;
	}
	/**
	 * The initial tty mode bits<br>
	 * C type : emacs_tty*
	 */
	@Field(6) 
	public Pointer<emacs_tty > old_tty() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * The initial tty mode bits<br>
	 * C type : emacs_tty*
	 */
	@Field(6) 
	public tty_display_info old_tty(Pointer<emacs_tty > old_tty) {
		this.io.setPointerField(this, 6, old_tty);
		return this;
	}
	/// 1 if we have been through init_sys_modes.
	@Field(7) 
	public int term_initted() {
		return this.io.getIntField(this, 7);
	}
	/// 1 if we have been through init_sys_modes.
	@Field(7) 
	public tty_display_info term_initted(int term_initted) {
		this.io.setIntField(this, 7, term_initted);
		return this;
	}
	/// Number of frames that are on this display.
	@Field(8) 
	public int reference_count() {
		return this.io.getIntField(this, 8);
	}
	/// Number of frames that are on this display.
	@Field(8) 
	public tty_display_info reference_count(int reference_count) {
		this.io.setIntField(this, 8, reference_count);
		return this;
	}
	/**
	 * Points back to the generic terminal<br>
	 * structure.  This is sometimes handy.<br>
	 * C type : terminal*
	 */
	@Field(9) 
	public Pointer<terminal > terminal() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * Points back to the generic terminal<br>
	 * structure.  This is sometimes handy.<br>
	 * C type : terminal*
	 */
	@Field(9) 
	public tty_display_info terminal(Pointer<terminal > terminal) {
		this.io.setPointerField(this, 9, terminal);
		return this;
	}
	/**
	 * Info on cursor positioning.<br>
	 * C type : cm*
	 */
	@Field(10) 
	public Pointer<cm > Wcm() {
		return this.io.getPointerField(this, 10);
	}
	/**
	 * Info on cursor positioning.<br>
	 * C type : cm*
	 */
	@Field(10) 
	public tty_display_info Wcm(Pointer<cm > Wcm) {
		this.io.setPointerField(this, 10, Wcm);
		return this;
	}
	/**
	 * The previous frame we displayed on this tty.<br>
	 * C type : frame*
	 */
	@Field(12) 
	public Pointer<frame > previous_frame() {
		return this.io.getPointerField(this, 12);
	}
	/**
	 * The previous frame we displayed on this tty.<br>
	 * C type : frame*
	 */
	@Field(12) 
	public tty_display_info previous_frame(Pointer<frame > previous_frame) {
		this.io.setPointerField(this, 12, previous_frame);
		return this;
	}
	@Field(13) 
	public int previous_color_mode() {
		return this.io.getIntField(this, 13);
	}
	@Field(13) 
	public tty_display_info previous_color_mode(int previous_color_mode) {
		this.io.setIntField(this, 13, previous_color_mode);
		return this;
	}
	/**
	 * Buffer used internally by termcap (see tgetent in the Termcap<br>
	 * manual).  Only init_tty and delete_tty should change this.<br>
	 * C type : char*
	 */
	@Field(15) 
	public Pointer<Byte > termcap_term_buffer() {
		return this.io.getPointerField(this, 15);
	}
	/**
	 * Buffer used internally by termcap (see tgetent in the Termcap<br>
	 * manual).  Only init_tty and delete_tty should change this.<br>
	 * C type : char*
	 */
	@Field(15) 
	public tty_display_info termcap_term_buffer(Pointer<Byte > termcap_term_buffer) {
		this.io.setPointerField(this, 15, termcap_term_buffer);
		return this;
	}
	/**
	 * Buffer storing terminal description strings (see tgetstr in the<br>
	 * Termcap manual).  Only init_tty and delete_tty should change<br>
	 * this.<br>
	 * C type : char*
	 */
	@Field(16) 
	public Pointer<Byte > termcap_strings_buffer() {
		return this.io.getPointerField(this, 16);
	}
	/**
	 * Buffer storing terminal description strings (see tgetstr in the<br>
	 * Termcap manual).  Only init_tty and delete_tty should change<br>
	 * this.<br>
	 * C type : char*
	 */
	@Field(16) 
	public tty_display_info termcap_strings_buffer(Pointer<Byte > termcap_strings_buffer) {
		this.io.setPointerField(this, 16, termcap_strings_buffer);
		return this;
	}
	/**
	 * "al"<br>
	 * C type : const char*
	 */
	@Field(17) 
	public Pointer<Byte > TS_ins_line() {
		return this.io.getPointerField(this, 17);
	}
	/**
	 * "al"<br>
	 * C type : const char*
	 */
	@Field(17) 
	public tty_display_info TS_ins_line(Pointer<Byte > TS_ins_line) {
		this.io.setPointerField(this, 17, TS_ins_line);
		return this;
	}
	/**
	 * "AL" (one parameter, # lines to insert)<br>
	 * C type : const char*
	 */
	@Field(18) 
	public Pointer<Byte > TS_ins_multi_lines() {
		return this.io.getPointerField(this, 18);
	}
	/**
	 * "AL" (one parameter, # lines to insert)<br>
	 * C type : const char*
	 */
	@Field(18) 
	public tty_display_info TS_ins_multi_lines(Pointer<Byte > TS_ins_multi_lines) {
		this.io.setPointerField(this, 18, TS_ins_multi_lines);
		return this;
	}
	/**
	 * "bl"<br>
	 * C type : const char*
	 */
	@Field(19) 
	public Pointer<Byte > TS_bell() {
		return this.io.getPointerField(this, 19);
	}
	/**
	 * "bl"<br>
	 * C type : const char*
	 */
	@Field(19) 
	public tty_display_info TS_bell(Pointer<Byte > TS_bell) {
		this.io.setPointerField(this, 19, TS_bell);
		return this;
	}
	/**
	 * "cd"<br>
	 * C type : const char*
	 */
	@Field(20) 
	public Pointer<Byte > TS_clr_to_bottom() {
		return this.io.getPointerField(this, 20);
	}
	/**
	 * "cd"<br>
	 * C type : const char*
	 */
	@Field(20) 
	public tty_display_info TS_clr_to_bottom(Pointer<Byte > TS_clr_to_bottom) {
		this.io.setPointerField(this, 20, TS_clr_to_bottom);
		return this;
	}
	/**
	 * "ce", clear to end of line<br>
	 * C type : const char*
	 */
	@Field(21) 
	public Pointer<Byte > TS_clr_line() {
		return this.io.getPointerField(this, 21);
	}
	/**
	 * "ce", clear to end of line<br>
	 * C type : const char*
	 */
	@Field(21) 
	public tty_display_info TS_clr_line(Pointer<Byte > TS_clr_line) {
		this.io.setPointerField(this, 21, TS_clr_line);
		return this;
	}
	/**
	 * "cl"<br>
	 * C type : const char*
	 */
	@Field(22) 
	public Pointer<Byte > TS_clr_frame() {
		return this.io.getPointerField(this, 22);
	}
	/**
	 * "cl"<br>
	 * C type : const char*
	 */
	@Field(22) 
	public tty_display_info TS_clr_frame(Pointer<Byte > TS_clr_frame) {
		this.io.setPointerField(this, 22, TS_clr_frame);
		return this;
	}
	/**
	 * "cs" (2 params, first line and last line)<br>
	 * C type : const char*
	 */
	@Field(23) 
	public Pointer<Byte > TS_set_scroll_region() {
		return this.io.getPointerField(this, 23);
	}
	/**
	 * "cs" (2 params, first line and last line)<br>
	 * C type : const char*
	 */
	@Field(23) 
	public tty_display_info TS_set_scroll_region(Pointer<Byte > TS_set_scroll_region) {
		this.io.setPointerField(this, 23, TS_set_scroll_region);
		return this;
	}
	/**
	 * "cS" (4 params: total lines,<br>
	 * lines above scroll region, lines below it,<br>
	 * total lines again)<br>
	 * C type : const char*
	 */
	@Field(24) 
	public Pointer<Byte > TS_set_scroll_region_1() {
		return this.io.getPointerField(this, 24);
	}
	/**
	 * "cS" (4 params: total lines,<br>
	 * lines above scroll region, lines below it,<br>
	 * total lines again)<br>
	 * C type : const char*
	 */
	@Field(24) 
	public tty_display_info TS_set_scroll_region_1(Pointer<Byte > TS_set_scroll_region_1) {
		this.io.setPointerField(this, 24, TS_set_scroll_region_1);
		return this;
	}
	/**
	 * "dc"<br>
	 * C type : const char*
	 */
	@Field(25) 
	public Pointer<Byte > TS_del_char() {
		return this.io.getPointerField(this, 25);
	}
	/**
	 * "dc"<br>
	 * C type : const char*
	 */
	@Field(25) 
	public tty_display_info TS_del_char(Pointer<Byte > TS_del_char) {
		this.io.setPointerField(this, 25, TS_del_char);
		return this;
	}
	/**
	 * "DC" (one parameter, # chars to delete)<br>
	 * C type : const char*
	 */
	@Field(26) 
	public Pointer<Byte > TS_del_multi_chars() {
		return this.io.getPointerField(this, 26);
	}
	/**
	 * "DC" (one parameter, # chars to delete)<br>
	 * C type : const char*
	 */
	@Field(26) 
	public tty_display_info TS_del_multi_chars(Pointer<Byte > TS_del_multi_chars) {
		this.io.setPointerField(this, 26, TS_del_multi_chars);
		return this;
	}
	/**
	 * "dl"<br>
	 * C type : const char*
	 */
	@Field(27) 
	public Pointer<Byte > TS_del_line() {
		return this.io.getPointerField(this, 27);
	}
	/**
	 * "dl"<br>
	 * C type : const char*
	 */
	@Field(27) 
	public tty_display_info TS_del_line(Pointer<Byte > TS_del_line) {
		this.io.setPointerField(this, 27, TS_del_line);
		return this;
	}
	/**
	 * "DL" (one parameter, # lines to delete)<br>
	 * C type : const char*
	 */
	@Field(28) 
	public Pointer<Byte > TS_del_multi_lines() {
		return this.io.getPointerField(this, 28);
	}
	/**
	 * "DL" (one parameter, # lines to delete)<br>
	 * C type : const char*
	 */
	@Field(28) 
	public tty_display_info TS_del_multi_lines(Pointer<Byte > TS_del_multi_lines) {
		this.io.setPointerField(this, 28, TS_del_multi_lines);
		return this;
	}
	/**
	 * "dm", enter character-delete mode<br>
	 * C type : const char*
	 */
	@Field(29) 
	public Pointer<Byte > TS_delete_mode() {
		return this.io.getPointerField(this, 29);
	}
	/**
	 * "dm", enter character-delete mode<br>
	 * C type : const char*
	 */
	@Field(29) 
	public tty_display_info TS_delete_mode(Pointer<Byte > TS_delete_mode) {
		this.io.setPointerField(this, 29, TS_delete_mode);
		return this;
	}
	/**
	 * "ed", leave character-delete mode<br>
	 * C type : const char*
	 */
	@Field(30) 
	public Pointer<Byte > TS_end_delete_mode() {
		return this.io.getPointerField(this, 30);
	}
	/**
	 * "ed", leave character-delete mode<br>
	 * C type : const char*
	 */
	@Field(30) 
	public tty_display_info TS_end_delete_mode(Pointer<Byte > TS_end_delete_mode) {
		this.io.setPointerField(this, 30, TS_end_delete_mode);
		return this;
	}
	/**
	 * "ei", leave character-insert mode<br>
	 * C type : const char*
	 */
	@Field(31) 
	public Pointer<Byte > TS_end_insert_mode() {
		return this.io.getPointerField(this, 31);
	}
	/**
	 * "ei", leave character-insert mode<br>
	 * C type : const char*
	 */
	@Field(31) 
	public tty_display_info TS_end_insert_mode(Pointer<Byte > TS_end_insert_mode) {
		this.io.setPointerField(this, 31, TS_end_insert_mode);
		return this;
	}
	/**
	 * "ic"<br>
	 * C type : const char*
	 */
	@Field(32) 
	public Pointer<Byte > TS_ins_char() {
		return this.io.getPointerField(this, 32);
	}
	/**
	 * "ic"<br>
	 * C type : const char*
	 */
	@Field(32) 
	public tty_display_info TS_ins_char(Pointer<Byte > TS_ins_char) {
		this.io.setPointerField(this, 32, TS_ins_char);
		return this;
	}
	/**
	 * "IC" (one parameter, # chars to insert)<br>
	 * C type : const char*
	 */
	@Field(33) 
	public Pointer<Byte > TS_ins_multi_chars() {
		return this.io.getPointerField(this, 33);
	}
	/**
	 * "IC" (one parameter, # chars to insert)<br>
	 * C type : const char*
	 */
	@Field(33) 
	public tty_display_info TS_ins_multi_chars(Pointer<Byte > TS_ins_multi_chars) {
		this.io.setPointerField(this, 33, TS_ins_multi_chars);
		return this;
	}
	/**
	 * "im", enter character-insert mode<br>
	 * C type : const char*
	 */
	@Field(34) 
	public Pointer<Byte > TS_insert_mode() {
		return this.io.getPointerField(this, 34);
	}
	/**
	 * "im", enter character-insert mode<br>
	 * C type : const char*
	 */
	@Field(34) 
	public tty_display_info TS_insert_mode(Pointer<Byte > TS_insert_mode) {
		this.io.setPointerField(this, 34, TS_insert_mode);
		return this;
	}
	/**
	 * "ip".  Just padding, no commands.<br>
	 * C type : const char*
	 */
	@Field(35) 
	public Pointer<Byte > TS_pad_inserted_char() {
		return this.io.getPointerField(this, 35);
	}
	/**
	 * "ip".  Just padding, no commands.<br>
	 * C type : const char*
	 */
	@Field(35) 
	public tty_display_info TS_pad_inserted_char(Pointer<Byte > TS_pad_inserted_char) {
		this.io.setPointerField(this, 35, TS_pad_inserted_char);
		return this;
	}
	/**
	 * "ke"<br>
	 * C type : const char*
	 */
	@Field(36) 
	public Pointer<Byte > TS_end_keypad_mode() {
		return this.io.getPointerField(this, 36);
	}
	/**
	 * "ke"<br>
	 * C type : const char*
	 */
	@Field(36) 
	public tty_display_info TS_end_keypad_mode(Pointer<Byte > TS_end_keypad_mode) {
		this.io.setPointerField(this, 36, TS_end_keypad_mode);
		return this;
	}
	/**
	 * "ks"<br>
	 * C type : const char*
	 */
	@Field(37) 
	public Pointer<Byte > TS_keypad_mode() {
		return this.io.getPointerField(this, 37);
	}
	/**
	 * "ks"<br>
	 * C type : const char*
	 */
	@Field(37) 
	public tty_display_info TS_keypad_mode(Pointer<Byte > TS_keypad_mode) {
		this.io.setPointerField(this, 37, TS_keypad_mode);
		return this;
	}
	/**
	 * "pc", char to use as padding<br>
	 * C type : const char*
	 */
	@Field(38) 
	public Pointer<Byte > TS_pad_char() {
		return this.io.getPointerField(this, 38);
	}
	/**
	 * "pc", char to use as padding<br>
	 * C type : const char*
	 */
	@Field(38) 
	public tty_display_info TS_pad_char(Pointer<Byte > TS_pad_char) {
		this.io.setPointerField(this, 38, TS_pad_char);
		return this;
	}
	/**
	 * "rp" (2 params, # times to repeat<br>
	 * and character to be repeated)<br>
	 * C type : const char*
	 */
	@Field(39) 
	public Pointer<Byte > TS_repeat() {
		return this.io.getPointerField(this, 39);
	}
	/**
	 * "rp" (2 params, # times to repeat<br>
	 * and character to be repeated)<br>
	 * C type : const char*
	 */
	@Field(39) 
	public tty_display_info TS_repeat(Pointer<Byte > TS_repeat) {
		this.io.setPointerField(this, 39, TS_repeat);
		return this;
	}
	/**
	 * "se"<br>
	 * C type : const char*
	 */
	@Field(40) 
	public Pointer<Byte > TS_end_standout_mode() {
		return this.io.getPointerField(this, 40);
	}
	/**
	 * "se"<br>
	 * C type : const char*
	 */
	@Field(40) 
	public tty_display_info TS_end_standout_mode(Pointer<Byte > TS_end_standout_mode) {
		this.io.setPointerField(this, 40, TS_end_standout_mode);
		return this;
	}
	/**
	 * "sf"<br>
	 * C type : const char*
	 */
	@Field(41) 
	public Pointer<Byte > TS_fwd_scroll() {
		return this.io.getPointerField(this, 41);
	}
	/**
	 * "sf"<br>
	 * C type : const char*
	 */
	@Field(41) 
	public tty_display_info TS_fwd_scroll(Pointer<Byte > TS_fwd_scroll) {
		this.io.setPointerField(this, 41, TS_fwd_scroll);
		return this;
	}
	/**
	 * "so"<br>
	 * C type : const char*
	 */
	@Field(42) 
	public Pointer<Byte > TS_standout_mode() {
		return this.io.getPointerField(this, 42);
	}
	/**
	 * "so"<br>
	 * C type : const char*
	 */
	@Field(42) 
	public tty_display_info TS_standout_mode(Pointer<Byte > TS_standout_mode) {
		this.io.setPointerField(this, 42, TS_standout_mode);
		return this;
	}
	/**
	 * "sr"<br>
	 * C type : const char*
	 */
	@Field(43) 
	public Pointer<Byte > TS_rev_scroll() {
		return this.io.getPointerField(this, 43);
	}
	/**
	 * "sr"<br>
	 * C type : const char*
	 */
	@Field(43) 
	public tty_display_info TS_rev_scroll(Pointer<Byte > TS_rev_scroll) {
		this.io.setPointerField(this, 43, TS_rev_scroll);
		return this;
	}
	/**
	 * "te"<br>
	 * C type : const char*
	 */
	@Field(44) 
	public Pointer<Byte > TS_end_termcap_modes() {
		return this.io.getPointerField(this, 44);
	}
	/**
	 * "te"<br>
	 * C type : const char*
	 */
	@Field(44) 
	public tty_display_info TS_end_termcap_modes(Pointer<Byte > TS_end_termcap_modes) {
		this.io.setPointerField(this, 44, TS_end_termcap_modes);
		return this;
	}
	/**
	 * "ti"<br>
	 * C type : const char*
	 */
	@Field(45) 
	public Pointer<Byte > TS_termcap_modes() {
		return this.io.getPointerField(this, 45);
	}
	/**
	 * "ti"<br>
	 * C type : const char*
	 */
	@Field(45) 
	public tty_display_info TS_termcap_modes(Pointer<Byte > TS_termcap_modes) {
		this.io.setPointerField(this, 45, TS_termcap_modes);
		return this;
	}
	/**
	 * "vb"<br>
	 * C type : const char*
	 */
	@Field(46) 
	public Pointer<Byte > TS_visible_bell() {
		return this.io.getPointerField(this, 46);
	}
	/**
	 * "vb"<br>
	 * C type : const char*
	 */
	@Field(46) 
	public tty_display_info TS_visible_bell(Pointer<Byte > TS_visible_bell) {
		this.io.setPointerField(this, 46, TS_visible_bell);
		return this;
	}
	/**
	 * "ve"<br>
	 * C type : const char*
	 */
	@Field(47) 
	public Pointer<Byte > TS_cursor_normal() {
		return this.io.getPointerField(this, 47);
	}
	/**
	 * "ve"<br>
	 * C type : const char*
	 */
	@Field(47) 
	public tty_display_info TS_cursor_normal(Pointer<Byte > TS_cursor_normal) {
		this.io.setPointerField(this, 47, TS_cursor_normal);
		return this;
	}
	/**
	 * "vs"<br>
	 * C type : const char*
	 */
	@Field(48) 
	public Pointer<Byte > TS_cursor_visible() {
		return this.io.getPointerField(this, 48);
	}
	/**
	 * "vs"<br>
	 * C type : const char*
	 */
	@Field(48) 
	public tty_display_info TS_cursor_visible(Pointer<Byte > TS_cursor_visible) {
		this.io.setPointerField(this, 48, TS_cursor_visible);
		return this;
	}
	/**
	 * "vi"<br>
	 * C type : const char*
	 */
	@Field(49) 
	public Pointer<Byte > TS_cursor_invisible() {
		return this.io.getPointerField(this, 49);
	}
	/**
	 * "vi"<br>
	 * C type : const char*
	 */
	@Field(49) 
	public tty_display_info TS_cursor_invisible(Pointer<Byte > TS_cursor_invisible) {
		this.io.setPointerField(this, 49, TS_cursor_invisible);
		return this;
	}
	/**
	 * "wi" (4 params, start and end of window,<br>
	 * each as vpos and hpos)<br>
	 * C type : const char*
	 */
	@Field(50) 
	public Pointer<Byte > TS_set_window() {
		return this.io.getPointerField(this, 50);
	}
	/**
	 * "wi" (4 params, start and end of window,<br>
	 * each as vpos and hpos)<br>
	 * C type : const char*
	 */
	@Field(50) 
	public tty_display_info TS_set_window(Pointer<Byte > TS_set_window) {
		this.io.setPointerField(this, 50, TS_set_window);
		return this;
	}
	/**
	 * "md" -- turn on bold (extra bright mode).<br>
	 * C type : const char*
	 */
	@Field(51) 
	public Pointer<Byte > TS_enter_bold_mode() {
		return this.io.getPointerField(this, 51);
	}
	/**
	 * "md" -- turn on bold (extra bright mode).<br>
	 * C type : const char*
	 */
	@Field(51) 
	public tty_display_info TS_enter_bold_mode(Pointer<Byte > TS_enter_bold_mode) {
		this.io.setPointerField(this, 51, TS_enter_bold_mode);
		return this;
	}
	/**
	 * "mh" -- turn on half-bright mode.<br>
	 * C type : const char*
	 */
	@Field(52) 
	public Pointer<Byte > TS_enter_dim_mode() {
		return this.io.getPointerField(this, 52);
	}
	/**
	 * "mh" -- turn on half-bright mode.<br>
	 * C type : const char*
	 */
	@Field(52) 
	public tty_display_info TS_enter_dim_mode(Pointer<Byte > TS_enter_dim_mode) {
		this.io.setPointerField(this, 52, TS_enter_dim_mode);
		return this;
	}
	/**
	 * "mb" -- enter blinking mode.<br>
	 * C type : const char*
	 */
	@Field(53) 
	public Pointer<Byte > TS_enter_blink_mode() {
		return this.io.getPointerField(this, 53);
	}
	/**
	 * "mb" -- enter blinking mode.<br>
	 * C type : const char*
	 */
	@Field(53) 
	public tty_display_info TS_enter_blink_mode(Pointer<Byte > TS_enter_blink_mode) {
		this.io.setPointerField(this, 53, TS_enter_blink_mode);
		return this;
	}
	/**
	 * "mr" -- enter reverse video mode.<br>
	 * C type : const char*
	 */
	@Field(54) 
	public Pointer<Byte > TS_enter_reverse_mode() {
		return this.io.getPointerField(this, 54);
	}
	/**
	 * "mr" -- enter reverse video mode.<br>
	 * C type : const char*
	 */
	@Field(54) 
	public tty_display_info TS_enter_reverse_mode(Pointer<Byte > TS_enter_reverse_mode) {
		this.io.setPointerField(this, 54, TS_enter_reverse_mode);
		return this;
	}
	/**
	 * "us" -- start underlining.<br>
	 * C type : const char*
	 */
	@Field(55) 
	public Pointer<Byte > TS_exit_underline_mode() {
		return this.io.getPointerField(this, 55);
	}
	/**
	 * "us" -- start underlining.<br>
	 * C type : const char*
	 */
	@Field(55) 
	public tty_display_info TS_exit_underline_mode(Pointer<Byte > TS_exit_underline_mode) {
		this.io.setPointerField(this, 55, TS_exit_underline_mode);
		return this;
	}
	/**
	 * "ue" -- end underlining.<br>
	 * C type : const char*
	 */
	@Field(56) 
	public Pointer<Byte > TS_enter_underline_mode() {
		return this.io.getPointerField(this, 56);
	}
	/**
	 * "ue" -- end underlining.<br>
	 * C type : const char*
	 */
	@Field(56) 
	public tty_display_info TS_enter_underline_mode(Pointer<Byte > TS_enter_underline_mode) {
		this.io.setPointerField(this, 56, TS_enter_underline_mode);
		return this;
	}
	/**
	 * "as"/"ae" -- start/end alternate character set.  Not really<br>
	 * supported, yet.<br>
	 * C type : const char*
	 */
	@Field(57) 
	public Pointer<Byte > TS_enter_alt_charset_mode() {
		return this.io.getPointerField(this, 57);
	}
	/**
	 * "as"/"ae" -- start/end alternate character set.  Not really<br>
	 * supported, yet.<br>
	 * C type : const char*
	 */
	@Field(57) 
	public tty_display_info TS_enter_alt_charset_mode(Pointer<Byte > TS_enter_alt_charset_mode) {
		this.io.setPointerField(this, 57, TS_enter_alt_charset_mode);
		return this;
	}
	/// C type : const char*
	@Field(58) 
	public Pointer<Byte > TS_exit_alt_charset_mode() {
		return this.io.getPointerField(this, 58);
	}
	/// C type : const char*
	@Field(58) 
	public tty_display_info TS_exit_alt_charset_mode(Pointer<Byte > TS_exit_alt_charset_mode) {
		this.io.setPointerField(this, 58, TS_exit_alt_charset_mode);
		return this;
	}
	/**
	 * "me" -- switch appearances off.<br>
	 * C type : const char*
	 */
	@Field(59) 
	public Pointer<Byte > TS_exit_attribute_mode() {
		return this.io.getPointerField(this, 59);
	}
	/**
	 * "me" -- switch appearances off.<br>
	 * C type : const char*
	 */
	@Field(59) 
	public tty_display_info TS_exit_attribute_mode(Pointer<Byte > TS_exit_attribute_mode) {
		this.io.setPointerField(this, 59, TS_exit_attribute_mode);
		return this;
	}
	/// Value of the "NC" (no_color_video) capability, or 0 if not present.
	@Field(60) 
	public int TN_no_color_video() {
		return this.io.getIntField(this, 60);
	}
	/// Value of the "NC" (no_color_video) capability, or 0 if not present.
	@Field(60) 
	public tty_display_info TN_no_color_video(int TN_no_color_video) {
		this.io.setIntField(this, 60, TN_no_color_video);
		return this;
	}
	/// "Co" -- number of colors.
	@Field(61) 
	public int TN_max_colors() {
		return this.io.getIntField(this, 61);
	}
	/// "Co" -- number of colors.
	@Field(61) 
	public tty_display_info TN_max_colors(int TN_max_colors) {
		this.io.setIntField(this, 61, TN_max_colors);
		return this;
	}
	/**
	 * "pa" -- max. number of color pairs on screen.  Not handled yet.<br>
	 * Could be a problem if not equal to TN_max_colors * TN_max_colors.
	 */
	@Field(62) 
	public int TN_max_pairs() {
		return this.io.getIntField(this, 62);
	}
	/**
	 * "pa" -- max. number of color pairs on screen.  Not handled yet.<br>
	 * Could be a problem if not equal to TN_max_colors * TN_max_colors.
	 */
	@Field(62) 
	public tty_display_info TN_max_pairs(int TN_max_pairs) {
		this.io.setIntField(this, 62, TN_max_pairs);
		return this;
	}
	/**
	 * "op" -- SVr4 set default pair to its original value.<br>
	 * C type : const char*
	 */
	@Field(63) 
	public Pointer<Byte > TS_orig_pair() {
		return this.io.getPointerField(this, 63);
	}
	/**
	 * "op" -- SVr4 set default pair to its original value.<br>
	 * C type : const char*
	 */
	@Field(63) 
	public tty_display_info TS_orig_pair(Pointer<Byte > TS_orig_pair) {
		this.io.setPointerField(this, 63, TS_orig_pair);
		return this;
	}
	/**
	 * "AF"/"AB" or "Sf"/"Sb"-- set ANSI or SVr4 foreground/background color.<br>
	 * 1 param, the color index.<br>
	 * C type : const char*
	 */
	@Field(64) 
	public Pointer<Byte > TS_set_foreground() {
		return this.io.getPointerField(this, 64);
	}
	/**
	 * "AF"/"AB" or "Sf"/"Sb"-- set ANSI or SVr4 foreground/background color.<br>
	 * 1 param, the color index.<br>
	 * C type : const char*
	 */
	@Field(64) 
	public tty_display_info TS_set_foreground(Pointer<Byte > TS_set_foreground) {
		this.io.setPointerField(this, 64, TS_set_foreground);
		return this;
	}
	/// C type : const char*
	@Field(65) 
	public Pointer<Byte > TS_set_background() {
		return this.io.getPointerField(this, 65);
	}
	/// C type : const char*
	@Field(65) 
	public tty_display_info TS_set_background(Pointer<Byte > TS_set_background) {
		this.io.setPointerField(this, 65, TS_set_background);
		return this;
	}
	/// termcap hz flag.
	@Field(66) 
	public int TF_hazeltine() {
		return this.io.getIntField(this, 66);
	}
	/// termcap hz flag.
	@Field(66) 
	public tty_display_info TF_hazeltine(int TF_hazeltine) {
		this.io.setIntField(this, 66, TF_hazeltine);
		return this;
	}
	/// termcap mi flag: can move while in insert mode.
	@Field(67) 
	public int TF_insmode_motion() {
		return this.io.getIntField(this, 67);
	}
	/// termcap mi flag: can move while in insert mode.
	@Field(67) 
	public tty_display_info TF_insmode_motion(int TF_insmode_motion) {
		this.io.setIntField(this, 67, TF_insmode_motion);
		return this;
	}
	/// termcap mi flag: can move while in standout mode.
	@Field(68) 
	public int TF_standout_motion() {
		return this.io.getIntField(this, 68);
	}
	/// termcap mi flag: can move while in standout mode.
	@Field(68) 
	public tty_display_info TF_standout_motion(int TF_standout_motion) {
		this.io.setIntField(this, 68, TF_standout_motion);
		return this;
	}
	/**
	 * termcap ul flag: _ underlines if over-struck on<br>
	 * non-blank position.  Must clear before writing _.
	 */
	@Field(69) 
	public int TF_underscore() {
		return this.io.getIntField(this, 69);
	}
	/**
	 * termcap ul flag: _ underlines if over-struck on<br>
	 * non-blank position.  Must clear before writing _.
	 */
	@Field(69) 
	public tty_display_info TF_underscore(int TF_underscore) {
		this.io.setIntField(this, 69, TF_underscore);
		return this;
	}
	/**
	 * termcap xt flag: many weird consequences.<br>
	 * For t1061.
	 */
	@Field(70) 
	public int TF_teleray() {
		return this.io.getIntField(this, 70);
	}
	/**
	 * termcap xt flag: many weird consequences.<br>
	 * For t1061.
	 */
	@Field(70) 
	public tty_display_info TF_teleray(int TF_teleray) {
		this.io.setIntField(this, 70, TF_teleray);
		return this;
	}
	/// # chars to start a TS_repeat
	@Field(71) 
	public int RPov() {
		return this.io.getIntField(this, 71);
	}
	/// # chars to start a TS_repeat
	@Field(71) 
	public tty_display_info RPov(int RPov) {
		this.io.setIntField(this, 71, RPov);
		return this;
	}
	/// delete mode == insert mode
	@Field(72) 
	public int delete_in_insert_mode() {
		return this.io.getIntField(this, 72);
	}
	/// delete mode == insert mode
	@Field(72) 
	public tty_display_info delete_in_insert_mode(int delete_in_insert_mode) {
		this.io.setIntField(this, 72, delete_in_insert_mode);
		return this;
	}
	/**
	 * 1 if same string both enters and leaves<br>
	 * standout mode
	 */
	@Field(73) 
	public int se_is_so() {
		return this.io.getIntField(this, 73);
	}
	/**
	 * 1 if same string both enters and leaves<br>
	 * standout mode
	 */
	@Field(73) 
	public tty_display_info se_is_so(int se_is_so) {
		this.io.setIntField(this, 73, se_is_so);
		return this;
	}
	/// Nonzero if costs have been calculated.
	@Field(74) 
	public int costs_set() {
		return this.io.getIntField(this, 74);
	}
	/// Nonzero if costs have been calculated.
	@Field(74) 
	public tty_display_info costs_set(int costs_set) {
		this.io.setIntField(this, 74, costs_set);
		return this;
	}
	/// Nonzero when in insert mode.
	@Field(75) 
	public int insert_mode() {
		return this.io.getIntField(this, 75);
	}
	/// Nonzero when in insert mode.
	@Field(75) 
	public tty_display_info insert_mode(int insert_mode) {
		this.io.setIntField(this, 75, insert_mode);
		return this;
	}
	/// Nonzero when in standout mode.
	@Field(76) 
	public int standout_mode() {
		return this.io.getIntField(this, 76);
	}
	/// Nonzero when in standout mode.
	@Field(76) 
	public tty_display_info standout_mode(int standout_mode) {
		this.io.setIntField(this, 76, standout_mode);
		return this;
	}
	@Field(77) 
	public int meta_key() {
		return this.io.getIntField(this, 77);
	}
	@Field(77) 
	public tty_display_info meta_key(int meta_key) {
		this.io.setIntField(this, 77, meta_key);
		return this;
	}
	@Field(78) 
	public int specified_window() {
		return this.io.getIntField(this, 78);
	}
	@Field(78) 
	public tty_display_info specified_window(int specified_window) {
		this.io.setIntField(this, 78, specified_window);
		return this;
	}
	@Field(79) 
	public int cursor_hidden() {
		return this.io.getIntField(this, 79);
	}
	@Field(79) 
	public tty_display_info cursor_hidden(int cursor_hidden) {
		this.io.setIntField(this, 79, cursor_hidden);
		return this;
	}
	/// Nonzero means use ^S/^Q for flow control.
	@Field(80) 
	public int flow_control() {
		return this.io.getIntField(this, 80);
	}
	/// Nonzero means use ^S/^Q for flow control.
	@Field(80) 
	public tty_display_info flow_control(int flow_control) {
		this.io.setIntField(this, 80, flow_control);
		return this;
	}
}
