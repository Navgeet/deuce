package emacs.frame;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : dispextern.h:798</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("frame") 
public class face_cache extends StructObject {
	public face_cache() {
		super();
	}
	/**
	 * Hash table of cached realized faces.<br>
	 * C type : face**
	 */
	@Field(0) 
	public Pointer<Pointer<face > > buckets() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Hash table of cached realized faces.<br>
	 * C type : face**
	 */
	@Field(0) 
	public face_cache buckets(Pointer<Pointer<face > > buckets) {
		this.io.setPointerField(this, 0, buckets);
		return this;
	}
	/**
	 * Back-pointer to the frame this cache belongs to.<br>
	 * C type : frame*
	 */
	@Field(1) 
	public Pointer<frame > f() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Back-pointer to the frame this cache belongs to.<br>
	 * C type : frame*
	 */
	@Field(1) 
	public face_cache f(Pointer<frame > f) {
		this.io.setPointerField(this, 1, f);
		return this;
	}
	/**
	 * A vector of faces so that faces can be referenced by an ID.<br>
	 * C type : face**
	 */
	@Field(2) 
	public Pointer<Pointer<face > > faces_by_id() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * A vector of faces so that faces can be referenced by an ID.<br>
	 * C type : face**
	 */
	@Field(2) 
	public face_cache faces_by_id(Pointer<Pointer<face > > faces_by_id) {
		this.io.setPointerField(this, 2, faces_by_id);
		return this;
	}
	/// The allocated size, and number of used slots of faces_by_id.
	@Ptr 
	@Field(3) 
	public long size() {
		return this.io.getSizeTField(this, 3);
	}
	/// The allocated size, and number of used slots of faces_by_id.
	@Ptr 
	@Field(3) 
	public face_cache size(long size) {
		this.io.setSizeTField(this, 3, size);
		return this;
	}
	@Field(4) 
	public int used() {
		return this.io.getIntField(this, 4);
	}
	@Field(4) 
	public face_cache used(int used) {
		this.io.setIntField(this, 4, used);
		return this;
	}
	/**
	 * Flag indicating that attributes of the `menu' face have been<br>
	 * changed.
	 */
	@Field(5) 
	@Bits(1) 
	public int menu_face_changed_p() {
		return this.io.getIntField(this, 5);
	}
	/**
	 * Flag indicating that attributes of the `menu' face have been<br>
	 * changed.
	 */
	@Field(5) 
	@Bits(1) 
	public face_cache menu_face_changed_p(int menu_face_changed_p) {
		this.io.setIntField(this, 5, menu_face_changed_p);
		return this;
	}
}
