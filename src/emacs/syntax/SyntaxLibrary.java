package emacs.syntax;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>syntax</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("syntax") 
@Runtime(CRuntime.class) 
public class SyntaxLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : syntax.h:22</i>
	 */
	public enum syntaxcode implements IntValuedEnum<syntaxcode > {
		/// for a whitespace character
		Swhitespace(0),
		/// for random punctuation characters
		Spunct(1),
		/// for a word constituent
		Sword(2),
		/// symbol constituent but not word constituent
		Ssymbol(3),
		/// for a beginning delimiter
		Sopen(4),
		/// for an ending delimiter
		Sclose(5),
		/// for a prefix character like Lisp '
		Squote(6),
		/// for a string-grouping character like Lisp "
		Sstring(7),
		/// for delimiters like $ in Tex.
		Smath(8),
		/// for a character that begins a C-style escape
		Sescape(9),
		/// for a character that quotes the following character
		Scharquote(10),
		/// for a comment-starting character
		Scomment(11),
		/// for a comment-ending character
		Sendcomment(12),
		/// use the standard syntax table for this character
		Sinherit(13),
		/**
		 * Starts/ends comment which is delimited on the<br>
		 * other side by any char with the same syntaxcode.
		 */
		Scomment_fence(14),
		/**
		 * Starts/ends string which is delimited on the<br>
		 * other side by any char with the same syntaxcode.
		 */
		Sstring_fence(15),
		/// Upper bound on codes that are meaningful
		Smax(16);
		syntaxcode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<syntaxcode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<syntaxcode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : syntax.h</i><br>
	 * = 0
	 */
	/**
	 * Original signature : <code>void update_syntax_table(int)</code><br>
	 * <i>native declaration : syntax.h:1</i>
	 */
	public static native void update_syntax_table(int int1);
	/**
	 * Whether the syntax of the character C has the prefix flag set.<br>
	 * Original signature : <code>int syntax_prefix_flag_p(int)</code><br>
	 * <i>native declaration : syntax.h:27</i>
	 */
	public static native int syntax_prefix_flag_p(int c);
	/**
	 * Original signature : <code>EMACS_INT scan_words(EMACS_INT, EMACS_INT)</code><br>
	 * <i>native declaration : syntax.h:54</i>
	 */
	public static native SyntaxLibrary.EMACS_INT scan_words(SyntaxLibrary.EMACS_INT EMACS_INT1, SyntaxLibrary.EMACS_INT EMACS_INT2);
	/// C type : extern unsigned char[400]
	@Array({400}) 
	public Pointer<Byte > syntax_spec_code() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("syntax").getSymbolPointer("syntax_spec_code").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[16]
	@Array({16}) 
	public Pointer<Byte > syntax_code_spec() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("syntax").getSymbolPointer("syntax_code_spec").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern gl_state_s
	public gl_state_s gl_state() {
		try {
			return (gl_state_s)BridJ.getNativeLibrary("syntax").getSymbolPointer("gl_state").as(gl_state_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern gl_state_s
	public SyntaxLibrary gl_state(gl_state_s gl_state) {
		try {
			{
				BridJ.getNativeLibrary("syntax").getSymbolPointer("gl_state").as(gl_state_s.class).set(gl_state);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface INTERVAL {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface EMACS_INT {
		
	};
}
