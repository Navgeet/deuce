package emacs.termopts;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>termopts</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("termopts") 
@Runtime(CRuntime.class) 
public class TermoptsLibrary {
	static {
		BridJ.register();
	}
	/// Nonzero means use ^S/^Q as cretinous flow control.
	public int flow_control() {
		try {
			return (int)BridJ.getNativeLibrary("termopts").getSymbolPointer("flow_control").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero means use ^S/^Q as cretinous flow control.
	public TermoptsLibrary flow_control(int flow_control) {
		try {
			{
				BridJ.getNativeLibrary("termopts").getSymbolPointer("flow_control").as(int.class).set(flow_control);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero means use interrupt-driven input.
	public int interrupt_input() {
		try {
			return (int)BridJ.getNativeLibrary("termopts").getSymbolPointer("interrupt_input").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero means use interrupt-driven input.
	public TermoptsLibrary interrupt_input(int interrupt_input) {
		try {
			{
				BridJ.getNativeLibrary("termopts").getSymbolPointer("interrupt_input").as(int.class).set(interrupt_input);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero while interrupts are temporarily deferred during redisplay.
	public int interrupts_deferred() {
		try {
			return (int)BridJ.getNativeLibrary("termopts").getSymbolPointer("interrupts_deferred").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero while interrupts are temporarily deferred during redisplay.
	public TermoptsLibrary interrupts_deferred(int interrupts_deferred) {
		try {
			{
				BridJ.getNativeLibrary("termopts").getSymbolPointer("interrupts_deferred").as(int.class).set(interrupts_deferred);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Terminal has meta key
	public int meta_key() {
		try {
			return (int)BridJ.getNativeLibrary("termopts").getSymbolPointer("meta_key").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Terminal has meta key
	public TermoptsLibrary meta_key(int meta_key) {
		try {
			{
				BridJ.getNativeLibrary("termopts").getSymbolPointer("meta_key").as(int.class).set(meta_key);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
}
