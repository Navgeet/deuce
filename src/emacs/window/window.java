package emacs.window;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : window.h:2353</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("window") 
public class window extends StructObject {
	public window() {
		super();
	}
	/**
	 * Glyph matrices.<br>
	 * C type : glyph_matrix*
	 */
	@Field(56) 
	public Pointer<glyph_matrix > current_matrix() {
		return this.io.getPointerField(this, 56);
	}
	/**
	 * Glyph matrices.<br>
	 * C type : glyph_matrix*
	 */
	@Field(56) 
	public window current_matrix(Pointer<glyph_matrix > current_matrix) {
		this.io.setPointerField(this, 56, current_matrix);
		return this;
	}
	/// C type : glyph_matrix*
	@Field(57) 
	public Pointer<glyph_matrix > desired_matrix() {
		return this.io.getPointerField(this, 57);
	}
	/// C type : glyph_matrix*
	@Field(57) 
	public window desired_matrix(Pointer<glyph_matrix > desired_matrix) {
		this.io.setPointerField(this, 57, desired_matrix);
		return this;
	}
	/**
	 * Scaling factor for the glyph_matrix size calculation in this window.<br>
	 * Used if window contains many small images or uses proportional fonts,<br>
	 * as the normal  may yield a matrix which is too small.
	 */
	@Field(58) 
	public int nrows_scale_factor() {
		return this.io.getIntField(this, 58);
	}
	/**
	 * Scaling factor for the glyph_matrix size calculation in this window.<br>
	 * Used if window contains many small images or uses proportional fonts,<br>
	 * as the normal  may yield a matrix which is too small.
	 */
	@Field(58) 
	public window nrows_scale_factor(int nrows_scale_factor) {
		this.io.setIntField(this, 58, nrows_scale_factor);
		return this;
	}
	/**
	 * Scaling factor for the glyph_matrix size calculation in this window.<br>
	 * Used if window contains many small images or uses proportional fonts,<br>
	 * as the normal  may yield a matrix which is too small.
	 */
	@Field(59) 
	public int ncols_scale_factor() {
		return this.io.getIntField(this, 59);
	}
	/**
	 * Scaling factor for the glyph_matrix size calculation in this window.<br>
	 * Used if window contains many small images or uses proportional fonts,<br>
	 * as the normal  may yield a matrix which is too small.
	 */
	@Field(59) 
	public window ncols_scale_factor(int ncols_scale_factor) {
		this.io.setIntField(this, 59, ncols_scale_factor);
		return this;
	}
	/**
	 * Cursor position as of last update that completed without<br>
	 * pause.  This is the position of last_point.<br>
	 * C type : cursor_pos
	 */
	@Field(60) 
	public cursor_pos last_cursor() {
		return this.io.getNativeObjectField(this, 60);
	}
	/**
	 * Cursor position as of last update that completed without<br>
	 * pause.  This is the position of last_point.<br>
	 * C type : cursor_pos
	 */
	@Field(60) 
	public window last_cursor(cursor_pos last_cursor) {
		this.io.setNativeObjectField(this, 60, last_cursor);
		return this;
	}
	/**
	 * Intended cursor position.   This is a position within the<br>
	 * glyph matrix.<br>
	 * C type : cursor_pos
	 */
	@Field(61) 
	public cursor_pos cursor() {
		return this.io.getNativeObjectField(this, 61);
	}
	/**
	 * Intended cursor position.   This is a position within the<br>
	 * glyph matrix.<br>
	 * C type : cursor_pos
	 */
	@Field(61) 
	public window cursor(cursor_pos cursor) {
		this.io.setNativeObjectField(this, 61, cursor);
		return this;
	}
	/**
	 * Where the cursor actually is.<br>
	 * C type : cursor_pos
	 */
	@Field(62) 
	public cursor_pos phys_cursor() {
		return this.io.getNativeObjectField(this, 62);
	}
	/**
	 * Where the cursor actually is.<br>
	 * C type : cursor_pos
	 */
	@Field(62) 
	public window phys_cursor(cursor_pos phys_cursor) {
		this.io.setNativeObjectField(this, 62, phys_cursor);
		return this;
	}
	/**
	 * Cursor type and width of last cursor drawn on the window.<br>
	 * Used for X and w32 frames; -1 initially.
	 */
	@Field(63) 
	public int phys_cursor_type() {
		return this.io.getIntField(this, 63);
	}
	/**
	 * Cursor type and width of last cursor drawn on the window.<br>
	 * Used for X and w32 frames; -1 initially.
	 */
	@Field(63) 
	public window phys_cursor_type(int phys_cursor_type) {
		this.io.setIntField(this, 63, phys_cursor_type);
		return this;
	}
	/**
	 * Cursor type and width of last cursor drawn on the window.<br>
	 * Used for X and w32 frames; -1 initially.
	 */
	@Field(64) 
	public int phys_cursor_width() {
		return this.io.getIntField(this, 64);
	}
	/**
	 * Cursor type and width of last cursor drawn on the window.<br>
	 * Used for X and w32 frames; -1 initially.
	 */
	@Field(64) 
	public window phys_cursor_width(int phys_cursor_width) {
		this.io.setIntField(this, 64, phys_cursor_width);
		return this;
	}
	/// This is handy for undrawing the cursor.
	@Field(65) 
	public int phys_cursor_ascent() {
		return this.io.getIntField(this, 65);
	}
	/// This is handy for undrawing the cursor.
	@Field(65) 
	public window phys_cursor_ascent(int phys_cursor_ascent) {
		this.io.setIntField(this, 65, phys_cursor_ascent);
		return this;
	}
	/// This is handy for undrawing the cursor.
	@Field(66) 
	public int phys_cursor_height() {
		return this.io.getIntField(this, 66);
	}
	/// This is handy for undrawing the cursor.
	@Field(66) 
	public window phys_cursor_height(int phys_cursor_height) {
		this.io.setIntField(this, 66, phys_cursor_height);
		return this;
	}
	/**
	 * Non-zero means the cursor is currently displayed.  This can be<br>
	 * set to zero by functions overpainting the cursor image.
	 */
	@Field(67) 
	@Bits(1) 
	public int phys_cursor_on_p() {
		return this.io.getIntField(this, 67);
	}
	/**
	 * Non-zero means the cursor is currently displayed.  This can be<br>
	 * set to zero by functions overpainting the cursor image.
	 */
	@Field(67) 
	@Bits(1) 
	public window phys_cursor_on_p(int phys_cursor_on_p) {
		this.io.setIntField(this, 67, phys_cursor_on_p);
		return this;
	}
	/**
	 * 0 means cursor is logically on, 1 means it's off.  Used for<br>
	 * blinking cursor.
	 */
	@Field(68) 
	@Bits(1) 
	public int cursor_off_p() {
		return this.io.getIntField(this, 68);
	}
	/**
	 * 0 means cursor is logically on, 1 means it's off.  Used for<br>
	 * blinking cursor.
	 */
	@Field(68) 
	@Bits(1) 
	public window cursor_off_p(int cursor_off_p) {
		this.io.setIntField(this, 68, cursor_off_p);
		return this;
	}
	/// Value of cursor_off_p as of the last redisplay.
	@Field(69) 
	@Bits(1) 
	public int last_cursor_off_p() {
		return this.io.getIntField(this, 69);
	}
	/// Value of cursor_off_p as of the last redisplay.
	@Field(69) 
	@Bits(1) 
	public window last_cursor_off_p(int last_cursor_off_p) {
		this.io.setIntField(this, 69, last_cursor_off_p);
		return this;
	}
	/**
	 * 1 means desired matrix has been build and window must be<br>
	 * updated in update_frame.
	 */
	@Field(70) 
	@Bits(1) 
	public int must_be_updated_p() {
		return this.io.getIntField(this, 70);
	}
	/**
	 * 1 means desired matrix has been build and window must be<br>
	 * updated in update_frame.
	 */
	@Field(70) 
	@Bits(1) 
	public window must_be_updated_p(int must_be_updated_p) {
		this.io.setIntField(this, 70, must_be_updated_p);
		return this;
	}
	/**
	 * Flag indicating that this window is not a real one.<br>
	 * Currently only used for menu bar windows of frames.
	 */
	@Field(71) 
	@Bits(1) 
	public int pseudo_window_p() {
		return this.io.getIntField(this, 71);
	}
	/**
	 * Flag indicating that this window is not a real one.<br>
	 * Currently only used for menu bar windows of frames.
	 */
	@Field(71) 
	@Bits(1) 
	public window pseudo_window_p(int pseudo_window_p) {
		this.io.setIntField(this, 71, pseudo_window_p);
		return this;
	}
	/**
	 * 1 means the window start of this window is frozen and may not<br>
	 * be changed during redisplay.  If point is not in the window,<br>
	 * accept that.
	 */
	@Field(72) 
	@Bits(1) 
	public int frozen_window_start_p() {
		return this.io.getIntField(this, 72);
	}
	/**
	 * 1 means the window start of this window is frozen and may not<br>
	 * be changed during redisplay.  If point is not in the window,<br>
	 * accept that.
	 */
	@Field(72) 
	@Bits(1) 
	public window frozen_window_start_p(int frozen_window_start_p) {
		this.io.setIntField(this, 72, frozen_window_start_p);
		return this;
	}
	/**
	 * Amount by which lines of this window are scrolled in<br>
	 * y-direction (smooth scrolling).
	 */
	@Field(73) 
	public int vscroll() {
		return this.io.getIntField(this, 73);
	}
	/**
	 * Amount by which lines of this window are scrolled in<br>
	 * y-direction (smooth scrolling).
	 */
	@Field(73) 
	public window vscroll(int vscroll) {
		this.io.setIntField(this, 73, vscroll);
		return this;
	}
	/**
	 * Z_BYTE - the buffer position of the last glyph in the current matrix<br>
	 * of W.  Only valid if WINDOW_END_VALID is not nil.
	 */
	@Field(74) 
	public int window_end_bytepos() {
		return this.io.getIntField(this, 74);
	}
	/**
	 * Z_BYTE - the buffer position of the last glyph in the current matrix<br>
	 * of W.  Only valid if WINDOW_END_VALID is not nil.
	 */
	@Field(74) 
	public window window_end_bytepos(int window_end_bytepos) {
		this.io.setIntField(this, 74, window_end_bytepos);
		return this;
	}
}
