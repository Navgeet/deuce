package emacs.window;
import emacs.window.WindowLibrary.Lisp_Object;
import emacs.window.WindowLibrary.face_box_type;
import emacs.window.WindowLibrary.font;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Bits;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : dispextern.h:767</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("window") 
public class face extends StructObject {
	public face() {
		super();
	}
	/**
	 * The id of this face.  The id equals the index of this face in the<br>
	 * vector faces_by_id of its face cache.
	 */
	@Field(0) 
	public int id() {
		return this.io.getIntField(this, 0);
	}
	/**
	 * The id of this face.  The id equals the index of this face in the<br>
	 * vector faces_by_id of its face cache.
	 */
	@Field(0) 
	public face id(int id) {
		this.io.setIntField(this, 0, id);
		return this;
	}
	/// Dummy.
	@Ptr 
	@Field(1) 
	public long stipple() {
		return this.io.getSizeTField(this, 1);
	}
	/// Dummy.
	@Ptr 
	@Field(1) 
	public face stipple(long stipple) {
		this.io.setSizeTField(this, 1, stipple);
		return this;
	}
	/**
	 * Pixel value of foreground color for X frames.  Color index<br>
	 * for tty frames.
	 */
	@CLong 
	@Field(2) 
	public long foreground() {
		return this.io.getCLongField(this, 2);
	}
	/**
	 * Pixel value of foreground color for X frames.  Color index<br>
	 * for tty frames.
	 */
	@CLong 
	@Field(2) 
	public face foreground(long foreground) {
		this.io.setCLongField(this, 2, foreground);
		return this;
	}
	/// Pixel value or color index of background color.
	@CLong 
	@Field(3) 
	public long background() {
		return this.io.getCLongField(this, 3);
	}
	/// Pixel value or color index of background color.
	@CLong 
	@Field(3) 
	public face background(long background) {
		this.io.setCLongField(this, 3, background);
		return this;
	}
	/// Pixel value or color index of underline color.
	@CLong 
	@Field(4) 
	public long underline_color() {
		return this.io.getCLongField(this, 4);
	}
	/// Pixel value or color index of underline color.
	@CLong 
	@Field(4) 
	public face underline_color(long underline_color) {
		this.io.setCLongField(this, 4, underline_color);
		return this;
	}
	/**
	 * Pixel value or color index of overlined, strike-through, or box<br>
	 * color.
	 */
	@CLong 
	@Field(5) 
	public long overline_color() {
		return this.io.getCLongField(this, 5);
	}
	/**
	 * Pixel value or color index of overlined, strike-through, or box<br>
	 * color.
	 */
	@CLong 
	@Field(5) 
	public face overline_color(long overline_color) {
		this.io.setCLongField(this, 5, overline_color);
		return this;
	}
	@CLong 
	@Field(6) 
	public long strike_through_color() {
		return this.io.getCLongField(this, 6);
	}
	@CLong 
	@Field(6) 
	public face strike_through_color(long strike_through_color) {
		this.io.setCLongField(this, 6, strike_through_color);
		return this;
	}
	@CLong 
	@Field(7) 
	public long box_color() {
		return this.io.getCLongField(this, 7);
	}
	@CLong 
	@Field(7) 
	public face box_color(long box_color) {
		this.io.setCLongField(this, 7, box_color);
		return this;
	}
	/// C type : font*
	@Field(8) 
	public Pointer<font > font() {
		return this.io.getPointerField(this, 8);
	}
	/// C type : font*
	@Field(8) 
	public face font(Pointer<font > font) {
		this.io.setPointerField(this, 8, font);
		return this;
	}
	/**
	 * Fontset ID if for this face's fontset.  Non-ASCII faces derived<br>
	 * from the same ASCII face have the same fontset.
	 */
	@Field(9) 
	public int fontset() {
		return this.io.getIntField(this, 9);
	}
	/**
	 * Fontset ID if for this face's fontset.  Non-ASCII faces derived<br>
	 * from the same ASCII face have the same fontset.
	 */
	@Field(9) 
	public face fontset(int fontset) {
		this.io.setIntField(this, 9, fontset);
		return this;
	}
	/// Pixmap width and height.
	@Field(10) 
	public int pixmap_w() {
		return this.io.getIntField(this, 10);
	}
	/// Pixmap width and height.
	@Field(10) 
	public face pixmap_w(int pixmap_w) {
		this.io.setIntField(this, 10, pixmap_w);
		return this;
	}
	/// Pixmap width and height.
	@Field(11) 
	public int pixmap_h() {
		return this.io.getIntField(this, 11);
	}
	/// Pixmap width and height.
	@Field(11) 
	public face pixmap_h(int pixmap_h) {
		this.io.setIntField(this, 11, pixmap_h);
		return this;
	}
	/**
	 * Non-zero means characters in this face have a box that thickness<br>
	 * around them.  If it is negative, the absolute value indicates the<br>
	 * thickness, and the horizontal lines of box (top and bottom) are<br>
	 * drawn inside of characters glyph area.  The vertical lines of box<br>
	 * (left and right) are drawn as the same way as the case that this<br>
	 * value is positive.
	 */
	@Field(12) 
	public int box_line_width() {
		return this.io.getIntField(this, 12);
	}
	/**
	 * Non-zero means characters in this face have a box that thickness<br>
	 * around them.  If it is negative, the absolute value indicates the<br>
	 * thickness, and the horizontal lines of box (top and bottom) are<br>
	 * drawn inside of characters glyph area.  The vertical lines of box<br>
	 * (left and right) are drawn as the same way as the case that this<br>
	 * value is positive.
	 */
	@Field(12) 
	public face box_line_width(int box_line_width) {
		this.io.setIntField(this, 12, box_line_width);
		return this;
	}
	/**
	 * Type of box drawn.  A value of FACE_NO_BOX means no box is drawn<br>
	 * around text in this face.  A value of FACE_SIMPLE_BOX means a box<br>
	 * of width box_line_width is drawn in color box_color.  A value of<br>
	 * FACE_RAISED_BOX or FACE_SUNKEN_BOX means a 3D box is drawn with<br>
	 * shadow colors derived from the background color of the face.<br>
	 * C type : face_box_type
	 */
	@Field(13) 
	public IntValuedEnum<face_box_type > box() {
		return this.io.getEnumField(this, 13);
	}
	/**
	 * Type of box drawn.  A value of FACE_NO_BOX means no box is drawn<br>
	 * around text in this face.  A value of FACE_SIMPLE_BOX means a box<br>
	 * of width box_line_width is drawn in color box_color.  A value of<br>
	 * FACE_RAISED_BOX or FACE_SUNKEN_BOX means a 3D box is drawn with<br>
	 * shadow colors derived from the background color of the face.<br>
	 * C type : face_box_type
	 */
	@Field(13) 
	public face box(IntValuedEnum<face_box_type > box) {
		this.io.setEnumField(this, 13, box);
		return this;
	}
	/**
	 * If `box' above specifies a 3D type, 1 means use box_color for<br>
	 * drawing shadows.
	 */
	@Field(14) 
	@Bits(1) 
	public int use_box_color_for_shadows_p() {
		return this.io.getIntField(this, 14);
	}
	/**
	 * If `box' above specifies a 3D type, 1 means use box_color for<br>
	 * drawing shadows.
	 */
	@Field(14) 
	@Bits(1) 
	public face use_box_color_for_shadows_p(int use_box_color_for_shadows_p) {
		this.io.setIntField(this, 14, use_box_color_for_shadows_p);
		return this;
	}
	/**
	 * Non-zero if text in this face should be underlined, overlined,<br>
	 * strike-through or have a box drawn around it.
	 */
	@Field(15) 
	@Bits(1) 
	public int underline_p() {
		return this.io.getIntField(this, 15);
	}
	/**
	 * Non-zero if text in this face should be underlined, overlined,<br>
	 * strike-through or have a box drawn around it.
	 */
	@Field(15) 
	@Bits(1) 
	public face underline_p(int underline_p) {
		this.io.setIntField(this, 15, underline_p);
		return this;
	}
	@Field(16) 
	@Bits(1) 
	public int overline_p() {
		return this.io.getIntField(this, 16);
	}
	@Field(16) 
	@Bits(1) 
	public face overline_p(int overline_p) {
		this.io.setIntField(this, 16, overline_p);
		return this;
	}
	@Field(17) 
	@Bits(1) 
	public int strike_through_p() {
		return this.io.getIntField(this, 17);
	}
	@Field(17) 
	@Bits(1) 
	public face strike_through_p(int strike_through_p) {
		this.io.setIntField(this, 17, strike_through_p);
		return this;
	}
	/**
	 * 1 means that the colors specified for this face could not be<br>
	 * loaded, and were replaced by default colors, so they shouldn't be<br>
	 * freed.
	 */
	@Field(18) 
	@Bits(1) 
	public int foreground_defaulted_p() {
		return this.io.getIntField(this, 18);
	}
	/**
	 * 1 means that the colors specified for this face could not be<br>
	 * loaded, and were replaced by default colors, so they shouldn't be<br>
	 * freed.
	 */
	@Field(18) 
	@Bits(1) 
	public face foreground_defaulted_p(int foreground_defaulted_p) {
		this.io.setIntField(this, 18, foreground_defaulted_p);
		return this;
	}
	@Field(19) 
	@Bits(1) 
	public int background_defaulted_p() {
		return this.io.getIntField(this, 19);
	}
	@Field(19) 
	@Bits(1) 
	public face background_defaulted_p(int background_defaulted_p) {
		this.io.setIntField(this, 19, background_defaulted_p);
		return this;
	}
	/**
	 * 1 means that either no color is specified for underlining or that<br>
	 * the specified color couldn't be loaded.  Use the foreground<br>
	 * color when drawing in that case.
	 */
	@Field(20) 
	@Bits(1) 
	public int underline_defaulted_p() {
		return this.io.getIntField(this, 20);
	}
	/**
	 * 1 means that either no color is specified for underlining or that<br>
	 * the specified color couldn't be loaded.  Use the foreground<br>
	 * color when drawing in that case.
	 */
	@Field(20) 
	@Bits(1) 
	public face underline_defaulted_p(int underline_defaulted_p) {
		this.io.setIntField(this, 20, underline_defaulted_p);
		return this;
	}
	/**
	 * 1 means that either no color is specified for the corresponding<br>
	 * attribute or that the specified color couldn't be loaded.<br>
	 * Use the foreground color when drawing in that case.
	 */
	@Field(21) 
	@Bits(1) 
	public int overline_color_defaulted_p() {
		return this.io.getIntField(this, 21);
	}
	/**
	 * 1 means that either no color is specified for the corresponding<br>
	 * attribute or that the specified color couldn't be loaded.<br>
	 * Use the foreground color when drawing in that case.
	 */
	@Field(21) 
	@Bits(1) 
	public face overline_color_defaulted_p(int overline_color_defaulted_p) {
		this.io.setIntField(this, 21, overline_color_defaulted_p);
		return this;
	}
	@Field(22) 
	@Bits(1) 
	public int strike_through_color_defaulted_p() {
		return this.io.getIntField(this, 22);
	}
	@Field(22) 
	@Bits(1) 
	public face strike_through_color_defaulted_p(int strike_through_color_defaulted_p) {
		this.io.setIntField(this, 22, strike_through_color_defaulted_p);
		return this;
	}
	@Field(23) 
	@Bits(1) 
	public int box_color_defaulted_p() {
		return this.io.getIntField(this, 23);
	}
	@Field(23) 
	@Bits(1) 
	public face box_color_defaulted_p(int box_color_defaulted_p) {
		this.io.setIntField(this, 23, box_color_defaulted_p);
		return this;
	}
	/**
	 * TTY appearances.  Blinking is not yet implemented.  Colors are<br>
	 * found in `lface' with empty color string meaning the default<br>
	 * color of the TTY.
	 */
	@Field(24) 
	@Bits(1) 
	public int tty_bold_p() {
		return this.io.getIntField(this, 24);
	}
	/**
	 * TTY appearances.  Blinking is not yet implemented.  Colors are<br>
	 * found in `lface' with empty color string meaning the default<br>
	 * color of the TTY.
	 */
	@Field(24) 
	@Bits(1) 
	public face tty_bold_p(int tty_bold_p) {
		this.io.setIntField(this, 24, tty_bold_p);
		return this;
	}
	@Field(25) 
	@Bits(1) 
	public int tty_dim_p() {
		return this.io.getIntField(this, 25);
	}
	@Field(25) 
	@Bits(1) 
	public face tty_dim_p(int tty_dim_p) {
		this.io.setIntField(this, 25, tty_dim_p);
		return this;
	}
	@Field(26) 
	@Bits(1) 
	public int tty_underline_p() {
		return this.io.getIntField(this, 26);
	}
	@Field(26) 
	@Bits(1) 
	public face tty_underline_p(int tty_underline_p) {
		this.io.setIntField(this, 26, tty_underline_p);
		return this;
	}
	@Field(27) 
	@Bits(1) 
	public int tty_alt_charset_p() {
		return this.io.getIntField(this, 27);
	}
	@Field(27) 
	@Bits(1) 
	public face tty_alt_charset_p(int tty_alt_charset_p) {
		this.io.setIntField(this, 27, tty_alt_charset_p);
		return this;
	}
	@Field(28) 
	@Bits(1) 
	public int tty_reverse_p() {
		return this.io.getIntField(this, 28);
	}
	@Field(28) 
	@Bits(1) 
	public face tty_reverse_p(int tty_reverse_p) {
		this.io.setIntField(this, 28, tty_reverse_p);
		return this;
	}
	@Field(29) 
	@Bits(1) 
	public int tty_blinking_p() {
		return this.io.getIntField(this, 29);
	}
	@Field(29) 
	@Bits(1) 
	public face tty_blinking_p(int tty_blinking_p) {
		this.io.setIntField(this, 29, tty_blinking_p);
		return this;
	}
	/**
	 * 1 means that colors of this face may not be freed because they<br>
	 * have been copied bitwise from a base face (see<br>
	 * realize_x_face).
	 */
	@Field(30) 
	@Bits(1) 
	public int colors_copied_bitwise_p() {
		return this.io.getIntField(this, 30);
	}
	/**
	 * 1 means that colors of this face may not be freed because they<br>
	 * have been copied bitwise from a base face (see<br>
	 * realize_x_face).
	 */
	@Field(30) 
	@Bits(1) 
	public face colors_copied_bitwise_p(int colors_copied_bitwise_p) {
		this.io.setIntField(this, 30, colors_copied_bitwise_p);
		return this;
	}
	/// If non-zero, use overstrike (to simulate bold-face).
	@Field(31) 
	@Bits(1) 
	public int overstrike() {
		return this.io.getIntField(this, 31);
	}
	/// If non-zero, use overstrike (to simulate bold-face).
	@Field(31) 
	@Bits(1) 
	public face overstrike(int overstrike) {
		this.io.setIntField(this, 31, overstrike);
		return this;
	}
	/**
	 * The Lisp face attributes this face realizes.  All attributes<br>
	 * in this vector are non-nil.<br>
	 * C type : Lisp_Object[LFACE_VECTOR_SIZE]
	 */
	@Array({(int)emacs.window.WindowLibrary.lface_attribute_index.LFACE_VECTOR_SIZE.value()}) 
	@Field(32) 
	public Pointer<Lisp_Object > lface() {
		return this.io.getPointerField(this, 32);
	}
	/// The hash value of this face.
	@Field(33) 
	public int hash() {
		return this.io.getIntField(this, 33);
	}
	/// The hash value of this face.
	@Field(33) 
	public face hash(int hash) {
		this.io.setIntField(this, 33, hash);
		return this;
	}
	/**
	 * Next and previous face in hash collision list of face cache.<br>
	 * C type : face*
	 */
	@Field(34) 
	public Pointer<face > next() {
		return this.io.getPointerField(this, 34);
	}
	/**
	 * Next and previous face in hash collision list of face cache.<br>
	 * C type : face*
	 */
	@Field(34) 
	public face next(Pointer<face > next) {
		this.io.setPointerField(this, 34, next);
		return this;
	}
	/**
	 * Next and previous face in hash collision list of face cache.<br>
	 * C type : face*
	 */
	@Field(35) 
	public Pointer<face > prev() {
		return this.io.getPointerField(this, 35);
	}
	/**
	 * Next and previous face in hash collision list of face cache.<br>
	 * C type : face*
	 */
	@Field(35) 
	public face prev(Pointer<face > prev) {
		this.io.setPointerField(this, 35, prev);
		return this;
	}
	/**
	 * If this face is an ASCII face, this points to this face itself.<br>
	 * Otherwise, this points to an ASCII face that has the same<br>
	 * attributes except the font.<br>
	 * C type : face*
	 */
	@Field(36) 
	public Pointer<face > ascii_face() {
		return this.io.getPointerField(this, 36);
	}
	/**
	 * If this face is an ASCII face, this points to this face itself.<br>
	 * Otherwise, this points to an ASCII face that has the same<br>
	 * attributes except the font.<br>
	 * C type : face*
	 */
	@Field(36) 
	public face ascii_face(Pointer<face > ascii_face) {
		this.io.setPointerField(this, 36, ascii_face);
		return this;
	}
	/**
	 * Extra member that a font-driver uses privately.<br>
	 * C type : void*
	 */
	@Field(37) 
	public Pointer<? > extra() {
		return this.io.getPointerField(this, 37);
	}
	/**
	 * Extra member that a font-driver uses privately.<br>
	 * C type : void*
	 */
	@Field(37) 
	public face extra(Pointer<? > extra) {
		this.io.setPointerField(this, 37, extra);
		return this;
	}
}
