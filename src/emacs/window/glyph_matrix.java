package emacs.window;
import emacs.window.WindowLibrary.buffer;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : dispextern.h:331</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("window") 
public class glyph_matrix extends StructObject {
	public glyph_matrix() {
		super();
	}
	/**
	 * The pool from which glyph memory is allocated, if any.  This is<br>
	 * null for frame matrices and for window matrices managing their<br>
	 * own storage.<br>
	 * C type : glyph_pool*
	 */
	@Field(0) 
	public Pointer<glyph_pool > pool() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * The pool from which glyph memory is allocated, if any.  This is<br>
	 * null for frame matrices and for window matrices managing their<br>
	 * own storage.<br>
	 * C type : glyph_pool*
	 */
	@Field(0) 
	public glyph_matrix pool(Pointer<glyph_pool > pool) {
		this.io.setPointerField(this, 0, pool);
		return this;
	}
	/**
	 * Vector of glyph row structures.  The row at nrows - 1 is reserved<br>
	 * for the mode line.<br>
	 * C type : glyph_row*
	 */
	@Field(1) 
	public Pointer<glyph_row > rows() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Vector of glyph row structures.  The row at nrows - 1 is reserved<br>
	 * for the mode line.<br>
	 * C type : glyph_row*
	 */
	@Field(1) 
	public glyph_matrix rows(Pointer<glyph_row > rows) {
		this.io.setPointerField(this, 1, rows);
		return this;
	}
	/// Number of elements allocated for the vector rows above.
	@Ptr 
	@Field(2) 
	public long rows_allocated() {
		return this.io.getSizeTField(this, 2);
	}
	/// Number of elements allocated for the vector rows above.
	@Ptr 
	@Field(2) 
	public glyph_matrix rows_allocated(long rows_allocated) {
		this.io.setSizeTField(this, 2, rows_allocated);
		return this;
	}
	/**
	 * The number of rows used by the window if all lines were displayed<br>
	 * with the smallest possible character height.
	 */
	@Field(3) 
	public int nrows() {
		return this.io.getIntField(this, 3);
	}
	/**
	 * The number of rows used by the window if all lines were displayed<br>
	 * with the smallest possible character height.
	 */
	@Field(3) 
	public glyph_matrix nrows(int nrows) {
		this.io.setIntField(this, 3, nrows);
		return this;
	}
	/**
	 * Origin within the frame matrix if this is a window matrix on a<br>
	 * frame having a frame matrix.  Both values are zero for<br>
	 * window-based redisplay.
	 */
	@Field(4) 
	public int matrix_x() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * Origin within the frame matrix if this is a window matrix on a<br>
	 * frame having a frame matrix.  Both values are zero for<br>
	 * window-based redisplay.
	 */
	@Field(4) 
	public glyph_matrix matrix_x(int matrix_x) {
		this.io.setIntField(this, 4, matrix_x);
		return this;
	}
	/**
	 * Origin within the frame matrix if this is a window matrix on a<br>
	 * frame having a frame matrix.  Both values are zero for<br>
	 * window-based redisplay.
	 */
	@Field(5) 
	public int matrix_y() {
		return this.io.getIntField(this, 5);
	}
	/**
	 * Origin within the frame matrix if this is a window matrix on a<br>
	 * frame having a frame matrix.  Both values are zero for<br>
	 * window-based redisplay.
	 */
	@Field(5) 
	public glyph_matrix matrix_y(int matrix_y) {
		this.io.setIntField(this, 5, matrix_y);
		return this;
	}
	/// Width and height of the matrix in columns and rows.
	@Field(6) 
	public int matrix_w() {
		return this.io.getIntField(this, 6);
	}
	/// Width and height of the matrix in columns and rows.
	@Field(6) 
	public glyph_matrix matrix_w(int matrix_w) {
		this.io.setIntField(this, 6, matrix_w);
		return this;
	}
	/// Width and height of the matrix in columns and rows.
	@Field(7) 
	public int matrix_h() {
		return this.io.getIntField(this, 7);
	}
	/// Width and height of the matrix in columns and rows.
	@Field(7) 
	public glyph_matrix matrix_h(int matrix_h) {
		this.io.setIntField(this, 7, matrix_h);
		return this;
	}
	/**
	 * If this structure describes a window matrix of window W,<br>
	 * window_left_col is the value of W->left_col, window_top_line the<br>
	 * value of W->top_line, window_height and window_width are width and<br>
	 * height of W, as returned by window_box, and window_vscroll is the<br>
	 * value of W->vscroll at the time the matrix was last adjusted.<br>
	 * Only set for window-based redisplay.
	 */
	@Field(8) 
	public int window_left_col() {
		return this.io.getIntField(this, 8);
	}
	/**
	 * If this structure describes a window matrix of window W,<br>
	 * window_left_col is the value of W->left_col, window_top_line the<br>
	 * value of W->top_line, window_height and window_width are width and<br>
	 * height of W, as returned by window_box, and window_vscroll is the<br>
	 * value of W->vscroll at the time the matrix was last adjusted.<br>
	 * Only set for window-based redisplay.
	 */
	@Field(8) 
	public glyph_matrix window_left_col(int window_left_col) {
		this.io.setIntField(this, 8, window_left_col);
		return this;
	}
	/**
	 * If this structure describes a window matrix of window W,<br>
	 * window_left_col is the value of W->left_col, window_top_line the<br>
	 * value of W->top_line, window_height and window_width are width and<br>
	 * height of W, as returned by window_box, and window_vscroll is the<br>
	 * value of W->vscroll at the time the matrix was last adjusted.<br>
	 * Only set for window-based redisplay.
	 */
	@Field(9) 
	public int window_top_line() {
		return this.io.getIntField(this, 9);
	}
	/**
	 * If this structure describes a window matrix of window W,<br>
	 * window_left_col is the value of W->left_col, window_top_line the<br>
	 * value of W->top_line, window_height and window_width are width and<br>
	 * height of W, as returned by window_box, and window_vscroll is the<br>
	 * value of W->vscroll at the time the matrix was last adjusted.<br>
	 * Only set for window-based redisplay.
	 */
	@Field(9) 
	public glyph_matrix window_top_line(int window_top_line) {
		this.io.setIntField(this, 9, window_top_line);
		return this;
	}
	@Field(10) 
	public int window_height() {
		return this.io.getIntField(this, 10);
	}
	@Field(10) 
	public glyph_matrix window_height(int window_height) {
		this.io.setIntField(this, 10, window_height);
		return this;
	}
	@Field(11) 
	public int window_width() {
		return this.io.getIntField(this, 11);
	}
	@Field(11) 
	public glyph_matrix window_width(int window_width) {
		this.io.setIntField(this, 11, window_width);
		return this;
	}
	@Field(12) 
	public int window_vscroll() {
		return this.io.getIntField(this, 12);
	}
	@Field(12) 
	public glyph_matrix window_vscroll(int window_vscroll) {
		this.io.setIntField(this, 12, window_vscroll);
		return this;
	}
	/**
	 * Number of glyphs reserved for left and right marginal areas when<br>
	 * the matrix was last adjusted.
	 */
	@Field(13) 
	public int left_margin_glyphs() {
		return this.io.getIntField(this, 13);
	}
	/**
	 * Number of glyphs reserved for left and right marginal areas when<br>
	 * the matrix was last adjusted.
	 */
	@Field(13) 
	public glyph_matrix left_margin_glyphs(int left_margin_glyphs) {
		this.io.setIntField(this, 13, left_margin_glyphs);
		return this;
	}
	/**
	 * Number of glyphs reserved for left and right marginal areas when<br>
	 * the matrix was last adjusted.
	 */
	@Field(14) 
	public int right_margin_glyphs() {
		return this.io.getIntField(this, 14);
	}
	/**
	 * Number of glyphs reserved for left and right marginal areas when<br>
	 * the matrix was last adjusted.
	 */
	@Field(14) 
	public glyph_matrix right_margin_glyphs(int right_margin_glyphs) {
		this.io.setIntField(this, 14, right_margin_glyphs);
		return this;
	}
	/**
	 * Flag indicating that scrolling should not be tried in<br>
	 * update_window.  This flag is set by functions like try_window_id<br>
	 * which do their own scrolling.
	 */
	@Field(15) 
	@Bits(1) 
	public int no_scrolling_p() {
		return this.io.getIntField(this, 15);
	}
	/**
	 * Flag indicating that scrolling should not be tried in<br>
	 * update_window.  This flag is set by functions like try_window_id<br>
	 * which do their own scrolling.
	 */
	@Field(15) 
	@Bits(1) 
	public glyph_matrix no_scrolling_p(int no_scrolling_p) {
		this.io.setIntField(this, 15, no_scrolling_p);
		return this;
	}
	/**
	 * Non-zero means window displayed in this matrix has a top mode<br>
	 * line.
	 */
	@Field(16) 
	@Bits(1) 
	public int header_line_p() {
		return this.io.getIntField(this, 16);
	}
	/**
	 * Non-zero means window displayed in this matrix has a top mode<br>
	 * line.
	 */
	@Field(16) 
	@Bits(1) 
	public glyph_matrix header_line_p(int header_line_p) {
		this.io.setIntField(this, 16, header_line_p);
		return this;
	}
	/**
	 * The buffer this matrix displays.  Set in<br>
	 * mark_window_display_accurate_1.<br>
	 * C type : buffer*
	 */
	@Field(17) 
	public Pointer<buffer > buffer() {
		return this.io.getPointerField(this, 17);
	}
	/**
	 * The buffer this matrix displays.  Set in<br>
	 * mark_window_display_accurate_1.<br>
	 * C type : buffer*
	 */
	@Field(17) 
	public glyph_matrix buffer(Pointer<buffer > buffer) {
		this.io.setPointerField(this, 17, buffer);
		return this;
	}
	/**
	 * Values of BEGV and ZV as of last redisplay.  Set in<br>
	 * mark_window_display_accurate_1.
	 */
	@Field(18) 
	public int begv() {
		return this.io.getIntField(this, 18);
	}
	/**
	 * Values of BEGV and ZV as of last redisplay.  Set in<br>
	 * mark_window_display_accurate_1.
	 */
	@Field(18) 
	public glyph_matrix begv(int begv) {
		this.io.setIntField(this, 18, begv);
		return this;
	}
	/**
	 * Values of BEGV and ZV as of last redisplay.  Set in<br>
	 * mark_window_display_accurate_1.
	 */
	@Field(19) 
	public int zv() {
		return this.io.getIntField(this, 19);
	}
	/**
	 * Values of BEGV and ZV as of last redisplay.  Set in<br>
	 * mark_window_display_accurate_1.
	 */
	@Field(19) 
	public glyph_matrix zv(int zv) {
		this.io.setIntField(this, 19, zv);
		return this;
	}
}
