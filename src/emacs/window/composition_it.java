package emacs.window;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * Iterator for composition (both for static and automatic).<br>
 * <i>native declaration : dispextern.h:1060</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("window") 
public class composition_it extends StructObject {
	public composition_it() {
		super();
	}
	/**
	 * ID number of the composition or glyph-string.  If negative, we<br>
	 * are not iterating over a composition now.
	 */
	@Ptr 
	@Field(1) 
	public long id() {
		return this.io.getSizeTField(this, 1);
	}
	/**
	 * ID number of the composition or glyph-string.  If negative, we<br>
	 * are not iterating over a composition now.
	 */
	@Ptr 
	@Field(1) 
	public composition_it id(long id) {
		this.io.setSizeTField(this, 1, id);
		return this;
	}
	/**
	 * If non-negative, character that triggers the automatic<br>
	 * composition at `stop_pos', and this is an automatic composition.<br>
	 * If negative, this is a static composition.  This is set to -2<br>
	 * temporarily if searching of composition reach a limit or a<br>
	 * newline.
	 */
	@Field(2) 
	public int ch() {
		return this.io.getIntField(this, 2);
	}
	/**
	 * If non-negative, character that triggers the automatic<br>
	 * composition at `stop_pos', and this is an automatic composition.<br>
	 * If negative, this is a static composition.  This is set to -2<br>
	 * temporarily if searching of composition reach a limit or a<br>
	 * newline.
	 */
	@Field(2) 
	public composition_it ch(int ch) {
		this.io.setIntField(this, 2, ch);
		return this;
	}
	/**
	 * If this is an automatic composition, index of a rule for making<br>
	 * the automatic composition.  Provided that ELT is an element of<br>
	 * Vcomposition_function_table for CH, (nth ELT RULE_IDX) is the<br>
	 * rule for the composition.
	 */
	@Field(3) 
	public int rule_idx() {
		return this.io.getIntField(this, 3);
	}
	/**
	 * If this is an automatic composition, index of a rule for making<br>
	 * the automatic composition.  Provided that ELT is an element of<br>
	 * Vcomposition_function_table for CH, (nth ELT RULE_IDX) is the<br>
	 * rule for the composition.
	 */
	@Field(3) 
	public composition_it rule_idx(int rule_idx) {
		this.io.setIntField(this, 3, rule_idx);
		return this;
	}
	/**
	 * If this is an automatic composition, how many characters to look<br>
	 * back from the position where a character triggering the<br>
	 * composition exists.
	 */
	@Field(4) 
	public int lookback() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * If this is an automatic composition, how many characters to look<br>
	 * back from the position where a character triggering the<br>
	 * composition exists.
	 */
	@Field(4) 
	public composition_it lookback(int lookback) {
		this.io.setIntField(this, 4, lookback);
		return this;
	}
	/// If non-negative, number of glyphs of the glyph-string.
	@Field(5) 
	public int nglyphs() {
		return this.io.getIntField(this, 5);
	}
	/// If non-negative, number of glyphs of the glyph-string.
	@Field(5) 
	public composition_it nglyphs(int nglyphs) {
		this.io.setIntField(this, 5, nglyphs);
		return this;
	}
	/**
	 * Nonzero iff the composition is created while buffer is scanned in<br>
	 * reverse order, and thus the grapheme clusters must be rendered<br>
	 * from the last to the first.
	 */
	@Field(6) 
	public int reversed_p() {
		return this.io.getIntField(this, 6);
	}
	/**
	 * Nonzero iff the composition is created while buffer is scanned in<br>
	 * reverse order, and thus the grapheme clusters must be rendered<br>
	 * from the last to the first.
	 */
	@Field(6) 
	public composition_it reversed_p(int reversed_p) {
		this.io.setIntField(this, 6, reversed_p);
		return this;
	}
	/// Number of characters and bytes of the current grapheme cluster.
	@Field(8) 
	public int nchars() {
		return this.io.getIntField(this, 8);
	}
	/// Number of characters and bytes of the current grapheme cluster.
	@Field(8) 
	public composition_it nchars(int nchars) {
		this.io.setIntField(this, 8, nchars);
		return this;
	}
	/// Number of characters and bytes of the current grapheme cluster.
	@Field(9) 
	public int nbytes() {
		return this.io.getIntField(this, 9);
	}
	/// Number of characters and bytes of the current grapheme cluster.
	@Field(9) 
	public composition_it nbytes(int nbytes) {
		this.io.setIntField(this, 9, nbytes);
		return this;
	}
	/// Indices of the glyphs for the current grapheme cluster.
	@Field(10) 
	public int from() {
		return this.io.getIntField(this, 10);
	}
	/// Indices of the glyphs for the current grapheme cluster.
	@Field(10) 
	public composition_it from(int from) {
		this.io.setIntField(this, 10, from);
		return this;
	}
	/// Indices of the glyphs for the current grapheme cluster.
	@Field(11) 
	public int to() {
		return this.io.getIntField(this, 11);
	}
	/// Indices of the glyphs for the current grapheme cluster.
	@Field(11) 
	public composition_it to(int to) {
		this.io.setIntField(this, 11, to);
		return this;
	}
	/**
	 * Width of the current grapheme cluster in units of pixels on a<br>
	 * graphic display and in units of canonical characters on a<br>
	 * terminal display.
	 */
	@Field(12) 
	public int width() {
		return this.io.getIntField(this, 12);
	}
	/**
	 * Width of the current grapheme cluster in units of pixels on a<br>
	 * graphic display and in units of canonical characters on a<br>
	 * terminal display.
	 */
	@Field(12) 
	public composition_it width(int width) {
		this.io.setIntField(this, 12, width);
		return this;
	}
}
