package emacs.w32font;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>w32font</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("w32font") 
@Runtime(CRuntime.class) 
public class W32fontLibrary {
	static {
		BridJ.register();
	}
	/// <i>native declaration : w32font.h</i>
	public static final int W32METRIC_SUCCESS = (int)1;
	/// <i>native declaration : w32font.h</i>
	public static final int NTMFLAGS_OPENTYPE = (int)(131072 | 262144);
	/// <i>native declaration : w32font.h</i>
	public static final int NTM_TYPE1 = (int)1048576;
	/// <i>native declaration : w32font.h</i>
	public static final int NTM_TT_OPENTYPE = (int)262144;
	/// <i>native declaration : w32font.h</i>
	public static final int CACHE_BLOCKSIZE = (int)128;
	/// <i>native declaration : w32font.h</i>
	public static final int W32METRIC_NO_ATTEMPT = (int)0;
	/// <i>native declaration : w32font.h</i>
	public static final int NTM_PS_OPENTYPE = (int)131072;
	/// <i>native declaration : w32font.h</i>
	public static final int W32METRIC_FAIL = (int)2;
	/**
	 * Original signature : <code>Lisp_Object w32font_get_cache(FRAME_PTR)</code><br>
	 * <i>native declaration : w32font.h:23</i>
	 */
	public static native W32fontLibrary.Lisp_Object w32font_get_cache(W32fontLibrary.FRAME_PTR fe);
	/**
	 * Original signature : <code>Lisp_Object w32font_list_internal(Lisp_Object, Lisp_Object, int)</code><br>
	 * <i>native declaration : w32font.h:25</i>
	 */
	public static native W32fontLibrary.Lisp_Object w32font_list_internal(W32fontLibrary.Lisp_Object frame, W32fontLibrary.Lisp_Object font_spec, int opentype_only);
	/**
	 * Original signature : <code>Lisp_Object w32font_match_internal(Lisp_Object, Lisp_Object, int)</code><br>
	 * <i>native declaration : w32font.h:27</i>
	 */
	public static native W32fontLibrary.Lisp_Object w32font_match_internal(W32fontLibrary.Lisp_Object frame, W32fontLibrary.Lisp_Object font_spec, int opentype_only);
	/**
	 * Original signature : <code>int w32font_open_internal(FRAME_PTR, Lisp_Object, int, Lisp_Object)</code><br>
	 * <i>native declaration : w32font.h:29</i>
	 */
	public static native int w32font_open_internal(W32fontLibrary.FRAME_PTR f, W32fontLibrary.Lisp_Object font_entity, int pixel_size, W32fontLibrary.Lisp_Object font_object);
	/**
	 * Original signature : <code>void w32font_close(FRAME_PTR, font*)</code><br>
	 * <i>native declaration : w32font.h:31</i>
	 */
	public static native void w32font_close(W32fontLibrary.FRAME_PTR f, Pointer<W32fontLibrary.font > font);
	/**
	 * Original signature : <code>int w32font_has_char(Lisp_Object, int)</code><br>
	 * <i>native declaration : w32font.h:33</i>
	 */
	public static native int w32font_has_char(W32fontLibrary.Lisp_Object entity, int c);
	/**
	 * Original signature : <code>int w32font_text_extents(font*, unsigned*, int, font_metrics*)</code><br>
	 * <i>native declaration : w32font.h:35</i>
	 */
	public static native int w32font_text_extents(Pointer<W32fontLibrary.font > font, Pointer<Integer > code, int nglyphs, Pointer<W32fontLibrary.font_metrics > metrics);
	/**
	 * Original signature : <code>int w32font_draw(glyph_string*, int, int, int, int, int)</code><br>
	 * <i>native declaration : w32font.h:37</i>
	 */
	public static native int w32font_draw(Pointer<W32fontLibrary.glyph_string > s, int from, int to, int x, int y, int with_background);
	/**
	 * Original signature : <code>int uniscribe_check_otf(LOGFONT*, Lisp_Object)</code><br>
	 * <i>native declaration : w32font.h:39</i>
	 */
	public static native int uniscribe_check_otf(Pointer<W32fontLibrary.LOGFONT > font, W32fontLibrary.Lisp_Object otf_spec);
	/**
	 * Original signature : <code>Lisp_Object intern_font_name(char*)</code><br>
	 * <i>native declaration : w32font.h:41</i>
	 */
	public static native W32fontLibrary.Lisp_Object intern_font_name(Pointer<Byte > charPtr1);
	/// Undefined type
	/// Undefined type
	public static interface FRAME_PTR {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface glyph_string {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface TEXTMETRICW {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface LOGFONT {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface HFONT {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface font {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface font_metrics {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
}
