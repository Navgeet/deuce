package emacs.atimer;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>atimer</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("atimer") 
@Runtime(CRuntime.class) 
public class AtimerLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : atimer.h:317</i>
	 */
	public enum atimer_type implements IntValuedEnum<atimer_type > {
		/// Timer is ripe at some absolute time.
		ATIMER_ABSOLUTE(0),
		/// Timer is ripe at now plus an offset.
		ATIMER_RELATIVE(1),
		/// Timer runs continuously.
		ATIMER_CONTINUOUS(2);
		atimer_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<atimer_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<atimer_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : atimer.h:318</i>
	/// <i>native declaration : atimer.h:318</i>
	public static abstract class atimer_callback extends Callback<atimer_callback > {
		public abstract void apply(Pointer<atimer > timer);
	};
	/**
	 * Original signature : <code>int set_file_times(const char*, int, int)</code><br>
	 * <i>native declaration : systime.h:303</i>
	 */
	public static native int set_file_times(Pointer<Byte > charPtr1, int int1, int int2);
	/**
	 * defined in keyboard.c<br>
	 * Original signature : <code>void set_waiting_for_input(int*)</code><br>
	 * <i>native declaration : systime.h:308</i>
	 */
	public static native void set_waiting_for_input(Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>atimer* start_atimer(atimer_type, int, atimer_callback, void*)</code><br>
	 * <i>native declaration : atimer.h:339</i>
	 */
	public static native Pointer<atimer > start_atimer(IntValuedEnum<AtimerLibrary.atimer_type > arg1, int int1, Pointer<AtimerLibrary.atimer_callback > atimer_callback1, Pointer<? > voidPtr1);
	/**
	 * Original signature : <code>void cancel_atimer(atimer*)</code><br>
	 * <i>native declaration : atimer.h:341</i>
	 */
	public static native void cancel_atimer(Pointer<atimer > atimerPtr1);
	/**
	 * Original signature : <code>void do_pending_atimers()</code><br>
	 * <i>native declaration : atimer.h:343</i>
	 */
	public static native void do_pending_atimers();
	/**
	 * Original signature : <code>void init_atimer()</code><br>
	 * <i>native declaration : atimer.h:345</i>
	 */
	public static native void init_atimer();
	/**
	 * Original signature : <code>void turn_on_atimers(int)</code><br>
	 * <i>native declaration : atimer.h:347</i>
	 */
	public static native void turn_on_atimers(int int1);
	/**
	 * Original signature : <code>void stop_other_atimers(atimer*)</code><br>
	 * <i>native declaration : atimer.h:349</i>
	 */
	public static native void stop_other_atimers(Pointer<atimer > atimerPtr1);
	/**
	 * Original signature : <code>Lisp_Object unwind_stop_other_atimers(Lisp_Object)</code><br>
	 * <i>native declaration : atimer.h:351</i>
	 */
	public static native AtimerLibrary.Lisp_Object unwind_stop_other_atimers(AtimerLibrary.Lisp_Object Lisp_Object1);
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
}
