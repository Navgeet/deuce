package emacs.cm;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : cm.h:54</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("cm") 
public class cm extends StructObject {
	public cm() {
		super();
	}
	/// Current row
	@Field(0) 
	public int cm_curY() {
		return this.io.getIntField(this, 0);
	}
	/// Current row
	@Field(0) 
	public cm cm_curY(int cm_curY) {
		this.io.setIntField(this, 0, cm_curY);
		return this;
	}
	/// Current column
	@Field(1) 
	public int cm_curX() {
		return this.io.getIntField(this, 1);
	}
	/// Current column
	@Field(1) 
	public cm cm_curX(int cm_curX) {
		this.io.setIntField(this, 1, cm_curX);
		return this;
	}
	/**
	 * Capabilities from termcap<br>
	 * up (up)<br>
	 * C type : const char*
	 */
	@Field(2) 
	public Pointer<Byte > cm_up() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * Capabilities from termcap<br>
	 * up (up)<br>
	 * C type : const char*
	 */
	@Field(2) 
	public cm cm_up(Pointer<Byte > cm_up) {
		this.io.setPointerField(this, 2, cm_up);
		return this;
	}
	/**
	 * down (do)<br>
	 * C type : const char*
	 */
	@Field(3) 
	public Pointer<Byte > cm_down() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * down (do)<br>
	 * C type : const char*
	 */
	@Field(3) 
	public cm cm_down(Pointer<Byte > cm_down) {
		this.io.setPointerField(this, 3, cm_down);
		return this;
	}
	/**
	 * left (le)<br>
	 * C type : const char*
	 */
	@Field(4) 
	public Pointer<Byte > cm_left() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * left (le)<br>
	 * C type : const char*
	 */
	@Field(4) 
	public cm cm_left(Pointer<Byte > cm_left) {
		this.io.setPointerField(this, 4, cm_left);
		return this;
	}
	/**
	 * right (nd)<br>
	 * C type : const char*
	 */
	@Field(5) 
	public Pointer<Byte > cm_right() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * right (nd)<br>
	 * C type : const char*
	 */
	@Field(5) 
	public cm cm_right(Pointer<Byte > cm_right) {
		this.io.setPointerField(this, 5, cm_right);
		return this;
	}
	/**
	 * home (ho)<br>
	 * C type : const char*
	 */
	@Field(6) 
	public Pointer<Byte > cm_home() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * home (ho)<br>
	 * C type : const char*
	 */
	@Field(6) 
	public cm cm_home(Pointer<Byte > cm_home) {
		this.io.setPointerField(this, 6, cm_home);
		return this;
	}
	/**
	 * carriage return (cr)<br>
	 * C type : const char*
	 */
	@Field(7) 
	public Pointer<Byte > cm_cr() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * carriage return (cr)<br>
	 * C type : const char*
	 */
	@Field(7) 
	public cm cm_cr(Pointer<Byte > cm_cr) {
		this.io.setPointerField(this, 7, cm_cr);
		return this;
	}
	/**
	 * last line (ll)<br>
	 * C type : const char*
	 */
	@Field(8) 
	public Pointer<Byte > cm_ll() {
		return this.io.getPointerField(this, 8);
	}
	/**
	 * last line (ll)<br>
	 * C type : const char*
	 */
	@Field(8) 
	public cm cm_ll(Pointer<Byte > cm_ll) {
		this.io.setPointerField(this, 8, cm_ll);
		return this;
	}
	/**
	 * tab (ta)<br>
	 * C type : const char*
	 */
	@Field(9) 
	public Pointer<Byte > cm_tab() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * tab (ta)<br>
	 * C type : const char*
	 */
	@Field(9) 
	public cm cm_tab(Pointer<Byte > cm_tab) {
		this.io.setPointerField(this, 9, cm_tab);
		return this;
	}
	/**
	 * backtab (bt)<br>
	 * C type : const char*
	 */
	@Field(10) 
	public Pointer<Byte > cm_backtab() {
		return this.io.getPointerField(this, 10);
	}
	/**
	 * backtab (bt)<br>
	 * C type : const char*
	 */
	@Field(10) 
	public cm cm_backtab(Pointer<Byte > cm_backtab) {
		this.io.setPointerField(this, 10, cm_backtab);
		return this;
	}
	/**
	 * absolute (cm)<br>
	 * C type : char*
	 */
	@Field(11) 
	public Pointer<Byte > cm_abs() {
		return this.io.getPointerField(this, 11);
	}
	/**
	 * absolute (cm)<br>
	 * C type : char*
	 */
	@Field(11) 
	public cm cm_abs(Pointer<Byte > cm_abs) {
		this.io.setPointerField(this, 11, cm_abs);
		return this;
	}
	/**
	 * horizontal absolute (ch)<br>
	 * C type : const char*
	 */
	@Field(12) 
	public Pointer<Byte > cm_habs() {
		return this.io.getPointerField(this, 12);
	}
	/**
	 * horizontal absolute (ch)<br>
	 * C type : const char*
	 */
	@Field(12) 
	public cm cm_habs(Pointer<Byte > cm_habs) {
		this.io.setPointerField(this, 12, cm_habs);
		return this;
	}
	/**
	 * vertical absolute (cv)<br>
	 * C type : const char*
	 */
	@Field(13) 
	public Pointer<Byte > cm_vabs() {
		return this.io.getPointerField(this, 13);
	}
	/**
	 * vertical absolute (cv)<br>
	 * C type : const char*
	 */
	@Field(13) 
	public cm cm_vabs(Pointer<Byte > cm_vabs) {
		this.io.setPointerField(this, 13, cm_vabs);
		return this;
	}
	/**
	 * multiple up (UP)<br>
	 * C type : const char*
	 */
	@Field(14) 
	public Pointer<Byte > cm_multiup() {
		return this.io.getPointerField(this, 14);
	}
	/**
	 * multiple up (UP)<br>
	 * C type : const char*
	 */
	@Field(14) 
	public cm cm_multiup(Pointer<Byte > cm_multiup) {
		this.io.setPointerField(this, 14, cm_multiup);
		return this;
	}
	/**
	 * multiple down (DO)<br>
	 * C type : const char*
	 */
	@Field(15) 
	public Pointer<Byte > cm_multidown() {
		return this.io.getPointerField(this, 15);
	}
	/**
	 * multiple down (DO)<br>
	 * C type : const char*
	 */
	@Field(15) 
	public cm cm_multidown(Pointer<Byte > cm_multidown) {
		this.io.setPointerField(this, 15, cm_multidown);
		return this;
	}
	/**
	 * multiple left (LE)<br>
	 * C type : const char*
	 */
	@Field(16) 
	public Pointer<Byte > cm_multileft() {
		return this.io.getPointerField(this, 16);
	}
	/**
	 * multiple left (LE)<br>
	 * C type : const char*
	 */
	@Field(16) 
	public cm cm_multileft(Pointer<Byte > cm_multileft) {
		this.io.setPointerField(this, 16, cm_multileft);
		return this;
	}
	/**
	 * multiple right (RI)<br>
	 * C type : const char*
	 */
	@Field(17) 
	public Pointer<Byte > cm_multiright() {
		return this.io.getPointerField(this, 17);
	}
	/**
	 * multiple right (RI)<br>
	 * C type : const char*
	 */
	@Field(17) 
	public cm cm_multiright(Pointer<Byte > cm_multiright) {
		this.io.setPointerField(this, 17, cm_multiright);
		return this;
	}
	/// number of cols on screen (co)
	@Field(18) 
	public int cm_cols() {
		return this.io.getIntField(this, 18);
	}
	/// number of cols on screen (co)
	@Field(18) 
	public cm cm_cols(int cm_cols) {
		this.io.setIntField(this, 18, cm_cols);
		return this;
	}
	/// number of rows on screen (li)
	@Field(19) 
	public int cm_rows() {
		return this.io.getIntField(this, 19);
	}
	/// number of rows on screen (li)
	@Field(19) 
	public cm cm_rows(int cm_rows) {
		this.io.setIntField(this, 19, cm_rows);
		return this;
	}
	/// tab width (it)
	@Field(20) 
	public int cm_tabwidth() {
		return this.io.getIntField(this, 20);
	}
	/// tab width (it)
	@Field(20) 
	public cm cm_tabwidth(int cm_tabwidth) {
		this.io.setIntField(this, 20, cm_tabwidth);
		return this;
	}
	/// autowrap flag (am)
	@Field(21) 
	@Bits(1) 
	public int cm_autowrap() {
		return this.io.getIntField(this, 21);
	}
	/// autowrap flag (am)
	@Field(21) 
	@Bits(1) 
	public cm cm_autowrap(int cm_autowrap) {
		this.io.setIntField(this, 21, cm_autowrap);
		return this;
	}
	/**
	 * VT-100: cursor stays in last col but<br>
	 * will cm_wrap if next char is<br>
	 * printing (xn)
	 */
	@Field(22) 
	@Bits(1) 
	public int cm_magicwrap() {
		return this.io.getIntField(this, 22);
	}
	/**
	 * VT-100: cursor stays in last col but<br>
	 * will cm_wrap if next char is<br>
	 * printing (xn)
	 */
	@Field(22) 
	@Bits(1) 
	public cm cm_magicwrap(int cm_magicwrap) {
		this.io.setIntField(this, 22, cm_magicwrap);
		return this;
	}
	/// if set, use tabs
	@Field(23) 
	@Bits(1) 
	public int cm_usetabs() {
		return this.io.getIntField(this, 23);
	}
	/// if set, use tabs
	@Field(23) 
	@Bits(1) 
	public cm cm_usetabs(int cm_usetabs) {
		this.io.setIntField(this, 23, cm_usetabs);
		return this;
	}
	/**
	 * if reach right margin, forget cursor<br>
	 * location
	 */
	@Field(24) 
	@Bits(1) 
	public int cm_losewrap() {
		return this.io.getIntField(this, 24);
	}
	/**
	 * if reach right margin, forget cursor<br>
	 * location
	 */
	@Field(24) 
	@Bits(1) 
	public cm cm_losewrap(int cm_losewrap) {
		this.io.setIntField(this, 24, cm_losewrap);
		return this;
	}
	/// \r performs a \r\n (rn)
	@Field(25) 
	@Bits(1) 
	public int cm_autolf() {
		return this.io.getIntField(this, 25);
	}
	/// \r performs a \r\n (rn)
	@Field(25) 
	@Bits(1) 
	public cm cm_autolf(int cm_autolf) {
		this.io.setIntField(this, 25, cm_autolf);
		return this;
	}
	/**
	 * Costs for the non-parameterized capabilities<br>
	 * cost for up
	 */
	@Field(26) 
	public int cc_up() {
		return this.io.getIntField(this, 26);
	}
	/**
	 * Costs for the non-parameterized capabilities<br>
	 * cost for up
	 */
	@Field(26) 
	public cm cc_up(int cc_up) {
		this.io.setIntField(this, 26, cc_up);
		return this;
	}
	/// etc.
	@Field(27) 
	public int cc_down() {
		return this.io.getIntField(this, 27);
	}
	/// etc.
	@Field(27) 
	public cm cc_down(int cc_down) {
		this.io.setIntField(this, 27, cc_down);
		return this;
	}
	@Field(28) 
	public int cc_left() {
		return this.io.getIntField(this, 28);
	}
	@Field(28) 
	public cm cc_left(int cc_left) {
		this.io.setIntField(this, 28, cc_left);
		return this;
	}
	@Field(29) 
	public int cc_right() {
		return this.io.getIntField(this, 29);
	}
	@Field(29) 
	public cm cc_right(int cc_right) {
		this.io.setIntField(this, 29, cc_right);
		return this;
	}
	@Field(30) 
	public int cc_home() {
		return this.io.getIntField(this, 30);
	}
	@Field(30) 
	public cm cc_home(int cc_home) {
		this.io.setIntField(this, 30, cc_home);
		return this;
	}
	@Field(31) 
	public int cc_cr() {
		return this.io.getIntField(this, 31);
	}
	@Field(31) 
	public cm cc_cr(int cc_cr) {
		this.io.setIntField(this, 31, cc_cr);
		return this;
	}
	@Field(32) 
	public int cc_ll() {
		return this.io.getIntField(this, 32);
	}
	@Field(32) 
	public cm cc_ll(int cc_ll) {
		this.io.setIntField(this, 32, cc_ll);
		return this;
	}
	@Field(33) 
	public int cc_tab() {
		return this.io.getIntField(this, 33);
	}
	@Field(33) 
	public cm cc_tab(int cc_tab) {
		this.io.setIntField(this, 33, cc_tab);
		return this;
	}
	@Field(34) 
	public int cc_backtab() {
		return this.io.getIntField(this, 34);
	}
	@Field(34) 
	public cm cc_backtab(int cc_backtab) {
		this.io.setIntField(this, 34, cc_backtab);
		return this;
	}
	/**
	 * These are temporary, until the code is installed to use the<br>
	 * struct parmcap fields above.
	 */
	@Field(35) 
	public int cc_abs() {
		return this.io.getIntField(this, 35);
	}
	/**
	 * These are temporary, until the code is installed to use the<br>
	 * struct parmcap fields above.
	 */
	@Field(35) 
	public cm cc_abs(int cc_abs) {
		this.io.setIntField(this, 35, cc_abs);
		return this;
	}
	@Field(36) 
	public int cc_habs() {
		return this.io.getIntField(this, 36);
	}
	@Field(36) 
	public cm cc_habs(int cc_habs) {
		this.io.setIntField(this, 36, cc_habs);
		return this;
	}
	@Field(37) 
	public int cc_vabs() {
		return this.io.getIntField(this, 37);
	}
	@Field(37) 
	public cm cc_vabs(int cc_vabs) {
		this.io.setIntField(this, 37, cc_vabs);
		return this;
	}
}
