package emacs.buffer;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.SizeT;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>buffer</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("buffer") 
@Runtime(CRuntime.class) 
public class BufferLibrary {
	static {
		BridJ.register();
	}
	/// <i>native declaration : buffer.h</i>
	public static final int BEG_BYTE = (int)(1);
	/// <i>native declaration : buffer.h</i>
	public static final int BEG = (int)(1);
	/// <i>native declaration : buffer.h</i>
	public static final int MAX_PER_BUFFER_VARS = (int)50;
	/**
	 * Original signature : <code>void set_point()</code><br>
	 * <i>native declaration : buffer.h:280</i>
	 */
	public static native void set_point();
	/**
	 * Original signature : <code>void temp_set_point(buffer*)</code><br>
	 * <i>native declaration : buffer.h:282</i>
	 */
	public static native void temp_set_point(Pointer<buffer > bufferPtr1);
	/**
	 * Original signature : <code>void set_point_both()</code><br>
	 * <i>native declaration : buffer.h:284</i>
	 */
	public static native void set_point_both();
	/**
	 * Original signature : <code>void temp_set_point_both(buffer*)</code><br>
	 * <i>native declaration : buffer.h:286</i>
	 */
	public static native void temp_set_point_both(Pointer<buffer > bufferPtr1);
	/**
	 * Original signature : <code>void enlarge_buffer_text(buffer*)</code><br>
	 * <i>native declaration : buffer.h:288</i>
	 */
	public static native void enlarge_buffer_text(Pointer<buffer > bufferPtr1);
	/**
	 * Original signature : <code>void delete_all_overlays(buffer*)</code><br>
	 * <i>native declaration : buffer.h:731</i>
	 */
	public static native void delete_all_overlays(Pointer<buffer > bufferPtr1);
	/**
	 * Original signature : <code>void reset_buffer(buffer*)</code><br>
	 * <i>native declaration : buffer.h:733</i>
	 */
	public static native void reset_buffer(Pointer<buffer > bufferPtr1);
	/**
	 * Original signature : <code>void evaporate_overlays()</code><br>
	 * <i>native declaration : buffer.h:735</i>
	 */
	public static native void evaporate_overlays();
	/**
	 * Original signature : <code>ptrdiff_t overlays_at(EMACS_INT, int, Lisp_Object**, ptrdiff_t*, EMACS_INT*, EMACS_INT*, int)</code><br>
	 * <i>native declaration : buffer.h:737</i>
	 */
	@Ptr 
	public static native long overlays_at(BufferLibrary.EMACS_INT pos, int extend, Pointer<Pointer<BufferLibrary.Lisp_Object > > vec_ptr, Pointer<SizeT > len_ptr, Pointer<BufferLibrary.EMACS_INT > next_ptr, Pointer<BufferLibrary.EMACS_INT > prev_ptr, int change_req);
	/**
	 * Original signature : <code>ptrdiff_t sort_overlays(Lisp_Object*, ptrdiff_t, window*)</code><br>
	 * <i>native declaration : buffer.h:739</i>
	 */
	@Ptr 
	public static native long sort_overlays(Pointer<BufferLibrary.Lisp_Object > Lisp_ObjectPtr1, @Ptr long ptrdiff_t1, Pointer<BufferLibrary.window > windowPtr1);
	/**
	 * Original signature : <code>void recenter_overlay_lists(buffer*)</code><br>
	 * <i>native declaration : buffer.h:741</i>
	 */
	public static native void recenter_overlay_lists(Pointer<buffer > bufferPtr1);
	/**
	 * Original signature : <code>EMACS_INT overlay_strings(EMACS_INT, window*, unsigned char**)</code><br>
	 * <i>native declaration : buffer.h:743</i>
	 */
	public static native BufferLibrary.EMACS_INT overlay_strings(BufferLibrary.EMACS_INT EMACS_INT1, Pointer<BufferLibrary.window > windowPtr1, Pointer<Pointer<Byte > > charPtrPtr1);
	/**
	 * Original signature : <code>void validate_region(Lisp_Object*, Lisp_Object*)</code><br>
	 * <i>native declaration : buffer.h:745</i>
	 */
	public static native void validate_region(Pointer<BufferLibrary.Lisp_Object > Lisp_ObjectPtr1, Pointer<BufferLibrary.Lisp_Object > Lisp_ObjectPtr2);
	/**
	 * Original signature : <code>void set_buffer_internal(buffer*)</code><br>
	 * <i>native declaration : buffer.h:747</i>
	 */
	public static native void set_buffer_internal(Pointer<buffer > bufferPtr1);
	/**
	 * Original signature : <code>void set_buffer_internal_1(buffer*)</code><br>
	 * <i>native declaration : buffer.h:749</i>
	 */
	public static native void set_buffer_internal_1(Pointer<buffer > bufferPtr1);
	/**
	 * Original signature : <code>void set_buffer_temp(buffer*)</code><br>
	 * <i>native declaration : buffer.h:751</i>
	 */
	public static native void set_buffer_temp(Pointer<buffer > bufferPtr1);
	/**
	 * Original signature : <code>void record_buffer()</code><br>
	 * <i>native declaration : buffer.h:753</i>
	 */
	public static native void record_buffer();
	/**
	 * Variables used locally in FETCH_MULTIBYTE_CHAR.<br>
	 * C type : extern unsigned char*
	 */
	public Pointer<Byte > _fetch_multibyte_char_p() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("buffer").getSymbolPointer("_fetch_multibyte_char_p").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Variables used locally in FETCH_MULTIBYTE_CHAR.<br>
	 * C type : extern unsigned char*
	 */
	public BufferLibrary _fetch_multibyte_char_p(Pointer<Byte > _fetch_multibyte_char_p) {
		try {
			{
				BridJ.getNativeLibrary("buffer").getSymbolPointer("_fetch_multibyte_char_p").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(_fetch_multibyte_char_p);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern buffer*
	public Pointer<buffer > current_buffer() {
		try {
			return (Pointer<buffer >)BridJ.getNativeLibrary("buffer").getSymbolPointer("current_buffer").as(DefaultParameterizedType.paramType(Pointer.class, buffer.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern buffer*
	public BufferLibrary current_buffer(Pointer<buffer > current_buffer) {
		try {
			{
				BridJ.getNativeLibrary("buffer").getSymbolPointer("current_buffer").as(DefaultParameterizedType.paramType(Pointer.class, buffer.class)).set(current_buffer);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern buffer
	public buffer buffer_defaults() {
		try {
			return (buffer)BridJ.getNativeLibrary("buffer").getSymbolPointer("buffer_defaults").as(buffer.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern buffer
	public BufferLibrary buffer_defaults(buffer buffer_defaults) {
		try {
			{
				BridJ.getNativeLibrary("buffer").getSymbolPointer("buffer_defaults").as(buffer.class).set(buffer_defaults);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern buffer
	public buffer buffer_local_flags() {
		try {
			return (buffer)BridJ.getNativeLibrary("buffer").getSymbolPointer("buffer_local_flags").as(buffer.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern buffer
	public BufferLibrary buffer_local_flags(buffer buffer_local_flags) {
		try {
			{
				BridJ.getNativeLibrary("buffer").getSymbolPointer("buffer_local_flags").as(buffer.class).set(buffer_local_flags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern buffer
	public buffer buffer_local_symbols() {
		try {
			return (buffer)BridJ.getNativeLibrary("buffer").getSymbolPointer("buffer_local_symbols").as(buffer.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern buffer
	public BufferLibrary buffer_local_symbols(buffer buffer_local_symbols) {
		try {
			{
				BridJ.getNativeLibrary("buffer").getSymbolPointer("buffer_local_symbols").as(buffer.class).set(buffer_local_symbols);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface window {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface INTERVAL {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Overlay {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface region_cache {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Marker {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface vectorlike_header {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface EMACS_INT {
		
	};
}
