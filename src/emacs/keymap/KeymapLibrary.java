package emacs.keymap;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>keymap</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("keymap") 
@Runtime(CRuntime.class) 
public class KeymapLibrary {
	static {
		BridJ.register();
	}
	/// <i>native declaration : keymap.h:23</i>
	/// <i>native declaration : keymap.h:23</i>
	public static abstract class map_keymap_function_t extends Callback<map_keymap_function_t > {
		public abstract void apply(KeymapLibrary.Lisp_Object key, KeymapLibrary.Lisp_Object val, KeymapLibrary.Lisp_Object args, Pointer<? > data);
	};
	/**
	 * Original signature : <code>char* push_key_description(char*, int)</code><br>
	 * <i>native declaration : keymap.h:6</i>
	 */
	public static native Pointer<Byte > push_key_description(Pointer<Byte > charPtr1, int int1);
	/**
	 * Original signature : <code>Lisp_Object access_keymap(Lisp_Object, Lisp_Object, int, int, int)</code><br>
	 * <i>native declaration : keymap.h:8</i>
	 */
	public static native KeymapLibrary.Lisp_Object access_keymap(KeymapLibrary.Lisp_Object Lisp_Object1, KeymapLibrary.Lisp_Object Lisp_Object2, int int1, int int2, int int3);
	/**
	 * Original signature : <code>Lisp_Object get_keymap(Lisp_Object, int, int)</code><br>
	 * <i>native declaration : keymap.h:10</i>
	 */
	public static native KeymapLibrary.Lisp_Object get_keymap(KeymapLibrary.Lisp_Object Lisp_Object1, int int1, int int2);
	/**
	 * Original signature : <code>int describe_map_tree(Lisp_Object, int, Lisp_Object, Lisp_Object, const char*, int, int, int, int)</code><br>
	 * <i>native declaration : keymap.h:12</i>
	 */
	public static native int describe_map_tree(KeymapLibrary.Lisp_Object Lisp_Object1, int int1, KeymapLibrary.Lisp_Object Lisp_Object2, KeymapLibrary.Lisp_Object Lisp_Object3, Pointer<Byte > charPtr1, int int2, int int3, int int4, int int5);
	/**
	 * Original signature : <code>ptrdiff_t current_minor_maps(Lisp_Object**, Lisp_Object**)</code><br>
	 * <i>native declaration : keymap.h:14</i>
	 */
	@Ptr 
	public static native long current_minor_maps(Pointer<Pointer<KeymapLibrary.Lisp_Object > > Lisp_ObjectPtrPtr1, Pointer<Pointer<KeymapLibrary.Lisp_Object > > Lisp_ObjectPtrPtr2);
	/**
	 * Original signature : <code>void initial_define_key(Lisp_Object, int, const char*)</code><br>
	 * <i>native declaration : keymap.h:16</i>
	 */
	public static native void initial_define_key(KeymapLibrary.Lisp_Object Lisp_Object1, int int1, Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void initial_define_lispy_key(Lisp_Object, const char*, const char*)</code><br>
	 * <i>native declaration : keymap.h:18</i>
	 */
	public static native void initial_define_lispy_key(KeymapLibrary.Lisp_Object Lisp_Object1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	/**
	 * Original signature : <code>void syms_of_keymap()</code><br>
	 * <i>native declaration : keymap.h:20</i>
	 */
	public static native void syms_of_keymap();
	/**
	 * Original signature : <code>void keys_of_keymap()</code><br>
	 * <i>native declaration : keymap.h:22</i>
	 */
	public static native void keys_of_keymap();
	/**
	 * Original signature : <code>void map_keymap(Lisp_Object, map_keymap_function_t, Lisp_Object, void*, int)</code><br>
	 * <i>native declaration : keymap.h:25</i>
	 */
	public static native void map_keymap(KeymapLibrary.Lisp_Object map, Pointer<KeymapLibrary.map_keymap_function_t > fun, KeymapLibrary.Lisp_Object largs, Pointer<? > cargs, int autoload);
	/**
	 * Original signature : <code>void map_keymap_canonical(Lisp_Object, map_keymap_function_t, Lisp_Object, void*)</code><br>
	 * <i>native declaration : keymap.h:27</i>
	 */
	public static native void map_keymap_canonical(KeymapLibrary.Lisp_Object map, Pointer<KeymapLibrary.map_keymap_function_t > fun, KeymapLibrary.Lisp_Object args, Pointer<? > data);
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
}
