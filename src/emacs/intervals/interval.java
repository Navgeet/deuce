package emacs.intervals;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Union;
/**
 * <i>native declaration : intervals.h:2069</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("intervals") 
public class interval extends StructObject {
	public interval() {
		super();
	}
	/**
	 * This field is usually updated<br>
	 * simultaneously with an interval<br>
	 * traversal, there is no guarantee<br>
	 * that it is valid for a random<br>
	 * interval.<br>
	 * Intervals which precede me.<br>
	 * C type : interval*
	 */
	@Field(2) 
	public Pointer<interval > left() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * This field is usually updated<br>
	 * simultaneously with an interval<br>
	 * traversal, there is no guarantee<br>
	 * that it is valid for a random<br>
	 * interval.<br>
	 * Intervals which precede me.<br>
	 * C type : interval*
	 */
	@Field(2) 
	public interval left(Pointer<interval > left) {
		this.io.setPointerField(this, 2, left);
		return this;
	}
	/**
	 * Intervals which succeed me.<br>
	 * C type : interval*
	 */
	@Field(3) 
	public Pointer<interval > right() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * Intervals which succeed me.<br>
	 * C type : interval*
	 */
	@Field(3) 
	public interval right(Pointer<interval > right) {
		this.io.setPointerField(this, 3, right);
		return this;
	}
	/**
	 * Parent in the tree, or the Lisp_Object containing this interval tree.<br>
	 * C type : up_union
	 */
	@Field(4) 
	public interval.up_union up() {
		return this.io.getNativeObjectField(this, 4);
	}
	/**
	 * Parent in the tree, or the Lisp_Object containing this interval tree.<br>
	 * C type : up_union
	 */
	@Field(4) 
	public interval up(interval.up_union up) {
		this.io.setNativeObjectField(this, 4, up);
		return this;
	}
	@Field(5) 
	@Bits(1) 
	public int up_obj() {
		return this.io.getIntField(this, 5);
	}
	@Field(5) 
	@Bits(1) 
	public interval up_obj(int up_obj) {
		this.io.setIntField(this, 5, up_obj);
		return this;
	}
	@Field(6) 
	@Bits(1) 
	public int gcmarkbit() {
		return this.io.getIntField(this, 6);
	}
	@Field(6) 
	@Bits(1) 
	public interval gcmarkbit(int gcmarkbit) {
		this.io.setIntField(this, 6, gcmarkbit);
		return this;
	}
	/// Non-zero means can't modify.
	@Field(7) 
	@Bits(1) 
	public int write_protect() {
		return this.io.getIntField(this, 7);
	}
	/// Non-zero means can't modify.
	@Field(7) 
	@Bits(1) 
	public interval write_protect(int write_protect) {
		this.io.setIntField(this, 7, write_protect);
		return this;
	}
	/// Zero means don't display.
	@Field(8) 
	@Bits(1) 
	public int visible() {
		return this.io.getIntField(this, 8);
	}
	/// Zero means don't display.
	@Field(8) 
	@Bits(1) 
	public interval visible(int visible) {
		this.io.setIntField(this, 8, visible);
		return this;
	}
	/**
	 * Non-zero means text inserted just<br>
	 * before this interval goes into it.
	 */
	@Field(9) 
	@Bits(1) 
	public int front_sticky() {
		return this.io.getIntField(this, 9);
	}
	/**
	 * Non-zero means text inserted just<br>
	 * before this interval goes into it.
	 */
	@Field(9) 
	@Bits(1) 
	public interval front_sticky(int front_sticky) {
		this.io.setIntField(this, 9, front_sticky);
		return this;
	}
	/// Likewise for just after it.
	@Field(10) 
	@Bits(1) 
	public int rear_sticky() {
		return this.io.getIntField(this, 10);
	}
	/// Likewise for just after it.
	@Field(10) 
	@Bits(1) 
	public interval rear_sticky(int rear_sticky) {
		this.io.setIntField(this, 10, rear_sticky);
		return this;
	}
	/// <i>native declaration : intervals.h:2068</i>
	/// <i>native declaration : intervals.h:2068</i>
	@Union 
	public static class up_union extends StructObject {
		public up_union() {
			super();
		}
		/// C type : interval*
		@Field(0) 
		public Pointer<interval > interval() {
			return this.io.getPointerField(this, 0);
		}
		/// C type : interval*
		@Field(0) 
		public up_union interval(Pointer<interval > interval) {
			this.io.setPointerField(this, 0, interval);
			return this;
		}
	};
}
