package emacs.intervals;
import emacs.intervals.IntervalsLibrary.Lisp_Char_Table;
import emacs.intervals.IntervalsLibrary.Lisp_Object;
import emacs.intervals.IntervalsLibrary.bidi_dir_t;
import emacs.intervals.IntervalsLibrary.display_element_type;
import emacs.intervals.IntervalsLibrary.frame;
import emacs.intervals.IntervalsLibrary.glyph_row_area;
import emacs.intervals.IntervalsLibrary.glyphless_display_method;
import emacs.intervals.IntervalsLibrary.it_method;
import emacs.intervals.IntervalsLibrary.line_wrap_method;
import emacs.intervals.IntervalsLibrary.window;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Union;
/**
 * <i>native declaration : dispextern.h:1575</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("intervals") 
public class it extends StructObject {
	public it() {
		super();
	}
	/// C type : window*
	@Field(1) 
	public Pointer<window > w() {
		return this.io.getPointerField(this, 1);
	}
	/// C type : window*
	@Field(1) 
	public it w(Pointer<window > w) {
		this.io.setPointerField(this, 1, w);
		return this;
	}
	/**
	 * The window's frame.<br>
	 * C type : frame*
	 */
	@Field(2) 
	public Pointer<frame > f() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * The window's frame.<br>
	 * C type : frame*
	 */
	@Field(2) 
	public it f(Pointer<frame > f) {
		this.io.setPointerField(this, 2, f);
		return this;
	}
	/**
	 * Method to use to load this structure with the next display element.<br>
	 * C type : it_method
	 */
	@Field(3) 
	public IntValuedEnum<it_method > method() {
		return this.io.getEnumField(this, 3);
	}
	/**
	 * Method to use to load this structure with the next display element.<br>
	 * C type : it_method
	 */
	@Field(3) 
	public it method(IntValuedEnum<it_method > method) {
		this.io.setEnumField(this, 3, method);
		return this;
	}
	/**
	 * C string to iterate over.  Non-null means get characters from<br>
	 * this string, otherwise characters are read from current_buffer<br>
	 * or it->string.<br>
	 * C type : const unsigned char*
	 */
	@Field(8) 
	public Pointer<Byte > s() {
		return this.io.getPointerField(this, 8);
	}
	/**
	 * C string to iterate over.  Non-null means get characters from<br>
	 * this string, otherwise characters are read from current_buffer<br>
	 * or it->string.<br>
	 * C type : const unsigned char*
	 */
	@Field(8) 
	public it s(Pointer<Byte > s) {
		this.io.setPointerField(this, 8, s);
		return this;
	}
	/// 1 means multibyte characters are enabled.
	@Field(13) 
	@Bits(1) 
	public int multibyte_p() {
		return this.io.getIntField(this, 13);
	}
	/// 1 means multibyte characters are enabled.
	@Field(13) 
	@Bits(1) 
	public it multibyte_p(int multibyte_p) {
		this.io.setIntField(this, 13, multibyte_p);
		return this;
	}
	/// 1 means window has a mode line at its top.
	@Field(14) 
	@Bits(1) 
	public int header_line_p() {
		return this.io.getIntField(this, 14);
	}
	/// 1 means window has a mode line at its top.
	@Field(14) 
	@Bits(1) 
	public it header_line_p(int header_line_p) {
		this.io.setIntField(this, 14, header_line_p);
		return this;
	}
	/**
	 * 1 means `string' is the value of a `display' property.<br>
	 * Don't handle some `display' properties in these strings.
	 */
	@Field(15) 
	@Bits(1) 
	public int string_from_display_prop_p() {
		return this.io.getIntField(this, 15);
	}
	/**
	 * 1 means `string' is the value of a `display' property.<br>
	 * Don't handle some `display' properties in these strings.
	 */
	@Field(15) 
	@Bits(1) 
	public it string_from_display_prop_p(int string_from_display_prop_p) {
		this.io.setIntField(this, 15, string_from_display_prop_p);
		return this;
	}
	/**
	 * 1 means `string' comes from a `line-prefix' or `wrap-prefix'<br>
	 * property.
	 */
	@Field(16) 
	@Bits(1) 
	public int string_from_prefix_prop_p() {
		return this.io.getIntField(this, 16);
	}
	/**
	 * 1 means `string' comes from a `line-prefix' or `wrap-prefix'<br>
	 * property.
	 */
	@Field(16) 
	@Bits(1) 
	public it string_from_prefix_prop_p(int string_from_prefix_prop_p) {
		this.io.setIntField(this, 16, string_from_prefix_prop_p);
		return this;
	}
	/**
	 * 1 means we are iterating an object that came from a value of a<br>
	 * `display' property.
	 */
	@Field(17) 
	@Bits(1) 
	public int from_disp_prop_p() {
		return this.io.getIntField(this, 17);
	}
	/**
	 * 1 means we are iterating an object that came from a value of a<br>
	 * `display' property.
	 */
	@Field(17) 
	@Bits(1) 
	public it from_disp_prop_p(int from_disp_prop_p) {
		this.io.setIntField(this, 17, from_disp_prop_p);
		return this;
	}
	/**
	 * When METHOD == next_element_from_display_vector,<br>
	 * this is 1 if we're doing an ellipsis.  Otherwise meaningless.
	 */
	@Field(18) 
	@Bits(1) 
	public int ellipsis_p() {
		return this.io.getIntField(this, 18);
	}
	/**
	 * When METHOD == next_element_from_display_vector,<br>
	 * this is 1 if we're doing an ellipsis.  Otherwise meaningless.
	 */
	@Field(18) 
	@Bits(1) 
	public it ellipsis_p(int ellipsis_p) {
		this.io.setIntField(this, 18, ellipsis_p);
		return this;
	}
	/// True means cursor shouldn't be displayed here.
	@Field(19) 
	@Bits(1) 
	public int avoid_cursor_p() {
		return this.io.getIntField(this, 19);
	}
	/// True means cursor shouldn't be displayed here.
	@Field(19) 
	@Bits(1) 
	public it avoid_cursor_p(int avoid_cursor_p) {
		this.io.setIntField(this, 19, avoid_cursor_p);
		return this;
	}
	/**
	 * Display table in effect or null for none.<br>
	 * C type : Lisp_Char_Table*
	 */
	@Field(20) 
	public Pointer<Lisp_Char_Table > dp() {
		return this.io.getPointerField(this, 20);
	}
	/**
	 * Display table in effect or null for none.<br>
	 * C type : Lisp_Char_Table*
	 */
	@Field(20) 
	public it dp(Pointer<Lisp_Char_Table > dp) {
		this.io.setPointerField(this, 20, dp);
		return this;
	}
	/**
	 * Current display table vector to return characters from and its<br>
	 * end.  dpvec null means we are not returning characters from a<br>
	 * display table entry; current.dpvec_index gives the current index<br>
	 * into dpvec.  This same mechanism is also used to return<br>
	 * characters from translated control characters, i.e. `\003' or<br>
	 * `^C'.<br>
	 * C type : Lisp_Object*
	 */
	@Field(21) 
	public Pointer<Lisp_Object > dpvec() {
		return this.io.getPointerField(this, 21);
	}
	/**
	 * Current display table vector to return characters from and its<br>
	 * end.  dpvec null means we are not returning characters from a<br>
	 * display table entry; current.dpvec_index gives the current index<br>
	 * into dpvec.  This same mechanism is also used to return<br>
	 * characters from translated control characters, i.e. `\003' or<br>
	 * `^C'.<br>
	 * C type : Lisp_Object*
	 */
	@Field(21) 
	public it dpvec(Pointer<Lisp_Object > dpvec) {
		this.io.setPointerField(this, 21, dpvec);
		return this;
	}
	/**
	 * Current display table vector to return characters from and its<br>
	 * end.  dpvec null means we are not returning characters from a<br>
	 * display table entry; current.dpvec_index gives the current index<br>
	 * into dpvec.  This same mechanism is also used to return<br>
	 * characters from translated control characters, i.e. `\003' or<br>
	 * `^C'.<br>
	 * C type : Lisp_Object*
	 */
	@Field(22) 
	public Pointer<Lisp_Object > dpend() {
		return this.io.getPointerField(this, 22);
	}
	/**
	 * Current display table vector to return characters from and its<br>
	 * end.  dpvec null means we are not returning characters from a<br>
	 * display table entry; current.dpvec_index gives the current index<br>
	 * into dpvec.  This same mechanism is also used to return<br>
	 * characters from translated control characters, i.e. `\003' or<br>
	 * `^C'.<br>
	 * C type : Lisp_Object*
	 */
	@Field(22) 
	public it dpend(Pointer<Lisp_Object > dpend) {
		this.io.setPointerField(this, 22, dpend);
		return this;
	}
	/**
	 * Length in bytes of the char that filled dpvec.  A value of zero<br>
	 * means that no such character is involved.  A negative value means<br>
	 * the rest of the line from the current iterator position onwards<br>
	 * is hidden by selective display or ellipsis.
	 */
	@Field(23) 
	public int dpvec_char_len() {
		return this.io.getIntField(this, 23);
	}
	/**
	 * Length in bytes of the char that filled dpvec.  A value of zero<br>
	 * means that no such character is involved.  A negative value means<br>
	 * the rest of the line from the current iterator position onwards<br>
	 * is hidden by selective display or ellipsis.
	 */
	@Field(23) 
	public it dpvec_char_len(int dpvec_char_len) {
		this.io.setIntField(this, 23, dpvec_char_len);
		return this;
	}
	/// Face id to use for all characters in display vector.  -1 if unused.
	@Field(24) 
	public int dpvec_face_id() {
		return this.io.getIntField(this, 24);
	}
	/// Face id to use for all characters in display vector.  -1 if unused.
	@Field(24) 
	public it dpvec_face_id(int dpvec_face_id) {
		this.io.setIntField(this, 24, dpvec_face_id);
		return this;
	}
	/**
	 * Face id of the iterator saved in case a glyph from dpvec contains<br>
	 * a face.  The face is restored when all glyphs from dpvec have<br>
	 * been delivered.
	 */
	@Field(25) 
	public int saved_face_id() {
		return this.io.getIntField(this, 25);
	}
	/**
	 * Face id of the iterator saved in case a glyph from dpvec contains<br>
	 * a face.  The face is restored when all glyphs from dpvec have<br>
	 * been delivered.
	 */
	@Field(25) 
	public it saved_face_id(int saved_face_id) {
		this.io.setIntField(this, 25, saved_face_id);
		return this;
	}
	/**
	 * Vector of glyphs for control character translation.  The pointer<br>
	 * dpvec is set to ctl_chars when a control character is translated.<br>
	 * This vector is also used for incomplete multibyte character<br>
	 * translation (e.g \222\244).  Such a character is at most 4 bytes,<br>
	 * thus we need at most 16 bytes here.<br>
	 * C type : Lisp_Object[16]
	 */
	@Array({16}) 
	@Field(26) 
	public Pointer<Lisp_Object > ctl_chars() {
		return this.io.getPointerField(this, 26);
	}
	/**
	 * Initial buffer or string position of the iterator, before skipping<br>
	 * over display properties and invisible text.<br>
	 * C type : display_pos
	 */
	@Field(27) 
	public display_pos start() {
		return this.io.getNativeObjectField(this, 27);
	}
	/**
	 * Initial buffer or string position of the iterator, before skipping<br>
	 * over display properties and invisible text.<br>
	 * C type : display_pos
	 */
	@Field(27) 
	public it start(display_pos start) {
		this.io.setNativeObjectField(this, 27, start);
		return this;
	}
	/**
	 * Current buffer or string position of the iterator, including<br>
	 * position in overlay strings etc.<br>
	 * C type : display_pos
	 */
	@Field(28) 
	public display_pos current() {
		return this.io.getNativeObjectField(this, 28);
	}
	/**
	 * Current buffer or string position of the iterator, including<br>
	 * position in overlay strings etc.<br>
	 * C type : display_pos
	 */
	@Field(28) 
	public it current(display_pos current) {
		this.io.setNativeObjectField(this, 28, current);
		return this;
	}
	/**
	 * Total number of overlay strings to process.  This can be ><br>
	 * OVERLAY_STRING_CHUNK_SIZE.
	 */
	@Field(29) 
	public int n_overlay_strings() {
		return this.io.getIntField(this, 29);
	}
	/**
	 * Total number of overlay strings to process.  This can be ><br>
	 * OVERLAY_STRING_CHUNK_SIZE.
	 */
	@Field(29) 
	public it n_overlay_strings(int n_overlay_strings) {
		this.io.setIntField(this, 29, n_overlay_strings);
		return this;
	}
	/// C type : Lisp_Object[16]
	@Array({16}) 
	@Field(31) 
	public Pointer<Lisp_Object > overlay_strings() {
		return this.io.getPointerField(this, 31);
	}
	/**
	 * For each overlay string, the overlay it came from.<br>
	 * C type : Lisp_Object[16]
	 */
	@Array({16}) 
	@Field(32) 
	public Pointer<Lisp_Object > string_overlays() {
		return this.io.getPointerField(this, 32);
	}
	/**
	 * Stack of saved values.  New entries are pushed when we begin to<br>
	 * process an overlay string or a string from a `glyph' property.<br>
	 * Entries are popped when we return to deliver display elements<br>
	 * from what we previously had.<br>
	 * C type : iterator_stack_entry[5]
	 */
	@Array({5}) 
	@Field(35) 
	public Pointer<it.iterator_stack_entry > stack() {
		return this.io.getPointerField(this, 35);
	}
	/// Stack pointer.
	@Field(36) 
	public int sp() {
		return this.io.getIntField(this, 36);
	}
	/// Stack pointer.
	@Field(36) 
	public it sp(int sp) {
		this.io.setIntField(this, 36, sp);
		return this;
	}
	/**
	 * An enumeration describing what the next display element is<br>
	 * after a call to get_next_display_element.<br>
	 * C type : display_element_type
	 */
	@Field(38) 
	public IntValuedEnum<display_element_type > what() {
		return this.io.getEnumField(this, 38);
	}
	/**
	 * An enumeration describing what the next display element is<br>
	 * after a call to get_next_display_element.<br>
	 * C type : display_element_type
	 */
	@Field(38) 
	public it what(IntValuedEnum<display_element_type > what) {
		this.io.setEnumField(this, 38, what);
		return this;
	}
	/// Face to use.
	@Field(39) 
	public int face_id() {
		return this.io.getIntField(this, 39);
	}
	/// Face to use.
	@Field(39) 
	public it face_id(int face_id) {
		this.io.setIntField(this, 39, face_id);
		return this;
	}
	/// Setting of buffer-local variable selective-display-ellipsis.
	@Field(40) 
	@Bits(1) 
	public int selective_display_ellipsis_p() {
		return this.io.getIntField(this, 40);
	}
	/// Setting of buffer-local variable selective-display-ellipsis.
	@Field(40) 
	@Bits(1) 
	public it selective_display_ellipsis_p(int selective_display_ellipsis_p) {
		this.io.setIntField(this, 40, selective_display_ellipsis_p);
		return this;
	}
	/**
	 * 1 means control characters are translated into the form `^C'<br>
	 * where the `^' can be replaced by a display table entry.
	 */
	@Field(41) 
	@Bits(1) 
	public int ctl_arrow_p() {
		return this.io.getIntField(this, 41);
	}
	/**
	 * 1 means control characters are translated into the form `^C'<br>
	 * where the `^' can be replaced by a display table entry.
	 */
	@Field(41) 
	@Bits(1) 
	public it ctl_arrow_p(int ctl_arrow_p) {
		this.io.setIntField(this, 41, ctl_arrow_p);
		return this;
	}
	/// Non-zero means that the current face has a box.
	@Field(42) 
	@Bits(1) 
	public int face_box_p() {
		return this.io.getIntField(this, 42);
	}
	/// Non-zero means that the current face has a box.
	@Field(42) 
	@Bits(1) 
	public it face_box_p(int face_box_p) {
		this.io.setIntField(this, 42, face_box_p);
		return this;
	}
	/**
	 * Non-null means that the current character is the first in a run<br>
	 * of characters with box face.
	 */
	@Field(43) 
	@Bits(1) 
	public int start_of_box_run_p() {
		return this.io.getIntField(this, 43);
	}
	/**
	 * Non-null means that the current character is the first in a run<br>
	 * of characters with box face.
	 */
	@Field(43) 
	@Bits(1) 
	public it start_of_box_run_p(int start_of_box_run_p) {
		this.io.setIntField(this, 43, start_of_box_run_p);
		return this;
	}
	/**
	 * Non-zero means that the current character is the last in a run<br>
	 * of characters with box face.
	 */
	@Field(44) 
	@Bits(1) 
	public int end_of_box_run_p() {
		return this.io.getIntField(this, 44);
	}
	/**
	 * Non-zero means that the current character is the last in a run<br>
	 * of characters with box face.
	 */
	@Field(44) 
	@Bits(1) 
	public it end_of_box_run_p(int end_of_box_run_p) {
		this.io.setIntField(this, 44, end_of_box_run_p);
		return this;
	}
	/// 1 means overlay strings at end_charpos have been processed.
	@Field(45) 
	@Bits(1) 
	public int overlay_strings_at_end_processed_p() {
		return this.io.getIntField(this, 45);
	}
	/// 1 means overlay strings at end_charpos have been processed.
	@Field(45) 
	@Bits(1) 
	public it overlay_strings_at_end_processed_p(int overlay_strings_at_end_processed_p) {
		this.io.setIntField(this, 45, overlay_strings_at_end_processed_p);
		return this;
	}
	/**
	 * 1 means to ignore overlay strings at current pos, as they have<br>
	 * already been processed.
	 */
	@Field(46) 
	@Bits(1) 
	public int ignore_overlay_strings_at_pos_p() {
		return this.io.getIntField(this, 46);
	}
	/**
	 * 1 means to ignore overlay strings at current pos, as they have<br>
	 * already been processed.
	 */
	@Field(46) 
	@Bits(1) 
	public it ignore_overlay_strings_at_pos_p(int ignore_overlay_strings_at_pos_p) {
		this.io.setIntField(this, 46, ignore_overlay_strings_at_pos_p);
		return this;
	}
	/**
	 * 1 means the actual glyph is not available in the current<br>
	 * system.
	 */
	@Field(47) 
	@Bits(1) 
	public int glyph_not_available_p() {
		return this.io.getIntField(this, 47);
	}
	/**
	 * 1 means the actual glyph is not available in the current<br>
	 * system.
	 */
	@Field(47) 
	@Bits(1) 
	public it glyph_not_available_p(int glyph_not_available_p) {
		this.io.setIntField(this, 47, glyph_not_available_p);
		return this;
	}
	/**
	 * 1 means the next line in display_line continues a character<br>
	 * consisting of more than one glyph, and some glyphs of this<br>
	 * character have been put on the previous line.
	 */
	@Field(48) 
	@Bits(1) 
	public int starts_in_middle_of_char_p() {
		return this.io.getIntField(this, 48);
	}
	/**
	 * 1 means the next line in display_line continues a character<br>
	 * consisting of more than one glyph, and some glyphs of this<br>
	 * character have been put on the previous line.
	 */
	@Field(48) 
	@Bits(1) 
	public it starts_in_middle_of_char_p(int starts_in_middle_of_char_p) {
		this.io.setIntField(this, 48, starts_in_middle_of_char_p);
		return this;
	}
	/**
	 * If 1, saved_face_id contains the id of the face in front of text<br>
	 * skipped due to selective display.
	 */
	@Field(49) 
	@Bits(1) 
	public int face_before_selective_p() {
		return this.io.getIntField(this, 49);
	}
	/**
	 * If 1, saved_face_id contains the id of the face in front of text<br>
	 * skipped due to selective display.
	 */
	@Field(49) 
	@Bits(1) 
	public it face_before_selective_p(int face_before_selective_p) {
		this.io.setIntField(this, 49, face_before_selective_p);
		return this;
	}
	/**
	 * If 1, adjust current glyph so it does not increase current row<br>
	 * descent/ascent (line-height property).  Reset after this glyph.
	 */
	@Field(50) 
	@Bits(1) 
	public int constrain_row_ascent_descent_p() {
		return this.io.getIntField(this, 50);
	}
	/**
	 * If 1, adjust current glyph so it does not increase current row<br>
	 * descent/ascent (line-height property).  Reset after this glyph.
	 */
	@Field(50) 
	@Bits(1) 
	public it constrain_row_ascent_descent_p(int constrain_row_ascent_descent_p) {
		this.io.setIntField(this, 50, constrain_row_ascent_descent_p);
		return this;
	}
	/// C type : line_wrap_method
	@Field(51) 
	public IntValuedEnum<line_wrap_method > line_wrap() {
		return this.io.getEnumField(this, 51);
	}
	/// C type : line_wrap_method
	@Field(51) 
	public it line_wrap(IntValuedEnum<line_wrap_method > line_wrap) {
		this.io.setEnumField(this, 51, line_wrap);
		return this;
	}
	/**
	 * The ID of the default face to use.  One of DEFAULT_FACE_ID,<br>
	 * MODE_LINE_FACE_ID, etc, depending on what we are displaying.
	 */
	@Field(52) 
	public int base_face_id() {
		return this.io.getIntField(this, 52);
	}
	/**
	 * The ID of the default face to use.  One of DEFAULT_FACE_ID,<br>
	 * MODE_LINE_FACE_ID, etc, depending on what we are displaying.
	 */
	@Field(52) 
	public it base_face_id(int base_face_id) {
		this.io.setIntField(this, 52, base_face_id);
		return this;
	}
	/**
	 * If `what' == IT_CHARACTER, the character and the length in bytes<br>
	 * of its multibyte sequence.  The character comes from a buffer or<br>
	 * a string.  It may be different from the character displayed in<br>
	 * case that unibyte_display_via_language_environment is set.<br>
	 * If `what' == IT_COMPOSITION, the first component of a composition<br>
	 * and length in bytes of the composition.<br>
	 * If `what' is anything else, these two are undefined (will<br>
	 * probably hold values for the last IT_CHARACTER or IT_COMPOSITION<br>
	 * traversed by the iterator.<br>
	 * The values are updated by get_next_display_element, so they are<br>
	 * out of sync with the value returned by IT_CHARPOS between the<br>
	 * time set_iterator_to_next advances the position and the time<br>
	 * get_next_display_element loads the new values into c and len.
	 */
	@Field(53) 
	public int c() {
		return this.io.getIntField(this, 53);
	}
	/**
	 * If `what' == IT_CHARACTER, the character and the length in bytes<br>
	 * of its multibyte sequence.  The character comes from a buffer or<br>
	 * a string.  It may be different from the character displayed in<br>
	 * case that unibyte_display_via_language_environment is set.<br>
	 * If `what' == IT_COMPOSITION, the first component of a composition<br>
	 * and length in bytes of the composition.<br>
	 * If `what' is anything else, these two are undefined (will<br>
	 * probably hold values for the last IT_CHARACTER or IT_COMPOSITION<br>
	 * traversed by the iterator.<br>
	 * The values are updated by get_next_display_element, so they are<br>
	 * out of sync with the value returned by IT_CHARPOS between the<br>
	 * time set_iterator_to_next advances the position and the time<br>
	 * get_next_display_element loads the new values into c and len.
	 */
	@Field(53) 
	public it c(int c) {
		this.io.setIntField(this, 53, c);
		return this;
	}
	/**
	 * If `what' == IT_CHARACTER, the character and the length in bytes<br>
	 * of its multibyte sequence.  The character comes from a buffer or<br>
	 * a string.  It may be different from the character displayed in<br>
	 * case that unibyte_display_via_language_environment is set.<br>
	 * If `what' == IT_COMPOSITION, the first component of a composition<br>
	 * and length in bytes of the composition.<br>
	 * If `what' is anything else, these two are undefined (will<br>
	 * probably hold values for the last IT_CHARACTER or IT_COMPOSITION<br>
	 * traversed by the iterator.<br>
	 * The values are updated by get_next_display_element, so they are<br>
	 * out of sync with the value returned by IT_CHARPOS between the<br>
	 * time set_iterator_to_next advances the position and the time<br>
	 * get_next_display_element loads the new values into c and len.
	 */
	@Field(54) 
	public int len() {
		return this.io.getIntField(this, 54);
	}
	/**
	 * If `what' == IT_CHARACTER, the character and the length in bytes<br>
	 * of its multibyte sequence.  The character comes from a buffer or<br>
	 * a string.  It may be different from the character displayed in<br>
	 * case that unibyte_display_via_language_environment is set.<br>
	 * If `what' == IT_COMPOSITION, the first component of a composition<br>
	 * and length in bytes of the composition.<br>
	 * If `what' is anything else, these two are undefined (will<br>
	 * probably hold values for the last IT_CHARACTER or IT_COMPOSITION<br>
	 * traversed by the iterator.<br>
	 * The values are updated by get_next_display_element, so they are<br>
	 * out of sync with the value returned by IT_CHARPOS between the<br>
	 * time set_iterator_to_next advances the position and the time<br>
	 * get_next_display_element loads the new values into c and len.
	 */
	@Field(54) 
	public it len(int len) {
		this.io.setIntField(this, 54, len);
		return this;
	}
	/**
	 * If what == IT_COMPOSITION, iterator substructure for the<br>
	 * composition.<br>
	 * C type : composition_it
	 */
	@Field(55) 
	public composition_it cmp_it() {
		return this.io.getNativeObjectField(this, 55);
	}
	/**
	 * If what == IT_COMPOSITION, iterator substructure for the<br>
	 * composition.<br>
	 * C type : composition_it
	 */
	@Field(55) 
	public it cmp_it(composition_it cmp_it) {
		this.io.setNativeObjectField(this, 55, cmp_it);
		return this;
	}
	/**
	 * The character to display, possibly translated to multibyte if<br>
	 * multibyte_p is zero or unibyte_display_via_language_environment<br>
	 * is set.  This is set after get_next_display_element has been<br>
	 * called.  If we are setting it->C directly before calling<br>
	 * PRODUCE_GLYPHS, this should be set beforehand too.
	 */
	@Field(56) 
	public int char_to_display() {
		return this.io.getIntField(this, 56);
	}
	/**
	 * The character to display, possibly translated to multibyte if<br>
	 * multibyte_p is zero or unibyte_display_via_language_environment<br>
	 * is set.  This is set after get_next_display_element has been<br>
	 * called.  If we are setting it->C directly before calling<br>
	 * PRODUCE_GLYPHS, this should be set beforehand too.
	 */
	@Field(56) 
	public it char_to_display(int char_to_display) {
		this.io.setIntField(this, 56, char_to_display);
		return this;
	}
	/**
	 * If what == IT_GLYPHLESS, the method to display such a<br>
	 * character.<br>
	 * C type : glyphless_display_method
	 */
	@Field(57) 
	public IntValuedEnum<glyphless_display_method > glyphless_method() {
		return this.io.getEnumField(this, 57);
	}
	/**
	 * If what == IT_GLYPHLESS, the method to display such a<br>
	 * character.<br>
	 * C type : glyphless_display_method
	 */
	@Field(57) 
	public it glyphless_method(IntValuedEnum<glyphless_display_method > glyphless_method) {
		this.io.setEnumField(this, 57, glyphless_method);
		return this;
	}
	/// If what == IT_IMAGE, the id of the image to display.
	@Ptr 
	@Field(58) 
	public long image_id() {
		return this.io.getSizeTField(this, 58);
	}
	/// If what == IT_IMAGE, the id of the image to display.
	@Ptr 
	@Field(58) 
	public it image_id(long image_id) {
		this.io.setSizeTField(this, 58, image_id);
		return this;
	}
	/**
	 * Values from `slice' property.<br>
	 * C type : it_slice
	 */
	@Field(59) 
	public it_slice slice() {
		return this.io.getNativeObjectField(this, 59);
	}
	/**
	 * Values from `slice' property.<br>
	 * C type : it_slice
	 */
	@Field(59) 
	public it slice(it_slice slice) {
		this.io.setNativeObjectField(this, 59, slice);
		return this;
	}
	/// Computed from the value of the `raise' property.
	@Field(61) 
	public short voffset() {
		return this.io.getShortField(this, 61);
	}
	/// Computed from the value of the `raise' property.
	@Field(61) 
	public it voffset(short voffset) {
		this.io.setShortField(this, 61, voffset);
		return this;
	}
	/// Number of columns per \t.
	@Field(62) 
	public short tab_width() {
		return this.io.getShortField(this, 62);
	}
	/// Number of columns per \t.
	@Field(62) 
	public it tab_width(short tab_width) {
		this.io.setShortField(this, 62, tab_width);
		return this;
	}
	/// C type : text_pos
	@Field(65) 
	public text_pos position() {
		return this.io.getNativeObjectField(this, 65);
	}
	/// C type : text_pos
	@Field(65) 
	public it position(text_pos position) {
		this.io.setNativeObjectField(this, 65, position);
		return this;
	}
	/// Width in pixels of truncation and continuation glyphs.
	@Field(66) 
	public short truncation_pixel_width() {
		return this.io.getShortField(this, 66);
	}
	/// Width in pixels of truncation and continuation glyphs.
	@Field(66) 
	public it truncation_pixel_width(short truncation_pixel_width) {
		this.io.setShortField(this, 66, truncation_pixel_width);
		return this;
	}
	/// Width in pixels of truncation and continuation glyphs.
	@Field(67) 
	public short continuation_pixel_width() {
		return this.io.getShortField(this, 67);
	}
	/// Width in pixels of truncation and continuation glyphs.
	@Field(67) 
	public it continuation_pixel_width(short continuation_pixel_width) {
		this.io.setShortField(this, 67, continuation_pixel_width);
		return this;
	}
	/**
	 * First and last visible x-position in the display area.  If window<br>
	 * is hscrolled by n columns, first_visible_x == n * FRAME_COLUMN_WIDTH<br>
	 * (f), and last_visible_x == pixel width of W + first_visible_x.
	 */
	@Field(68) 
	public int first_visible_x() {
		return this.io.getIntField(this, 68);
	}
	/**
	 * First and last visible x-position in the display area.  If window<br>
	 * is hscrolled by n columns, first_visible_x == n * FRAME_COLUMN_WIDTH<br>
	 * (f), and last_visible_x == pixel width of W + first_visible_x.
	 */
	@Field(68) 
	public it first_visible_x(int first_visible_x) {
		this.io.setIntField(this, 68, first_visible_x);
		return this;
	}
	/**
	 * First and last visible x-position in the display area.  If window<br>
	 * is hscrolled by n columns, first_visible_x == n * FRAME_COLUMN_WIDTH<br>
	 * (f), and last_visible_x == pixel width of W + first_visible_x.
	 */
	@Field(69) 
	public int last_visible_x() {
		return this.io.getIntField(this, 69);
	}
	/**
	 * First and last visible x-position in the display area.  If window<br>
	 * is hscrolled by n columns, first_visible_x == n * FRAME_COLUMN_WIDTH<br>
	 * (f), and last_visible_x == pixel width of W + first_visible_x.
	 */
	@Field(69) 
	public it last_visible_x(int last_visible_x) {
		this.io.setIntField(this, 69, last_visible_x);
		return this;
	}
	/**
	 * Last visible y-position + 1 in the display area without a mode<br>
	 * line, if the window has one.
	 */
	@Field(70) 
	public int last_visible_y() {
		return this.io.getIntField(this, 70);
	}
	/**
	 * Last visible y-position + 1 in the display area without a mode<br>
	 * line, if the window has one.
	 */
	@Field(70) 
	public it last_visible_y(int last_visible_y) {
		this.io.setIntField(this, 70, last_visible_y);
		return this;
	}
	/**
	 * Default amount of additional space in pixels between lines (for<br>
	 * window systems only.)
	 */
	@Field(71) 
	public int extra_line_spacing() {
		return this.io.getIntField(this, 71);
	}
	/**
	 * Default amount of additional space in pixels between lines (for<br>
	 * window systems only.)
	 */
	@Field(71) 
	public it extra_line_spacing(int extra_line_spacing) {
		this.io.setIntField(this, 71, extra_line_spacing);
		return this;
	}
	/// Max extra line spacing added in this row.
	@Field(72) 
	public int max_extra_line_spacing() {
		return this.io.getIntField(this, 72);
	}
	/// Max extra line spacing added in this row.
	@Field(72) 
	public it max_extra_line_spacing(int max_extra_line_spacing) {
		this.io.setIntField(this, 72, max_extra_line_spacing);
		return this;
	}
	/**
	 * Override font height information for this glyph.<br>
	 * Used if override_ascent >= 0.  Cleared after this glyph.
	 */
	@Field(73) 
	public int override_ascent() {
		return this.io.getIntField(this, 73);
	}
	/**
	 * Override font height information for this glyph.<br>
	 * Used if override_ascent >= 0.  Cleared after this glyph.
	 */
	@Field(73) 
	public it override_ascent(int override_ascent) {
		this.io.setIntField(this, 73, override_ascent);
		return this;
	}
	/**
	 * Override font height information for this glyph.<br>
	 * Used if override_ascent >= 0.  Cleared after this glyph.
	 */
	@Field(74) 
	public int override_descent() {
		return this.io.getIntField(this, 74);
	}
	/**
	 * Override font height information for this glyph.<br>
	 * Used if override_ascent >= 0.  Cleared after this glyph.
	 */
	@Field(74) 
	public it override_descent(int override_descent) {
		this.io.setIntField(this, 74, override_descent);
		return this;
	}
	/**
	 * Override font height information for this glyph.<br>
	 * Used if override_ascent >= 0.  Cleared after this glyph.
	 */
	@Field(75) 
	public int override_boff() {
		return this.io.getIntField(this, 75);
	}
	/**
	 * Override font height information for this glyph.<br>
	 * Used if override_ascent >= 0.  Cleared after this glyph.
	 */
	@Field(75) 
	public it override_boff(int override_boff) {
		this.io.setIntField(this, 75, override_boff);
		return this;
	}
	/**
	 * If non-null, glyphs are produced in glyph_row with each call to<br>
	 * produce_glyphs.<br>
	 * C type : glyph_row*
	 */
	@Field(76) 
	public Pointer<glyph_row > glyph_row() {
		return this.io.getPointerField(this, 76);
	}
	/**
	 * If non-null, glyphs are produced in glyph_row with each call to<br>
	 * produce_glyphs.<br>
	 * C type : glyph_row*
	 */
	@Field(76) 
	public it glyph_row(Pointer<glyph_row > glyph_row) {
		this.io.setPointerField(this, 76, glyph_row);
		return this;
	}
	/**
	 * The area of glyph_row to which glyphs are added.<br>
	 * C type : glyph_row_area
	 */
	@Field(77) 
	public IntValuedEnum<glyph_row_area > area() {
		return this.io.getEnumField(this, 77);
	}
	/**
	 * The area of glyph_row to which glyphs are added.<br>
	 * C type : glyph_row_area
	 */
	@Field(77) 
	public it area(IntValuedEnum<glyph_row_area > area) {
		this.io.setEnumField(this, 77, area);
		return this;
	}
	/**
	 * Number of glyphs needed for the last character requested via<br>
	 * produce_glyphs.  This is 1 except for tabs.
	 */
	@Field(78) 
	public int nglyphs() {
		return this.io.getIntField(this, 78);
	}
	/**
	 * Number of glyphs needed for the last character requested via<br>
	 * produce_glyphs.  This is 1 except for tabs.
	 */
	@Field(78) 
	public it nglyphs(int nglyphs) {
		this.io.setIntField(this, 78, nglyphs);
		return this;
	}
	/**
	 * Width of the display element in pixels.  Result of<br>
	 * produce_glyphs.
	 */
	@Field(79) 
	public int pixel_width() {
		return this.io.getIntField(this, 79);
	}
	/**
	 * Width of the display element in pixels.  Result of<br>
	 * produce_glyphs.
	 */
	@Field(79) 
	public it pixel_width(int pixel_width) {
		this.io.setIntField(this, 79, pixel_width);
		return this;
	}
	/**
	 * Current, maximum logical, and maximum physical line height<br>
	 * information.  Result of produce_glyphs.
	 */
	@Field(80) 
	public int ascent() {
		return this.io.getIntField(this, 80);
	}
	/**
	 * Current, maximum logical, and maximum physical line height<br>
	 * information.  Result of produce_glyphs.
	 */
	@Field(80) 
	public it ascent(int ascent) {
		this.io.setIntField(this, 80, ascent);
		return this;
	}
	/**
	 * Current, maximum logical, and maximum physical line height<br>
	 * information.  Result of produce_glyphs.
	 */
	@Field(81) 
	public int descent() {
		return this.io.getIntField(this, 81);
	}
	/**
	 * Current, maximum logical, and maximum physical line height<br>
	 * information.  Result of produce_glyphs.
	 */
	@Field(81) 
	public it descent(int descent) {
		this.io.setIntField(this, 81, descent);
		return this;
	}
	/**
	 * Current, maximum logical, and maximum physical line height<br>
	 * information.  Result of produce_glyphs.
	 */
	@Field(82) 
	public int max_ascent() {
		return this.io.getIntField(this, 82);
	}
	/**
	 * Current, maximum logical, and maximum physical line height<br>
	 * information.  Result of produce_glyphs.
	 */
	@Field(82) 
	public it max_ascent(int max_ascent) {
		this.io.setIntField(this, 82, max_ascent);
		return this;
	}
	/**
	 * Current, maximum logical, and maximum physical line height<br>
	 * information.  Result of produce_glyphs.
	 */
	@Field(83) 
	public int max_descent() {
		return this.io.getIntField(this, 83);
	}
	/**
	 * Current, maximum logical, and maximum physical line height<br>
	 * information.  Result of produce_glyphs.
	 */
	@Field(83) 
	public it max_descent(int max_descent) {
		this.io.setIntField(this, 83, max_descent);
		return this;
	}
	@Field(84) 
	public int phys_ascent() {
		return this.io.getIntField(this, 84);
	}
	@Field(84) 
	public it phys_ascent(int phys_ascent) {
		this.io.setIntField(this, 84, phys_ascent);
		return this;
	}
	@Field(85) 
	public int phys_descent() {
		return this.io.getIntField(this, 85);
	}
	@Field(85) 
	public it phys_descent(int phys_descent) {
		this.io.setIntField(this, 85, phys_descent);
		return this;
	}
	@Field(86) 
	public int max_phys_ascent() {
		return this.io.getIntField(this, 86);
	}
	@Field(86) 
	public it max_phys_ascent(int max_phys_ascent) {
		this.io.setIntField(this, 86, max_phys_ascent);
		return this;
	}
	@Field(87) 
	public int max_phys_descent() {
		return this.io.getIntField(this, 87);
	}
	@Field(87) 
	public it max_phys_descent(int max_phys_descent) {
		this.io.setIntField(this, 87, max_phys_descent);
		return this;
	}
	/**
	 * Current x pixel position within the display line.  This value<br>
	 * does not include the width of continuation lines in front of the<br>
	 * line.  The value of current_x is automatically incremented by<br>
	 * pixel_width with each call to produce_glyphs.
	 */
	@Field(88) 
	public int current_x() {
		return this.io.getIntField(this, 88);
	}
	/**
	 * Current x pixel position within the display line.  This value<br>
	 * does not include the width of continuation lines in front of the<br>
	 * line.  The value of current_x is automatically incremented by<br>
	 * pixel_width with each call to produce_glyphs.
	 */
	@Field(88) 
	public it current_x(int current_x) {
		this.io.setIntField(this, 88, current_x);
		return this;
	}
	/**
	 * Accumulated width of continuation lines.  If > 0, this means we<br>
	 * are currently in a continuation line.  This is initially zero and<br>
	 * incremented/reset by display_line, move_it_to etc.
	 */
	@Field(89) 
	public int continuation_lines_width() {
		return this.io.getIntField(this, 89);
	}
	/**
	 * Accumulated width of continuation lines.  If > 0, this means we<br>
	 * are currently in a continuation line.  This is initially zero and<br>
	 * incremented/reset by display_line, move_it_to etc.
	 */
	@Field(89) 
	public it continuation_lines_width(int continuation_lines_width) {
		this.io.setIntField(this, 89, continuation_lines_width);
		return this;
	}
	/**
	 * Buffer position that ends the buffer text line being iterated.<br>
	 * This is normally the position after the newline at EOL.  If this<br>
	 * is the last line of the buffer and it doesn't have a newline,<br>
	 * value is ZV/ZV_BYTE.  Set and used only if IT->bidi_p, for<br>
	 * setting the end position of glyph rows produced for continuation<br>
	 * lines, see display_line.<br>
	 * C type : text_pos
	 */
	@Field(90) 
	public text_pos eol_pos() {
		return this.io.getNativeObjectField(this, 90);
	}
	/**
	 * Buffer position that ends the buffer text line being iterated.<br>
	 * This is normally the position after the newline at EOL.  If this<br>
	 * is the last line of the buffer and it doesn't have a newline,<br>
	 * value is ZV/ZV_BYTE.  Set and used only if IT->bidi_p, for<br>
	 * setting the end position of glyph rows produced for continuation<br>
	 * lines, see display_line.<br>
	 * C type : text_pos
	 */
	@Field(90) 
	public it eol_pos(text_pos eol_pos) {
		this.io.setNativeObjectField(this, 90, eol_pos);
		return this;
	}
	/**
	 * Current y-position.  Automatically incremented by the height of<br>
	 * glyph_row in move_it_to and display_line.
	 */
	@Field(91) 
	public int current_y() {
		return this.io.getIntField(this, 91);
	}
	/**
	 * Current y-position.  Automatically incremented by the height of<br>
	 * glyph_row in move_it_to and display_line.
	 */
	@Field(91) 
	public it current_y(int current_y) {
		this.io.setIntField(this, 91, current_y);
		return this;
	}
	/// Vertical matrix position of first text line in window.
	@Field(92) 
	public int first_vpos() {
		return this.io.getIntField(this, 92);
	}
	/// Vertical matrix position of first text line in window.
	@Field(92) 
	public it first_vpos(int first_vpos) {
		this.io.setIntField(this, 92, first_vpos);
		return this;
	}
	/**
	 * Current vertical matrix position, or line number.  Automatically<br>
	 * incremented by move_it_to and display_line.
	 */
	@Field(93) 
	public int vpos() {
		return this.io.getIntField(this, 93);
	}
	/**
	 * Current vertical matrix position, or line number.  Automatically<br>
	 * incremented by move_it_to and display_line.
	 */
	@Field(93) 
	public it vpos(int vpos) {
		this.io.setIntField(this, 93, vpos);
		return this;
	}
	/**
	 * Horizontal matrix position reached in move_it_in_display_line.<br>
	 * Only set there, not in display_line.
	 */
	@Field(94) 
	public int hpos() {
		return this.io.getIntField(this, 94);
	}
	/**
	 * Horizontal matrix position reached in move_it_in_display_line.<br>
	 * Only set there, not in display_line.
	 */
	@Field(94) 
	public it hpos(int hpos) {
		this.io.setIntField(this, 94, hpos);
		return this;
	}
	/// Left fringe bitmap number (enum fringe_bitmap_type).
	@Field(95) 
	@Bits(16) 
	public int left_user_fringe_bitmap() {
		return this.io.getIntField(this, 95);
	}
	/// Left fringe bitmap number (enum fringe_bitmap_type).
	@Field(95) 
	@Bits(16) 
	public it left_user_fringe_bitmap(int left_user_fringe_bitmap) {
		this.io.setIntField(this, 95, left_user_fringe_bitmap);
		return this;
	}
	/// Right fringe bitmap number (enum fringe_bitmap_type).
	@Field(96) 
	@Bits(16) 
	public int right_user_fringe_bitmap() {
		return this.io.getIntField(this, 96);
	}
	/// Right fringe bitmap number (enum fringe_bitmap_type).
	@Field(96) 
	@Bits(16) 
	public it right_user_fringe_bitmap(int right_user_fringe_bitmap) {
		this.io.setIntField(this, 96, right_user_fringe_bitmap);
		return this;
	}
	/// Face of the left fringe glyph.
	@Field(97) 
	@Bits(20) 
	public int left_user_fringe_face_id() {
		return this.io.getIntField(this, 97);
	}
	/// Face of the left fringe glyph.
	@Field(97) 
	@Bits(20) 
	public it left_user_fringe_face_id(int left_user_fringe_face_id) {
		this.io.setIntField(this, 97, left_user_fringe_face_id);
		return this;
	}
	/// Face of the right fringe glyph.
	@Field(98) 
	@Bits(20) 
	public int right_user_fringe_face_id() {
		return this.io.getIntField(this, 98);
	}
	/// Face of the right fringe glyph.
	@Field(98) 
	@Bits(20) 
	public it right_user_fringe_face_id(int right_user_fringe_face_id) {
		this.io.setIntField(this, 98, right_user_fringe_face_id);
		return this;
	}
	/**
	 * Non-zero means we need to reorder bidirectional text for display<br>
	 * in the visual order.
	 */
	@Field(99) 
	@Bits(1) 
	public int bidi_p() {
		return this.io.getIntField(this, 99);
	}
	/**
	 * Non-zero means we need to reorder bidirectional text for display<br>
	 * in the visual order.
	 */
	@Field(99) 
	@Bits(1) 
	public it bidi_p(int bidi_p) {
		this.io.setIntField(this, 99, bidi_p);
		return this;
	}
	/**
	 * For iterating over bidirectional text.<br>
	 * C type : bidi_it
	 */
	@Field(100) 
	public bidi_it bidi_it() {
		return this.io.getNativeObjectField(this, 100);
	}
	/**
	 * For iterating over bidirectional text.<br>
	 * C type : bidi_it
	 */
	@Field(100) 
	public it bidi_it(bidi_it bidi_it) {
		this.io.setNativeObjectField(this, 100, bidi_it);
		return this;
	}
	/// C type : bidi_dir_t
	@Field(101) 
	public IntValuedEnum<bidi_dir_t > paragraph_embedding() {
		return this.io.getEnumField(this, 101);
	}
	/// C type : bidi_dir_t
	@Field(101) 
	public it paragraph_embedding(IntValuedEnum<bidi_dir_t > paragraph_embedding) {
		this.io.setEnumField(this, 101, paragraph_embedding);
		return this;
	}
	/// <i>native declaration : dispextern.h:1566</i>
	/// <i>native declaration : dispextern.h:1566</i>
	public static class iterator_stack_entry extends StructObject {
		public iterator_stack_entry() {
			super();
		}
		@Field(1) 
		public int string_nchars() {
			return this.io.getIntField(this, 1);
		}
		@Field(1) 
		public iterator_stack_entry string_nchars(int string_nchars) {
			this.io.setIntField(this, 1, string_nchars);
			return this;
		}
		/// C type : composition_it
		@Field(6) 
		public composition_it cmp_it() {
			return this.io.getNativeObjectField(this, 6);
		}
		/// C type : composition_it
		@Field(6) 
		public iterator_stack_entry cmp_it(composition_it cmp_it) {
			this.io.setNativeObjectField(this, 6, cmp_it);
			return this;
		}
		@Field(7) 
		public int face_id() {
			return this.io.getIntField(this, 7);
		}
		@Field(7) 
		public iterator_stack_entry face_id(int face_id) {
			this.io.setIntField(this, 7, face_id);
			return this;
		}
		/**
		 * Save values specific to a given method.<br>
		 * C type : u_union
		 */
		@Field(8) 
		public emacs.intervals.glyph.u_union u() {
			return this.io.getNativeObjectField(this, 8);
		}
		/**
		 * Save values specific to a given method.<br>
		 * C type : u_union
		 */
		@Field(8) 
		public iterator_stack_entry u(emacs.intervals.glyph.u_union u) {
			this.io.setNativeObjectField(this, 8, u);
			return this;
		}
		/**
		 * current text and display positions.<br>
		 * C type : text_pos
		 */
		@Field(9) 
		public text_pos position() {
			return this.io.getNativeObjectField(this, 9);
		}
		/**
		 * current text and display positions.<br>
		 * C type : text_pos
		 */
		@Field(9) 
		public iterator_stack_entry position(text_pos position) {
			this.io.setNativeObjectField(this, 9, position);
			return this;
		}
		/// C type : display_pos
		@Field(10) 
		public display_pos current() {
			return this.io.getNativeObjectField(this, 10);
		}
		/// C type : display_pos
		@Field(10) 
		public iterator_stack_entry current(display_pos current) {
			this.io.setNativeObjectField(this, 10, current);
			return this;
		}
		/// C type : glyph_row_area
		@Field(12) 
		public IntValuedEnum<glyph_row_area > area() {
			return this.io.getEnumField(this, 12);
		}
		/// C type : glyph_row_area
		@Field(12) 
		public iterator_stack_entry area(IntValuedEnum<glyph_row_area > area) {
			this.io.setEnumField(this, 12, area);
			return this;
		}
		/// C type : it_method
		@Field(13) 
		public IntValuedEnum<it_method > method() {
			return this.io.getEnumField(this, 13);
		}
		/// C type : it_method
		@Field(13) 
		public iterator_stack_entry method(IntValuedEnum<it_method > method) {
			this.io.setEnumField(this, 13, method);
			return this;
		}
		/// C type : bidi_dir_t
		@Field(14) 
		public IntValuedEnum<bidi_dir_t > paragraph_embedding() {
			return this.io.getEnumField(this, 14);
		}
		/// C type : bidi_dir_t
		@Field(14) 
		public iterator_stack_entry paragraph_embedding(IntValuedEnum<bidi_dir_t > paragraph_embedding) {
			this.io.setEnumField(this, 14, paragraph_embedding);
			return this;
		}
		@Field(15) 
		@Bits(1) 
		public int multibyte_p() {
			return this.io.getIntField(this, 15);
		}
		@Field(15) 
		@Bits(1) 
		public iterator_stack_entry multibyte_p(int multibyte_p) {
			this.io.setIntField(this, 15, multibyte_p);
			return this;
		}
		@Field(16) 
		@Bits(1) 
		public int string_from_display_prop_p() {
			return this.io.getIntField(this, 16);
		}
		@Field(16) 
		@Bits(1) 
		public iterator_stack_entry string_from_display_prop_p(int string_from_display_prop_p) {
			this.io.setIntField(this, 16, string_from_display_prop_p);
			return this;
		}
		@Field(17) 
		@Bits(1) 
		public int string_from_prefix_prop_p() {
			return this.io.getIntField(this, 17);
		}
		@Field(17) 
		@Bits(1) 
		public iterator_stack_entry string_from_prefix_prop_p(int string_from_prefix_prop_p) {
			this.io.setIntField(this, 17, string_from_prefix_prop_p);
			return this;
		}
		@Field(18) 
		@Bits(1) 
		public int display_ellipsis_p() {
			return this.io.getIntField(this, 18);
		}
		@Field(18) 
		@Bits(1) 
		public iterator_stack_entry display_ellipsis_p(int display_ellipsis_p) {
			this.io.setIntField(this, 18, display_ellipsis_p);
			return this;
		}
		@Field(19) 
		@Bits(1) 
		public int avoid_cursor_p() {
			return this.io.getIntField(this, 19);
		}
		@Field(19) 
		@Bits(1) 
		public iterator_stack_entry avoid_cursor_p(int avoid_cursor_p) {
			this.io.setIntField(this, 19, avoid_cursor_p);
			return this;
		}
		@Field(20) 
		@Bits(1) 
		public int bidi_p() {
			return this.io.getIntField(this, 20);
		}
		@Field(20) 
		@Bits(1) 
		public iterator_stack_entry bidi_p(int bidi_p) {
			this.io.setIntField(this, 20, bidi_p);
			return this;
		}
		@Field(21) 
		@Bits(1) 
		public int from_disp_prop_p() {
			return this.io.getIntField(this, 21);
		}
		@Field(21) 
		@Bits(1) 
		public iterator_stack_entry from_disp_prop_p(int from_disp_prop_p) {
			this.io.setIntField(this, 21, from_disp_prop_p);
			return this;
		}
		/// C type : line_wrap_method
		@Field(22) 
		public IntValuedEnum<line_wrap_method > line_wrap() {
			return this.io.getEnumField(this, 22);
		}
		/// C type : line_wrap_method
		@Field(22) 
		public iterator_stack_entry line_wrap(IntValuedEnum<line_wrap_method > line_wrap) {
			this.io.setEnumField(this, 22, line_wrap);
			return this;
		}
		/// properties from display property that are reset by another display property.
		@Field(23) 
		public short voffset() {
			return this.io.getShortField(this, 23);
		}
		/// properties from display property that are reset by another display property.
		@Field(23) 
		public iterator_stack_entry voffset(short voffset) {
			this.io.setShortField(this, 23, voffset);
			return this;
		}
		/// <i>native declaration : dispextern.h:1559</i>
		/// <i>native declaration : dispextern.h:1559</i>
		@Union 
		public static class u_union extends StructObject {
			public u_union() {
				super();
			}
			/**
			 * method == GET_FROM_IMAGE<br>
			 * C type : image_struct
			 */
			@Field(0) 
			public emacs.intervals.glyph.u_union.image_struct image() {
				return this.io.getNativeObjectField(this, 0);
			}
			/**
			 * method == GET_FROM_IMAGE<br>
			 * C type : image_struct
			 */
			@Field(0) 
			public u_union image(emacs.intervals.glyph.u_union.image_struct image) {
				this.io.setNativeObjectField(this, 0, image);
				return this;
			}
			/**
			 * method == GET_FROM_COMPOSITION<br>
			 * C type : comp_struct
			 */
			@Field(1) 
			public emacs.intervals.glyph.u_union.comp_struct comp() {
				return this.io.getNativeObjectField(this, 1);
			}
			/**
			 * method == GET_FROM_COMPOSITION<br>
			 * C type : comp_struct
			 */
			@Field(1) 
			public u_union comp(emacs.intervals.glyph.u_union.comp_struct comp) {
				this.io.setNativeObjectField(this, 1, comp);
				return this;
			}
			/**
			 * method == GET_FROM_STRETCH<br>
			 * C type : stretch_struct
			 */
			@Field(2) 
			public emacs.intervals.glyph.u_union.stretch_struct stretch() {
				return this.io.getNativeObjectField(this, 2);
			}
			/**
			 * method == GET_FROM_STRETCH<br>
			 * C type : stretch_struct
			 */
			@Field(2) 
			public u_union stretch(emacs.intervals.glyph.u_union.stretch_struct stretch) {
				this.io.setNativeObjectField(this, 2, stretch);
				return this;
			}
			/// <i>native declaration : dispextern.h:1552</i>
			/// <i>native declaration : dispextern.h:1552</i>
			public static class image_struct extends StructObject {
				public image_struct() {
					super();
				}
				/// C type : it_slice
				@Field(1) 
				public it_slice slice() {
					return this.io.getNativeObjectField(this, 1);
				}
				/// C type : it_slice
				@Field(1) 
				public image_struct slice(it_slice slice) {
					this.io.setNativeObjectField(this, 1, slice);
					return this;
				}
				@Ptr 
				@Field(2) 
				public long image_id() {
					return this.io.getSizeTField(this, 2);
				}
				@Ptr 
				@Field(2) 
				public image_struct image_id(long image_id) {
					this.io.setSizeTField(this, 2, image_id);
					return this;
				}
			};
			/// <i>native declaration : dispextern.h:1555</i>
			/// <i>native declaration : dispextern.h:1555</i>
			public static class comp_struct extends StructObject {
				public comp_struct() {
					super();
				}
			};
			/// <i>native declaration : dispextern.h:1558</i>
			/// <i>native declaration : dispextern.h:1558</i>
			public static class stretch_struct extends StructObject {
				public stretch_struct() {
					super();
				}
			};
		};
	};
}
