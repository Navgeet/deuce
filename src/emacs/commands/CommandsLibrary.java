package emacs.commands;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>commands</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("commands") 
@Runtime(CRuntime.class) 
public class CommandsLibrary {
	static {
		BridJ.register();
	}
	/// Nonzero means ^G can quit instantly
	public int immediate_quit() {
		try {
			return (int)BridJ.getNativeLibrary("commands").getSymbolPointer("immediate_quit").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero means ^G can quit instantly
	public CommandsLibrary immediate_quit(int immediate_quit) {
		try {
			{
				BridJ.getNativeLibrary("commands").getSymbolPointer("immediate_quit").as(int.class).set(immediate_quit);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int update_mode_lines() {
		try {
			return (int)BridJ.getNativeLibrary("commands").getSymbolPointer("update_mode_lines").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public CommandsLibrary update_mode_lines(int update_mode_lines) {
		try {
			{
				BridJ.getNativeLibrary("commands").getSymbolPointer("update_mode_lines").as(int.class).set(update_mode_lines);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
}
