package emacs.font;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>font</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("font") 
@Runtime(CRuntime.class) 
public class FontLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : font.h:167</i>
	 */
	public enum font_property_index implements IntValuedEnum<font_property_index > {
		/**
		 * FONT-TYPE is a symbol indicating a font backend; currently `x',<br>
		 * `xft', and `ftx' are available on X, `uniscribe' and `gdi' on<br>
		 * Windows, and `ns' under Cocoa / GNUstep.
		 */
		FONT_TYPE_INDEX(0),
		/// FONT-FOUNDRY is a foundry name (symbol).
		FONT_FOUNDRY_INDEX(1),
		/// FONT-FAMILY is a family name (symbol).
		FONT_FAMILY_INDEX(2),
		/// FONT-ADSTYLE is an additional style name (symbol).
		FONT_ADSTYLE_INDEX(3),
		/**
		 * FONT-REGISTRY is a combination of a charset-registry and<br>
		 * charset-encoding name (symbol).
		 */
		FONT_REGISTRY_INDEX(4),
		/**
		 * FONT-WEIGHT is a numeric value of weight (e.g. medium, bold) of<br>
		 * the font.  The lowest 8 bits is an index determining the<br>
		 * symbolic name, and the higher bits is the actual numeric value<br>
		 * defined in `font-weight-table'.
		 */
		FONT_WEIGHT_INDEX(5),
		/**
		 * FONT-SLANT is a numeric value of slant (e.g. r, i, o) of the<br>
		 * font.  The lowest 8 bits is an index determining the symbolic<br>
		 * name, and the higher bits is the actual numeric value defined<br>
		 * in `font-slant-table'.
		 */
		FONT_SLANT_INDEX(6),
		/**
		 * FONT-WIDTH is a numeric value of setwidth (e.g. normal) of the<br>
		 * font.  The lowest 8 bits is an index determining the symbolic<br>
		 * name, and the higher bits is the actual numeric value defined<br>
		 * `font-width-table'.
		 */
		FONT_WIDTH_INDEX(7),
		/**
		 * FONT-SIZE is a size of the font.  If integer, it is a pixel<br>
		 * size.  For a font-spec, the value can be a float specifying<br>
		 * the point size.  The value zero means that the font is<br>
		 * scalable.
		 */
		FONT_SIZE_INDEX(8),
		/**
		 * FONT-DPI is a resolution (dot per inch) for which the font is<br>
		 * designed.
		 */
		FONT_DPI_INDEX(9),
		/**
		 * FONT-SPACING is a spacing (mono, proportional, charcell) of the<br>
		 * font (integer; one of enum font_spacing).
		 */
		FONT_SPACING_INDEX(10),
		/**
		 * FONT-AVGWIDTH is an average width (1/10 pixel unit) of the<br>
		 * font.
		 */
		FONT_AVGWIDTH_INDEX(11),
		/**
		 * In a font-spec, the value is an alist of extra information of a<br>
		 * font such as name, OpenType features, and language coverage.<br>
		 * In addition, in a font-entity, the value may contain a pair<br>
		 * (font-entity . INFO) where INFO is extra information to identify<br>
		 * a font (font-driver dependent).<br>
		 * alist		alist
		 */
		FONT_EXTRA_INDEX(12),
		/// This value is the length of font-spec vector.
		FONT_SPEC_MAX(13),
		/// List of font-objects opened from the font-entity.
		FONT_OBJLIST_INDEX((int)FontLibrary.font_property_index.FONT_SPEC_MAX.value()),
		/// Font-entity from which the font-object is opened.
		FONT_ENTITY_INDEX((int)FontLibrary.font_property_index.FONT_SPEC_MAX.value()),
		/// This value is the length of font-entity vector.
		FONT_ENTITY_MAX((int)FontLibrary.font_property_index.FONT_SPEC_MAX.value() + 1),
		/// XLFD name of the font (string).
		FONT_NAME_INDEX((int)FontLibrary.font_property_index.FONT_ENTITY_MAX.value()),
		/**
		 * Full name of the font (string).  It is the name extracted from<br>
		 * the opened font, and may be different from the above.  It may be<br>
		 * nil if the opened font doesn't give a name.
		 */
		FONT_FULLNAME_INDEX((int)FontLibrary.font_property_index.FONT_ENTITY_MAX.value() + 1),
		/**
		 * File name of the font or nil if a file associated with the font<br>
		 * is not available.
		 */
		FONT_FILE_INDEX((int)FontLibrary.font_property_index.FONT_ENTITY_MAX.value() + 2),
		/// Format of the font (symbol) or nil if unknown.
		FONT_FORMAT_INDEX((int)FontLibrary.font_property_index.FONT_ENTITY_MAX.value() + 3),
		/// This value is the length of font-object vector.
		FONT_OBJECT_MAX((int)FontLibrary.font_property_index.FONT_ENTITY_MAX.value() + 4);
		font_property_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<font_property_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<font_property_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : font.h:327</i>
	 */
	public enum font_spacing implements IntValuedEnum<font_spacing > {
		FONT_SPACING_PROPORTIONAL(0),
		FONT_SPACING_DUAL(90),
		FONT_SPACING_MONO(100),
		FONT_SPACING_CHARCELL(110);
		font_spacing(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<font_spacing > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<font_spacing > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_SUSPEND_BY_DST = (int)2;
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_INVALID_CMD = (int)3;
	/// <i>native declaration : font.h</i>
	public static final int FONT_INVALID_CODE = (int)-1;
	/// <i>native declaration : font.h</i>
	public static final int FONT_ENCODING_NOT_DECIDED = (int)255;
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_QUIT = (int)4;
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_SUSPEND_BY_SRC = (int)1;
	/// <i>native declaration : font.h</i>
	public static final int FONT_PIXEL_SIZE_QUANTUM = (int)1;
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_SUCCESS = (int)0;
	/// <i>native declaration : font.h</i>
	public static final double PT_PER_INCH = (double)72.27;
	/**
	 * Setup fields of the structure pointed by CCL appropriately for the<br>
	 * execution of ccl program CCL_PROG (symbol or vector).<br>
	 * Original signature : <code>int setup_ccl_program(ccl_program*)</code><br>
	 * <i>native declaration : ccl.h:62</i>
	 */
	public static native int setup_ccl_program(Pointer<ccl_program > ccl_programPtr1);
	/**
	 * Original signature : <code>void ccl_driver(ccl_program*, int*, int*, int, int)</code><br>
	 * <i>native declaration : ccl.h:64</i>
	 */
	public static native void ccl_driver(Pointer<ccl_program > ccl_programPtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, int int1, int int2);
	/**
	 * Original signature : <code>int EXFUN()</code><br>
	 * <i>native declaration : font.h:595</i>
	 */
	public static native int EXFUN();
	/**
	 * Original signature : <code>Lisp_Object copy_font_spec(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:597</i>
	 */
	public static native FontLibrary.Lisp_Object copy_font_spec(FontLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object merge_font_spec(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:599</i>
	 */
	public static native FontLibrary.Lisp_Object merge_font_spec(FontLibrary.Lisp_Object Lisp_Object1, FontLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object font_make_entity()</code><br>
	 * <i>native declaration : font.h:601</i>
	 */
	public static native FontLibrary.Lisp_Object font_make_entity();
	/**
	 * Original signature : <code>Lisp_Object font_make_object(int, Lisp_Object, int)</code><br>
	 * <i>native declaration : font.h:603</i>
	 */
	public static native FontLibrary.Lisp_Object font_make_object(int int1, FontLibrary.Lisp_Object Lisp_Object1, int int2);
	/**
	 * Original signature : <code>Lisp_Object find_font_encoding(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:605</i>
	 */
	public static native FontLibrary.Lisp_Object find_font_encoding(FontLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int font_registry_charsets(Lisp_Object, charset**, charset**)</code><br>
	 * <i>native declaration : font.h:607</i>
	 */
	public static native int font_registry_charsets(FontLibrary.Lisp_Object Lisp_Object1, Pointer<Pointer<FontLibrary.charset > > charsetPtrPtr1, Pointer<Pointer<FontLibrary.charset > > charsetPtrPtr2);
	/**
	 * Original signature : <code>int font_style_to_value(font_property_index, Lisp_Object, int)</code><br>
	 * <i>native declaration : font.h:609</i>
	 */
	public static native int font_style_to_value(IntValuedEnum<FontLibrary.font_property_index > prop, FontLibrary.Lisp_Object name, int noerror);
	/**
	 * Original signature : <code>Lisp_Object font_style_symbolic(Lisp_Object, font_property_index, int)</code><br>
	 * <i>native declaration : font.h:611</i>
	 */
	public static native FontLibrary.Lisp_Object font_style_symbolic(FontLibrary.Lisp_Object font, IntValuedEnum<FontLibrary.font_property_index > prop, int for_face);
	/**
	 * Original signature : <code>int font_match_p(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:613</i>
	 */
	public static native int font_match_p(FontLibrary.Lisp_Object spec, FontLibrary.Lisp_Object font);
	/**
	 * Original signature : <code>Lisp_Object font_list_entities(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:615</i>
	 */
	public static native FontLibrary.Lisp_Object font_list_entities(FontLibrary.Lisp_Object frame, FontLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>Lisp_Object font_get_name(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:617</i>
	 */
	public static native FontLibrary.Lisp_Object font_get_name(FontLibrary.Lisp_Object font_object);
	/**
	 * Original signature : <code>Lisp_Object font_spec_from_name(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:619</i>
	 */
	public static native FontLibrary.Lisp_Object font_spec_from_name(FontLibrary.Lisp_Object font_name);
	/**
	 * Original signature : <code>Lisp_Object font_get_frame(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:621</i>
	 */
	public static native FontLibrary.Lisp_Object font_get_frame(FontLibrary.Lisp_Object font_object);
	/**
	 * Original signature : <code>int font_has_char(Lisp_Object, int)</code><br>
	 * <i>native declaration : font.h:623</i>
	 */
	public static native int font_has_char(FontLibrary.Lisp_Object Lisp_Object1, int int1);
	/**
	 * Original signature : <code>void font_clear_prop(Lisp_Object*, font_property_index)</code><br>
	 * <i>native declaration : font.h:625</i>
	 */
	public static native void font_clear_prop(Pointer<FontLibrary.Lisp_Object > attrs, IntValuedEnum<FontLibrary.font_property_index > prop);
	/**
	 * Original signature : <code>Lisp_Object font_find_for_lface(FRAME_PTR, Lisp_Object*, Lisp_Object, int)</code><br>
	 * <i>native declaration : font.h:627</i>
	 */
	public static native FontLibrary.Lisp_Object font_find_for_lface(FontLibrary.FRAME_PTR f, Pointer<FontLibrary.Lisp_Object > lface, FontLibrary.Lisp_Object spec, int c);
	/**
	 * Original signature : <code>Lisp_Object font_open_for_lface(FRAME_PTR, Lisp_Object, Lisp_Object*, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:629</i>
	 */
	public static native FontLibrary.Lisp_Object font_open_for_lface(FontLibrary.FRAME_PTR f, FontLibrary.Lisp_Object entity, Pointer<FontLibrary.Lisp_Object > lface, FontLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>Lisp_Object font_load_for_lface(FRAME_PTR, Lisp_Object*, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:631</i>
	 */
	public static native FontLibrary.Lisp_Object font_load_for_lface(FontLibrary.FRAME_PTR f, Pointer<FontLibrary.Lisp_Object > lface, FontLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>void font_prepare_for_face(FRAME_PTR, face*)</code><br>
	 * <i>native declaration : font.h:633</i>
	 */
	public static native void font_prepare_for_face(FontLibrary.FRAME_PTR f, Pointer<FontLibrary.face > face);
	/**
	 * Original signature : <code>void font_done_for_face(FRAME_PTR, face*)</code><br>
	 * <i>native declaration : font.h:635</i>
	 */
	public static native void font_done_for_face(FontLibrary.FRAME_PTR f, Pointer<FontLibrary.face > face);
	/**
	 * Original signature : <code>Lisp_Object font_open_by_spec(FRAME_PTR, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:637</i>
	 */
	public static native FontLibrary.Lisp_Object font_open_by_spec(FontLibrary.FRAME_PTR f, FontLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>Lisp_Object font_open_by_name(FRAME_PTR, const char*)</code><br>
	 * <i>native declaration : font.h:639</i>
	 */
	public static native FontLibrary.Lisp_Object font_open_by_name(FontLibrary.FRAME_PTR f, Pointer<Byte > name);
	/**
	 * Original signature : <code>Lisp_Object font_intern_prop(const char*, ptrdiff_t, int)</code><br>
	 * <i>native declaration : font.h:641</i>
	 */
	public static native FontLibrary.Lisp_Object font_intern_prop(Pointer<Byte > str, @Ptr long len, int force_symbol);
	/**
	 * Original signature : <code>void font_update_sort_order(int*)</code><br>
	 * <i>native declaration : font.h:643</i>
	 */
	public static native void font_update_sort_order(Pointer<Integer > order);
	/**
	 * Original signature : <code>void font_parse_family_registry(Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:645</i>
	 */
	public static native void font_parse_family_registry(FontLibrary.Lisp_Object family, FontLibrary.Lisp_Object registry, FontLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>int font_parse_xlfd(char*, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:647</i>
	 */
	public static native int font_parse_xlfd(Pointer<Byte > name, FontLibrary.Lisp_Object font);
	/**
	 * Original signature : <code>int font_unparse_xlfd(Lisp_Object, int, char*, int)</code><br>
	 * <i>native declaration : font.h:649</i>
	 */
	public static native int font_unparse_xlfd(FontLibrary.Lisp_Object font, int pixel_size, Pointer<Byte > name, int bytes);
	/**
	 * Original signature : <code>int font_unparse_fcname(Lisp_Object, int, char*, int)</code><br>
	 * <i>native declaration : font.h:651</i>
	 */
	public static native int font_unparse_fcname(FontLibrary.Lisp_Object font, int pixel_size, Pointer<Byte > name, int bytes);
	/**
	 * Original signature : <code>void register_font_driver(font_driver*, FRAME_PTR)</code><br>
	 * <i>native declaration : font.h:653</i>
	 */
	public static native void register_font_driver(Pointer<font_driver > driver, FontLibrary.FRAME_PTR f);
	/**
	 * Original signature : <code>void free_font_driver_list(FRAME_PTR)</code><br>
	 * <i>native declaration : font.h:655</i>
	 */
	public static native void free_font_driver_list(FontLibrary.FRAME_PTR f);
	/**
	 * Original signature : <code>Lisp_Object font_update_drivers(FRAME_PTR, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:657</i>
	 */
	public static native FontLibrary.Lisp_Object font_update_drivers(FontLibrary.FRAME_PTR f, FontLibrary.Lisp_Object list);
	/**
	 * Original signature : <code>Lisp_Object font_range(EMACS_INT*, window*, face*, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:659</i>
	 */
	public static native FontLibrary.Lisp_Object font_range(Pointer<FontLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<FontLibrary.window > windowPtr1, Pointer<FontLibrary.face > facePtr1, FontLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void font_fill_lglyph_metrics(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:661</i>
	 */
	public static native void font_fill_lglyph_metrics(FontLibrary.Lisp_Object Lisp_Object1, FontLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object font_put_extra(Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:663</i>
	 */
	public static native FontLibrary.Lisp_Object font_put_extra(FontLibrary.Lisp_Object font, FontLibrary.Lisp_Object prop, FontLibrary.Lisp_Object val);
	/**
	 * Original signature : <code>int font_put_frame_data(FRAME_PTR, font_driver*, void*)</code><br>
	 * <i>native declaration : font.h:665</i>
	 */
	public static native int font_put_frame_data(FontLibrary.FRAME_PTR f, Pointer<font_driver > driver, Pointer<? > data);
	/**
	 * Original signature : <code>void* font_get_frame_data(FRAME_PTR, font_driver*)</code><br>
	 * <i>native declaration : font.h:667</i>
	 */
	public static native Pointer<? > font_get_frame_data(FontLibrary.FRAME_PTR f, Pointer<font_driver > driver);
	/**
	 * Original signature : <code>void font_filter_properties(Lisp_Object, Lisp_Object, const const char*[], const const char*[])</code><br>
	 * <i>native declaration : font.h:669</i>
	 */
	public static native void font_filter_properties(FontLibrary.Lisp_Object font, FontLibrary.Lisp_Object alist, Pointer<Pointer<Byte > > boolean_properties, Pointer<Pointer<Byte > > non_boolean_properties);
	/**
	 * Original signature : <code>void font_add_log(const char*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:672</i>
	 */
	public static native void font_add_log(Pointer<Byte > charPtr1, FontLibrary.Lisp_Object Lisp_Object1, FontLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void font_deferred_log(const char*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:674</i>
	 */
	public static native void font_deferred_log(Pointer<Byte > charPtr1, FontLibrary.Lisp_Object Lisp_Object1, FontLibrary.Lisp_Object Lisp_Object2);
	/// Undefined type
	/// Undefined type
	public static interface face {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface FRAME_PTR {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface frame {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface glyph_string {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface window {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface charset {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface EMACS_INT {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface vectorlike_header {
		
	};
}
