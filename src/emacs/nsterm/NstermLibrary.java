package emacs.nsterm;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>nsterm</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("nsterm") 
@Runtime(CRuntime.class) 
public class NstermLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:26</i>
	 */
	public enum window_part implements IntValuedEnum<window_part > {
		ON_NOTHING(0),
		ON_TEXT(1),
		ON_MODE_LINE(2),
		ON_VERTICAL_BORDER(3),
		ON_HEADER_LINE(4),
		ON_LEFT_FRINGE(5),
		ON_RIGHT_FRINGE(6),
		ON_LEFT_MARGIN(7),
		ON_RIGHT_MARGIN(8),
		ON_SCROLL_BAR(9);
		window_part(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<window_part > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<window_part > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:67</i>
	 */
	public enum glyph_type implements IntValuedEnum<glyph_type > {
		/// Glyph describes a character.
		CHAR_GLYPH(0),
		/// Glyph describes a static composition.
		COMPOSITE_GLYPH(1),
		/// Glyph describes a glyphless character.
		GLYPHLESS_GLYPH(2),
		/// Glyph describes an image.
		IMAGE_GLYPH(3),
		/// Glyph is a space of fractional width and/or height.
		STRETCH_GLYPH(4);
		glyph_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<glyph_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<glyph_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:337</i>
	 */
	public enum glyph_row_area implements IntValuedEnum<glyph_row_area > {
		LEFT_MARGIN_AREA(0),
		TEXT_AREA(1),
		RIGHT_MARGIN_AREA(2),
		LAST_AREA(3);
		glyph_row_area(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<glyph_row_area > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<glyph_row_area > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:607</i>
	 */
	public enum draw_glyphs_face implements IntValuedEnum<draw_glyphs_face > {
		DRAW_NORMAL_TEXT(0),
		DRAW_INVERSE_VIDEO(1),
		DRAW_CURSOR(2),
		DRAW_MOUSE_FACE(3),
		DRAW_IMAGE_RAISED(4),
		DRAW_IMAGE_SUNKEN(5);
		draw_glyphs_face(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<draw_glyphs_face > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<draw_glyphs_face > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:627</i>
	 */
	public enum lface_attribute_index implements IntValuedEnum<lface_attribute_index > {
		LFACE_FAMILY_INDEX(1),
		LFACE_FOUNDRY_INDEX(2),
		LFACE_SWIDTH_INDEX(3),
		LFACE_HEIGHT_INDEX(4),
		LFACE_WEIGHT_INDEX(5),
		LFACE_SLANT_INDEX(6),
		LFACE_UNDERLINE_INDEX(7),
		LFACE_INVERSE_INDEX(8),
		LFACE_FOREGROUND_INDEX(9),
		LFACE_BACKGROUND_INDEX(10),
		LFACE_STIPPLE_INDEX(11),
		LFACE_OVERLINE_INDEX(12),
		LFACE_STRIKE_THROUGH_INDEX(13),
		LFACE_BOX_INDEX(14),
		LFACE_FONT_INDEX(15),
		LFACE_INHERIT_INDEX(16),
		LFACE_FONTSET_INDEX(17),
		LFACE_VECTOR_SIZE(18);
		lface_attribute_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<lface_attribute_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<lface_attribute_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:642</i>
	 */
	public enum face_box_type implements IntValuedEnum<face_box_type > {
		/// No box around text.
		FACE_NO_BOX(0),
		/**
		 * Simple box of specified width and color.  Default width is 1, and<br>
		 * default color is the foreground color of the face.
		 */
		FACE_SIMPLE_BOX(1),
		/**
		 * Boxes with 3D shadows.  Color equals the background color of the<br>
		 * face.  Width is specified.
		 */
		FACE_RAISED_BOX(2),
		FACE_SUNKEN_BOX(3);
		face_box_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<face_box_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<face_box_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:782</i>
	 */
	public enum face_id implements IntValuedEnum<face_id > {
		DEFAULT_FACE_ID(0),
		MODE_LINE_FACE_ID(1),
		MODE_LINE_INACTIVE_FACE_ID(2),
		TOOL_BAR_FACE_ID(3),
		FRINGE_FACE_ID(4),
		HEADER_LINE_FACE_ID(5),
		SCROLL_BAR_FACE_ID(6),
		BORDER_FACE_ID(7),
		CURSOR_FACE_ID(8),
		MOUSE_FACE_ID(9),
		MENU_FACE_ID(10),
		VERTICAL_BORDER_FACE_ID(11),
		BASIC_FACE_ID_SENTINEL(12);
		face_id(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<face_id > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<face_id > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:830</i>
	 */
	public enum bidi_type_t implements IntValuedEnum<bidi_type_t > {
		UNKNOWN_BT(0),
		STRONG_L(1),
		STRONG_R(2),
		WEAK_EN(3),
		WEAK_AN(4),
		WEAK_BN(5),
		NEUTRAL_B(6),
		STRONG_AL(7),
		LRE(8),
		LRO(9),
		RLE(10),
		RLO(11),
		PDF(12),
		WEAK_ES(13),
		WEAK_ET(14),
		WEAK_CS(15),
		WEAK_NSM(16),
		NEUTRAL_S(17),
		NEUTRAL_WS(18),
		/// other neutrals
		NEUTRAL_ON(19);
		bidi_type_t(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<bidi_type_t > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<bidi_type_t > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:836</i>
	 */
	public enum bidi_dir_t implements IntValuedEnum<bidi_dir_t > {
		NEUTRAL_DIR(0),
		L2R(1),
		R2L(2);
		bidi_dir_t(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<bidi_dir_t > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<bidi_dir_t > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:960</i>
	 */
	public enum display_element_type implements IntValuedEnum<display_element_type > {
		/// A normal character.
		IT_CHARACTER(0),
		/// A composition (static and automatic).
		IT_COMPOSITION(1),
		/// A glyphless character (e.g. ZWNJ, LRE).
		IT_GLYPHLESS(2),
		/// An image.
		IT_IMAGE(3),
		/// A flexible width and height space.
		IT_STRETCH(4),
		/// End of buffer or string.
		IT_EOB(5),
		/**
		 * Truncation glyphs.  Never returned by get_next_display_element.<br>
		 * Used to get display information about truncation glyphs via<br>
		 * produce_glyphs.
		 */
		IT_TRUNCATION(6),
		/// Continuation glyphs.  See the comment for IT_TRUNCATION.
		IT_CONTINUATION(7);
		display_element_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<display_element_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<display_element_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:971</i>
	 */
	public enum prop_idx implements IntValuedEnum<prop_idx > {
		FONTIFIED_PROP_IDX(0),
		FACE_PROP_IDX(1),
		INVISIBLE_PROP_IDX(2),
		DISPLAY_PROP_IDX(3),
		COMPOSITION_PROP_IDX(4),
		/// Not a property.  Used to indicate changes in overlays.
		OVERLAY_PROP_IDX(5),
		/// Sentinel.
		LAST_PROP_IDX(6);
		prop_idx(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<prop_idx > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<prop_idx > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:976</i>
	 */
	public enum line_wrap_method implements IntValuedEnum<line_wrap_method > {
		TRUNCATE(0),
		WORD_WRAP(1),
		WINDOW_WRAP(2);
		line_wrap_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<line_wrap_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<line_wrap_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:989</i>
	 */
	public enum glyphless_display_method implements IntValuedEnum<glyphless_display_method > {
		/**
		 * Display a thin (1-pixel width) space.  On a TTY, display a<br>
		 * 1-character width space.
		 */
		GLYPHLESS_DISPLAY_THIN_SPACE(0),
		/// Display an empty box of proper width.
		GLYPHLESS_DISPLAY_EMPTY_BOX(1),
		/// Display an acronym string in a box.
		GLYPHLESS_DISPLAY_ACRONYM(2),
		/// Display the hexadecimal code of the character in a box.
		GLYPHLESS_DISPLAY_HEX_CODE(3);
		glyphless_display_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<glyphless_display_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<glyphless_display_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:1004</i>
	 */
	public enum it_method implements IntValuedEnum<it_method > {
		GET_FROM_BUFFER(0),
		GET_FROM_DISPLAY_VECTOR(1),
		GET_FROM_STRING(2),
		GET_FROM_C_STRING(3),
		GET_FROM_IMAGE(4),
		GET_FROM_STRETCH(5),
		NUM_IT_METHODS(6);
		it_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<it_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<it_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:1585</i>
	 */
	public enum move_operation_enum implements IntValuedEnum<move_operation_enum > {
		/// Stop if specified x-position is reached.
		MOVE_TO_X(1),
		/// Stop if specified y-position is reached.
		MOVE_TO_Y(2),
		/// Stop if specified vpos is reached.
		MOVE_TO_VPOS(4),
		/// Stop if specified buffer or string position is reached.
		MOVE_TO_POS(8);
		move_operation_enum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<move_operation_enum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<move_operation_enum > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:1725</i>
	 */
	public enum tool_bar_item_idx implements IntValuedEnum<tool_bar_item_idx > {
		/**
		 * The key of the tool-bar item.  Used to remove items when a binding<br>
		 * for `undefined' is found.
		 */
		TOOL_BAR_ITEM_KEY(0),
		/// Non-nil if item is enabled.
		TOOL_BAR_ITEM_ENABLED_P(1),
		/// Non-nil if item is selected (pressed).
		TOOL_BAR_ITEM_SELECTED_P(2),
		/// Caption.
		TOOL_BAR_ITEM_CAPTION(3),
		/**
		 * Image(s) to display.  This is either a single image specification<br>
		 * or a vector of specifications.
		 */
		TOOL_BAR_ITEM_IMAGES(4),
		/// The binding.
		TOOL_BAR_ITEM_BINDING(5),
		/**
		 * Button type.  One of nil (default button), t (a separator),<br>
		 * `:radio', or `:toggle'.  The latter two currently do nothing.
		 */
		TOOL_BAR_ITEM_TYPE(6),
		/// Help string.
		TOOL_BAR_ITEM_HELP(7),
		/// Icon file name of right to left image when an RTL locale is used.
		TOOL_BAR_ITEM_RTL_IMAGE(8),
		/// Label to show when text labels are enabled.
		TOOL_BAR_ITEM_LABEL(9),
		/// If we shall show the label only below the icon and not beside it.
		TOOL_BAR_ITEM_VERT_ONLY(10),
		/**
		 * Sentinel = number of slots in tool_bar_items occupied by one<br>
		 * tool-bar item.
		 */
		TOOL_BAR_ITEM_NSLOTS(11);
		tool_bar_item_idx(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<tool_bar_item_idx > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<tool_bar_item_idx > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : dispextern.h:1731</i>
	 */
	public enum tool_bar_item_image implements IntValuedEnum<tool_bar_item_image > {
		TOOL_BAR_IMAGE_ENABLED_SELECTED(0),
		TOOL_BAR_IMAGE_ENABLED_DESELECTED(1),
		TOOL_BAR_IMAGE_DISABLED_SELECTED(2),
		TOOL_BAR_IMAGE_DISABLED_DESELECTED(3);
		tool_bar_item_image(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<tool_bar_item_image > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<tool_bar_item_image > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : frame.h:2047</i>
	 */
	public enum output_method implements IntValuedEnum<output_method > {
		output_initial(0),
		output_termcap(1),
		output_x_window(2),
		output_msdos_raw(3),
		output_w32(4),
		output_mac(5),
		output_ns(6);
		output_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<output_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<output_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : frame.h:2052</i>
	 */
	public enum vertical_scroll_bar_type implements IntValuedEnum<vertical_scroll_bar_type > {
		vertical_scroll_bar_none(0),
		vertical_scroll_bar_left(1),
		vertical_scroll_bar_right(2);
		vertical_scroll_bar_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<vertical_scroll_bar_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<vertical_scroll_bar_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : frame.h:2060</i>
	 */
	public enum text_cursor_kinds implements IntValuedEnum<text_cursor_kinds > {
		DEFAULT_CURSOR(-2),
		NO_CURSOR(-1),
		FILLED_BOX_CURSOR(0),
		HOLLOW_BOX_CURSOR(1),
		BAR_CURSOR(2),
		HBAR_CURSOR(3);
		text_cursor_kinds(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<text_cursor_kinds > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<text_cursor_kinds > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : frame.h:2068</i>
	 */
	public enum fullscreen_type implements IntValuedEnum<fullscreen_type > {
		FULLSCREEN_NONE(0),
		FULLSCREEN_WIDTH(1),
		FULLSCREEN_HEIGHT(2),
		FULLSCREEN_BOTH(3),
		FULLSCREEN_MAXIMIZED(19),
		FULLSCREEN_WAIT(256);
		fullscreen_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<fullscreen_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<fullscreen_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : character.h:2635</i>
	 */
	public enum unicode_category_t implements IntValuedEnum<unicode_category_t > {
		UNICODE_CATEGORY_UNKNOWN(0),
		UNICODE_CATEGORY_Lu(1),
		UNICODE_CATEGORY_Ll(2),
		UNICODE_CATEGORY_Lt(3),
		UNICODE_CATEGORY_Lm(4),
		UNICODE_CATEGORY_Lo(5),
		UNICODE_CATEGORY_Mn(6),
		UNICODE_CATEGORY_Mc(7),
		UNICODE_CATEGORY_Me(8),
		UNICODE_CATEGORY_Nd(9),
		UNICODE_CATEGORY_Nl(10),
		UNICODE_CATEGORY_No(11),
		UNICODE_CATEGORY_Pc(12),
		UNICODE_CATEGORY_Pd(13),
		UNICODE_CATEGORY_Ps(14),
		UNICODE_CATEGORY_Pe(15),
		UNICODE_CATEGORY_Pi(16),
		UNICODE_CATEGORY_Pf(17),
		UNICODE_CATEGORY_Po(18),
		UNICODE_CATEGORY_Sm(19),
		UNICODE_CATEGORY_Sc(20),
		UNICODE_CATEGORY_Sk(21),
		UNICODE_CATEGORY_So(22),
		UNICODE_CATEGORY_Zs(23),
		UNICODE_CATEGORY_Zl(24),
		UNICODE_CATEGORY_Zp(25),
		UNICODE_CATEGORY_Cc(26),
		UNICODE_CATEGORY_Cf(27),
		UNICODE_CATEGORY_Cs(28),
		UNICODE_CATEGORY_Co(29),
		UNICODE_CATEGORY_Cn(30);
		unicode_category_t(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<unicode_category_t > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<unicode_category_t > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : font.h:2835</i>
	 */
	public enum font_property_index implements IntValuedEnum<font_property_index > {
		/**
		 * FONT-TYPE is a symbol indicating a font backend; currently `x',<br>
		 * `xft', and `ftx' are available on X, `uniscribe' and `gdi' on<br>
		 * Windows, and `ns' under Cocoa / GNUstep.
		 */
		FONT_TYPE_INDEX(0),
		/// FONT-FOUNDRY is a foundry name (symbol).
		FONT_FOUNDRY_INDEX(1),
		/// FONT-FAMILY is a family name (symbol).
		FONT_FAMILY_INDEX(2),
		/// FONT-ADSTYLE is an additional style name (symbol).
		FONT_ADSTYLE_INDEX(3),
		/**
		 * FONT-REGISTRY is a combination of a charset-registry and<br>
		 * charset-encoding name (symbol).
		 */
		FONT_REGISTRY_INDEX(4),
		/**
		 * FONT-WEIGHT is a numeric value of weight (e.g. medium, bold) of<br>
		 * the font.  The lowest 8 bits is an index determining the<br>
		 * symbolic name, and the higher bits is the actual numeric value<br>
		 * defined in `font-weight-table'.
		 */
		FONT_WEIGHT_INDEX(5),
		/**
		 * FONT-SLANT is a numeric value of slant (e.g. r, i, o) of the<br>
		 * font.  The lowest 8 bits is an index determining the symbolic<br>
		 * name, and the higher bits is the actual numeric value defined<br>
		 * in `font-slant-table'.
		 */
		FONT_SLANT_INDEX(6),
		/**
		 * FONT-WIDTH is a numeric value of setwidth (e.g. normal) of the<br>
		 * font.  The lowest 8 bits is an index determining the symbolic<br>
		 * name, and the higher bits is the actual numeric value defined<br>
		 * `font-width-table'.
		 */
		FONT_WIDTH_INDEX(7),
		/**
		 * FONT-SIZE is a size of the font.  If integer, it is a pixel<br>
		 * size.  For a font-spec, the value can be a float specifying<br>
		 * the point size.  The value zero means that the font is<br>
		 * scalable.
		 */
		FONT_SIZE_INDEX(8),
		/**
		 * FONT-DPI is a resolution (dot per inch) for which the font is<br>
		 * designed.
		 */
		FONT_DPI_INDEX(9),
		/**
		 * FONT-SPACING is a spacing (mono, proportional, charcell) of the<br>
		 * font (integer; one of enum font_spacing).
		 */
		FONT_SPACING_INDEX(10),
		/**
		 * FONT-AVGWIDTH is an average width (1/10 pixel unit) of the<br>
		 * font.
		 */
		FONT_AVGWIDTH_INDEX(11),
		/**
		 * In a font-spec, the value is an alist of extra information of a<br>
		 * font such as name, OpenType features, and language coverage.<br>
		 * In addition, in a font-entity, the value may contain a pair<br>
		 * (font-entity . INFO) where INFO is extra information to identify<br>
		 * a font (font-driver dependent).<br>
		 * alist		alist
		 */
		FONT_EXTRA_INDEX(12),
		/// This value is the length of font-spec vector.
		FONT_SPEC_MAX(13),
		/// List of font-objects opened from the font-entity.
		FONT_OBJLIST_INDEX((int)NstermLibrary.font_property_index.FONT_SPEC_MAX.value()),
		/// Font-entity from which the font-object is opened.
		FONT_ENTITY_INDEX((int)NstermLibrary.font_property_index.FONT_SPEC_MAX.value()),
		/// This value is the length of font-entity vector.
		FONT_ENTITY_MAX((int)NstermLibrary.font_property_index.FONT_SPEC_MAX.value() + 1),
		/// XLFD name of the font (string).
		FONT_NAME_INDEX((int)NstermLibrary.font_property_index.FONT_ENTITY_MAX.value()),
		/**
		 * Full name of the font (string).  It is the name extracted from<br>
		 * the opened font, and may be different from the above.  It may be<br>
		 * nil if the opened font doesn't give a name.
		 */
		FONT_FULLNAME_INDEX((int)NstermLibrary.font_property_index.FONT_ENTITY_MAX.value() + 1),
		/**
		 * File name of the font or nil if a file associated with the font<br>
		 * is not available.
		 */
		FONT_FILE_INDEX((int)NstermLibrary.font_property_index.FONT_ENTITY_MAX.value() + 2),
		/// Format of the font (symbol) or nil if unknown.
		FONT_FORMAT_INDEX((int)NstermLibrary.font_property_index.FONT_ENTITY_MAX.value() + 3),
		/// This value is the length of font-object vector.
		FONT_OBJECT_MAX((int)NstermLibrary.font_property_index.FONT_ENTITY_MAX.value() + 4);
		font_property_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<font_property_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<font_property_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : font.h:2995</i>
	 */
	public enum font_spacing implements IntValuedEnum<font_spacing > {
		FONT_SPACING_PROPORTIONAL(0),
		FONT_SPACING_DUAL(90),
		FONT_SPACING_MONO(100),
		FONT_SPACING_CHARCELL(110);
		font_spacing(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<font_spacing > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<font_spacing > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : character.h</i>
	public static final int MIN_MULTIBYTE_LEADING_CODE = (int)192;
	/// <i>native declaration : font.h</i>
	public static final int FONT_INVALID_CODE = (int)-1;
	/// <i>native declaration : character.h</i>
	public static final int MAX_UNICODE_CHAR = (int)1114111;
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_ALT_CHARSET = (int)32;
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_SUCCESS = (int)0;
	/// <i>native declaration : dispextern.h</i>
	public static final int MAX_FRINGE_BITMAPS = (int)(1 << 16);
	/// <i>native declaration : dispextern.h</i>
	public static final int FONT_TYPE_UNKNOWN = (int)0;
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_BOLD = (int)4;
	/// <i>native declaration : dispextern.h</i>
	public static final long FACE_TTY_DEFAULT_BG_COLOR = (long)(-3);
	/// <i>native declaration : dispextern.h</i>
	public static final int TRY_WINDOW_CHECK_MARGINS = (int)(1 << 0);
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_SUSPEND_BY_DST = (int)2;
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_INVALID_CMD = (int)3;
	/// <i>native declaration : sysselect.h</i>
	public static final int MAXDESC = (int)32;
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_DIM = (int)8;
	/// <i>native declaration : character.h</i>
	public static final int MAX_4_BYTE_CHAR = (int)2097151;
	/// <i>native declaration : character.h</i>
	public static final int MAX_2_BYTE_CHAR = (int)2047;
	/// <i>native declaration : character.h</i>
	public static final int MAX_3_BYTE_CHAR = (int)65535;
	/// <i>native declaration : dispextern.h</i>
	public static final int OVERLAY_STRING_CHUNK_SIZE = (int)16;
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_SUSPEND_BY_SRC = (int)1;
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_INVERSE = (int)1;
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_BLINK = (int)16;
	/// <i>native declaration : dispextern.h</i>
	public static final int DEFAULT_TOOL_BAR_LABEL_SIZE = (int)14;
	/// <i>native declaration : dispextern.h</i>
	public static final int DEFAULT_TOOL_BAR_BUTTON_MARGIN = (int)4;
	/// <i>native declaration : dispextern.h</i>
	public static final int FRINGE_ID_BITS = (int)16;
	/// <i>native declaration : dispextern.h</i>
	public static final int DEFAULT_TOOL_BAR_BUTTON_RELIEF = (int)1;
	/// <i>native declaration : character.h</i>
	public static final int MAX_MULTIBYTE_LENGTH = (int)5;
	/// <i>native declaration : font.h</i>
	public static final int FONT_ENCODING_NOT_DECIDED = (int)255;
	/// <i>native declaration : dispextern.h</i>
	public static final int FACE_ID_BITS = (int)20;
	/// <i>native declaration : dispextern.h</i>
	public static final int TRY_WINDOW_IGNORE_FONTS_CHANGE = (int)(1 << 1);
	/// <i>native declaration : character.h</i>
	public static final int MAX_5_BYTE_CHAR = (int)4194175;
	/// <i>native declaration : character.h</i>
	public static final int MAX_MULTIBYTE_LEADING_CODE = (int)248;
	/// <i>native declaration : character.h</i>
	public static final int MAX_1_BYTE_CHAR = (int)127;
	/// <i>native declaration : dispextern.h</i>
	public static final long FACE_TTY_DEFAULT_COLOR = (long)(-1);
	/// <i>native declaration : dispextern.h</i>
	public static final int XASSERTS = (int)0;
	/// <i>native declaration : character.h</i>
	public static final int MAX_CHAR = (int)4194303;
	/// <i>native declaration : dispextern.h</i>
	public static final int IT_STACK_SIZE = (int)5;
	/// <i>native declaration : dispextern.h</i>
	public static final int BIDI_MAXLEVEL = (int)64;
	/// <i>native declaration : dispextern.h</i>
	public static final int MAX_FACE_ID = (int)((1 << 20) - 1);
	/// <i>native declaration : ccl.h</i>
	public static final int CCL_STAT_QUIT = (int)4;
	/// <i>native declaration : dispextern.h</i>
	public static final int TTY_CAP_UNDERLINE = (int)2;
	/// <i>native declaration : dispextern.h</i>
	public static final int No_Cursor = (int)(0);
	/// <i>native declaration : font.h</i>
	public static final int FONT_PIXEL_SIZE_QUANTUM = (int)1;
	/// <i>native declaration : dispextern.h</i>
	public static final int DEFAULT_TOOL_BAR_IMAGE_HEIGHT = (int)24;
	/// <i>native declaration : dispextern.h</i>
	public static final int FRINGE_HEIGHT_BITS = (int)8;
	/// <i>native declaration : dispextern.h</i>
	public static final int GLYPH_DEBUG = (int)0;
	/// <i>native declaration : dispextern.h</i>
	public static final long FACE_TTY_DEFAULT_FG_COLOR = (long)(-2);
	/// <i>native declaration : font.h</i>
	public static final double PT_PER_INCH = (double)72.27;
	/// <i>native declaration : nsterm.h:1600</i>
	/// <i>native declaration : nsterm.h:1600</i>
	public static abstract class frame_parm_handler extends Callback<frame_parm_handler > {
		public abstract void apply(Pointer<frame > framePtr1, NstermLibrary.Lisp_Object Lisp_Object1);
	};
	/**
	 * Original signature : <code>void bidi_init_it(int, bidi_it*)</code><br>
	 * <i>native declaration : dispextern.h:1733</i>
	 */
	public static native void bidi_init_it(int int1, Pointer<bidi_it > bidi_itPtr1);
	/**
	 * Original signature : <code>void bidi_move_to_visually_next(bidi_it*)</code><br>
	 * <i>native declaration : dispextern.h:1735</i>
	 */
	public static native void bidi_move_to_visually_next(Pointer<bidi_it > bidi_itPtr1);
	/**
	 * Original signature : <code>void bidi_paragraph_init(bidi_dir_t, bidi_it*, int)</code><br>
	 * <i>native declaration : dispextern.h:1737</i>
	 */
	public static native void bidi_paragraph_init(IntValuedEnum<NstermLibrary.bidi_dir_t > bidi_dir_t1, Pointer<bidi_it > bidi_itPtr1, int int1);
	/**
	 * Original signature : <code>int bidi_mirror_char(int)</code><br>
	 * <i>native declaration : dispextern.h:1739</i>
	 */
	public static native int bidi_mirror_char(int int1);
	/**
	 * Original signature : <code>void bidi_push_it(bidi_it*)</code><br>
	 * <i>native declaration : dispextern.h:1741</i>
	 */
	public static native void bidi_push_it(Pointer<bidi_it > bidi_itPtr1);
	/**
	 * Original signature : <code>void bidi_pop_it(bidi_it*)</code><br>
	 * <i>native declaration : dispextern.h:1743</i>
	 */
	public static native void bidi_pop_it(Pointer<bidi_it > bidi_itPtr1);
	/**
	 * Original signature : <code>void* bidi_shelve_cache()</code><br>
	 * <i>native declaration : dispextern.h:1745</i>
	 */
	public static native Pointer<? > bidi_shelve_cache();
	/**
	 * Original signature : <code>void bidi_unshelve_cache(void*, int)</code><br>
	 * <i>native declaration : dispextern.h:1747</i>
	 */
	public static native void bidi_unshelve_cache(Pointer<? > voidPtr1, int int1);
	/**
	 * Original signature : <code>glyph_row* row_containing_pos(window*, glyph_row*, glyph_row*, int)</code><br>
	 * <i>native declaration : dispextern.h:1749</i>
	 */
	public static native Pointer<glyph_row > row_containing_pos(Pointer<NstermLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, Pointer<glyph_row > glyph_rowPtr2, int int1);
	/**
	 * Original signature : <code>int line_bottom_y(it*)</code><br>
	 * <i>native declaration : dispextern.h:1751</i>
	 */
	public static native int line_bottom_y(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>int display_prop_intangible_p(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1753</i>
	 */
	public static native int display_prop_intangible_p(NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void resize_echo_area_exactly()</code><br>
	 * <i>native declaration : dispextern.h:1755</i>
	 */
	public static native void resize_echo_area_exactly();
	/**
	 * Original signature : <code>int resize_mini_window(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1757</i>
	 */
	public static native int resize_mini_window(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int try_window(Lisp_Object, text_pos, int)</code><br>
	 * <i>native declaration : dispextern.h:1759</i>
	 */
	public static native int try_window(NstermLibrary.Lisp_Object Lisp_Object1, text_pos text_pos1, int int1);
	/**
	 * Original signature : <code>void window_box(window*, int, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1761</i>
	 */
	public static native void window_box(Pointer<NstermLibrary.window > windowPtr1, int int1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4);
	/**
	 * Original signature : <code>int window_box_height(window*)</code><br>
	 * <i>native declaration : dispextern.h:1763</i>
	 */
	public static native int window_box_height(Pointer<NstermLibrary.window > windowPtr1);
	/**
	 * Original signature : <code>int window_text_bottom_y(window*)</code><br>
	 * <i>native declaration : dispextern.h:1765</i>
	 */
	public static native int window_text_bottom_y(Pointer<NstermLibrary.window > windowPtr1);
	/**
	 * Original signature : <code>int window_box_width(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1767</i>
	 */
	public static native int window_box_width(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int window_box_left(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1769</i>
	 */
	public static native int window_box_left(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int window_box_left_offset(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1771</i>
	 */
	public static native int window_box_left_offset(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int window_box_right(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1773</i>
	 */
	public static native int window_box_right(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int window_box_right_offset(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1775</i>
	 */
	public static native int window_box_right_offset(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int estimate_mode_line_height(frame*, face_id)</code><br>
	 * <i>native declaration : dispextern.h:1777</i>
	 */
	public static native int estimate_mode_line_height(Pointer<frame > framePtr1, IntValuedEnum<NstermLibrary.face_id > arg1);
	/**
	 * Original signature : <code>void pixel_to_glyph_coords(frame*, int, int, int*, int*, int*, int)</code><br>
	 * <i>native declaration : dispextern.h:1779</i>
	 */
	public static native void pixel_to_glyph_coords(Pointer<frame > framePtr1, int int1, int int2, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > intPtr3, int int3);
	/**
	 * Original signature : <code>void remember_mouse_glyph(frame*, int, int, int*)</code><br>
	 * <i>native declaration : dispextern.h:1781</i>
	 */
	public static native void remember_mouse_glyph(Pointer<frame > framePtr1, int int1, int int2, Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>void mark_window_display_accurate(Lisp_Object, int)</code><br>
	 * <i>native declaration : dispextern.h:1783</i>
	 */
	public static native void mark_window_display_accurate(NstermLibrary.Lisp_Object Lisp_Object1, int int1);
	/**
	 * Original signature : <code>void redisplay_preserve_echo_area(int)</code><br>
	 * <i>native declaration : dispextern.h:1785</i>
	 */
	public static native void redisplay_preserve_echo_area(int int1);
	/**
	 * Original signature : <code>void init_iterator(it*, window*, glyph_row*, face_id)</code><br>
	 * <i>native declaration : dispextern.h:1787</i>
	 */
	public static native void init_iterator(Pointer<it > itPtr1, Pointer<NstermLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, IntValuedEnum<NstermLibrary.face_id > arg1);
	/**
	 * Original signature : <code>void init_iterator_to_row_start(it*, window*, glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1789</i>
	 */
	public static native void init_iterator_to_row_start(Pointer<it > itPtr1, Pointer<NstermLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>void start_display(it*, window*, text_pos)</code><br>
	 * <i>native declaration : dispextern.h:1791</i>
	 */
	public static native void start_display(Pointer<it > itPtr1, Pointer<NstermLibrary.window > windowPtr1, text_pos text_pos1);
	/**
	 * Original signature : <code>void move_it_to(it*, int, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1793</i>
	 */
	public static native void move_it_to(Pointer<it > itPtr1, int int1, int int2, int int3, int int4);
	/**
	 * Original signature : <code>void move_it_vertically(it*, int)</code><br>
	 * <i>native declaration : dispextern.h:1795</i>
	 */
	public static native void move_it_vertically(Pointer<it > itPtr1, int int1);
	/**
	 * Original signature : <code>void move_it_vertically_backward(it*, int)</code><br>
	 * <i>native declaration : dispextern.h:1797</i>
	 */
	public static native void move_it_vertically_backward(Pointer<it > itPtr1, int int1);
	/**
	 * Original signature : <code>void move_it_by_lines(it*, int)</code><br>
	 * <i>native declaration : dispextern.h:1799</i>
	 */
	public static native void move_it_by_lines(Pointer<it > itPtr1, int int1);
	/**
	 * Original signature : <code>void move_it_past_eol(it*)</code><br>
	 * <i>native declaration : dispextern.h:1801</i>
	 */
	public static native void move_it_past_eol(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>void move_it_in_display_line(it*, EMACS_INT, int, move_operation_enum)</code><br>
	 * <i>native declaration : dispextern.h:1803</i>
	 */
	public static native void move_it_in_display_line(Pointer<it > it, NstermLibrary.EMACS_INT to_charpos, int to_x, IntValuedEnum<NstermLibrary.move_operation_enum > op);
	/**
	 * Original signature : <code>int in_display_vector_p(it*)</code><br>
	 * <i>native declaration : dispextern.h:1805</i>
	 */
	public static native int in_display_vector_p(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>int frame_mode_line_height(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1807</i>
	 */
	public static native int frame_mode_line_height(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void reseat_at_previous_visible_line_start(it*)</code><br>
	 * <i>native declaration : dispextern.h:1821</i>
	 */
	public static native void reseat_at_previous_visible_line_start(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>Lisp_Object lookup_glyphless_char_display(int, it*)</code><br>
	 * <i>native declaration : dispextern.h:1823</i>
	 */
	public static native NstermLibrary.Lisp_Object lookup_glyphless_char_display(int int1, Pointer<it > itPtr1);
	/**
	 * Original signature : <code>EMACS_INT compute_display_string_pos(text_pos*, bidi_string_data*, int, int*)</code><br>
	 * <i>native declaration : dispextern.h:1825</i>
	 */
	public static native NstermLibrary.EMACS_INT compute_display_string_pos(Pointer<text_pos > text_posPtr1, Pointer<bidi_string_data > bidi_string_dataPtr1, int int1, Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>EMACS_INT compute_display_string_end(EMACS_INT, bidi_string_data*)</code><br>
	 * <i>native declaration : dispextern.h:1827</i>
	 */
	public static native NstermLibrary.EMACS_INT compute_display_string_end(NstermLibrary.EMACS_INT EMACS_INT1, Pointer<bidi_string_data > bidi_string_dataPtr1);
	/**
	 * Original signature : <code>void produce_stretch_glyph(it*)</code><br>
	 * <i>native declaration : dispextern.h:1829</i>
	 */
	public static native void produce_stretch_glyph(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>void note_mouse_highlight(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1831</i>
	 */
	public static native void note_mouse_highlight(Pointer<frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void x_clear_window_mouse_face(window*)</code><br>
	 * <i>native declaration : dispextern.h:1833</i>
	 */
	public static native void x_clear_window_mouse_face(Pointer<NstermLibrary.window > windowPtr1);
	/**
	 * Original signature : <code>void cancel_mouse_face(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1835</i>
	 */
	public static native void cancel_mouse_face(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>int clear_mouse_face(Mouse_HLInfo*)</code><br>
	 * <i>native declaration : dispextern.h:1837</i>
	 */
	public static native int clear_mouse_face(Pointer<NstermLibrary.Mouse_HLInfo > Mouse_HLInfoPtr1);
	/**
	 * Original signature : <code>int cursor_in_mouse_face_p(window*)</code><br>
	 * <i>native declaration : dispextern.h:1839</i>
	 */
	public static native int cursor_in_mouse_face_p(Pointer<NstermLibrary.window > w);
	/**
	 * Original signature : <code>void tty_draw_row_with_mouse_face(window*, glyph_row*, int, int, draw_glyphs_face)</code><br>
	 * <i>native declaration : dispextern.h:1841</i>
	 */
	public static native void tty_draw_row_with_mouse_face(Pointer<NstermLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, int int1, int int2, IntValuedEnum<NstermLibrary.draw_glyphs_face > arg1);
	/**
	 * Original signature : <code>int lookup_fringe_bitmap(Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1843</i>
	 */
	public static native int lookup_fringe_bitmap(NstermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void draw_fringe_bitmap(window*, glyph_row*, int)</code><br>
	 * <i>native declaration : dispextern.h:1845</i>
	 */
	public static native void draw_fringe_bitmap(Pointer<NstermLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, int int1);
	/**
	 * Original signature : <code>void draw_row_fringe_bitmaps(window*, glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1847</i>
	 */
	public static native void draw_row_fringe_bitmaps(Pointer<NstermLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>int draw_window_fringes(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1849</i>
	 */
	public static native int draw_window_fringes(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>int update_window_fringes(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1851</i>
	 */
	public static native int update_window_fringes(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>void compute_fringe_widths(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1853</i>
	 */
	public static native void compute_fringe_widths(Pointer<frame > framePtr1, int int1);
	/**
	 * Original signature : <code>int row_hash(glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1855</i>
	 */
	public static native int row_hash(Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>void get_tty_size(int, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1857</i>
	 */
	public static native void get_tty_size(int int1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2);
	/**
	 * Original signature : <code>void request_sigio()</code><br>
	 * <i>native declaration : dispextern.h:1859</i>
	 */
	public static native void request_sigio();
	/**
	 * Original signature : <code>void unrequest_sigio()</code><br>
	 * <i>native declaration : dispextern.h:1861</i>
	 */
	public static native void unrequest_sigio();
	/**
	 * Original signature : <code>int tabs_safe_p(int)</code><br>
	 * <i>native declaration : dispextern.h:1863</i>
	 */
	public static native int tabs_safe_p(int int1);
	/**
	 * Original signature : <code>void init_baud_rate(int)</code><br>
	 * <i>native declaration : dispextern.h:1865</i>
	 */
	public static native void init_baud_rate(int int1);
	/**
	 * Original signature : <code>void init_sigio(int)</code><br>
	 * <i>native declaration : dispextern.h:1867</i>
	 */
	public static native void init_sigio(int int1);
	/**
	 * Original signature : <code>void update_face_from_frame_parameter(frame*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1869</i>
	 */
	public static native void update_face_from_frame_parameter(Pointer<frame > framePtr1, NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object tty_color_name(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1871</i>
	 */
	public static native NstermLibrary.Lisp_Object tty_color_name(Pointer<frame > framePtr1, int int1);
	/**
	 * Original signature : <code>void clear_face_cache(int)</code><br>
	 * <i>native declaration : dispextern.h:1873</i>
	 */
	public static native void clear_face_cache(int int1);
	/**
	 * Original signature : <code>long load_color(frame*, face*, Lisp_Object, lface_attribute_index)</code><br>
	 * <i>native declaration : dispextern.h:1875</i>
	 */
	@CLong 
	public static native long load_color(Pointer<frame > framePtr1, Pointer<face > facePtr1, NstermLibrary.Lisp_Object Lisp_Object1, IntValuedEnum<NstermLibrary.lface_attribute_index > arg1);
	/**
	 * Original signature : <code>void unload_color(frame*, unsigned long)</code><br>
	 * <i>native declaration : dispextern.h:1877</i>
	 */
	public static native void unload_color(Pointer<frame > framePtr1, @CLong long u1);
	/**
	 * Original signature : <code>char* choose_face_font(frame*, Lisp_Object*, Lisp_Object, int*)</code><br>
	 * <i>native declaration : dispextern.h:1879</i>
	 */
	public static native Pointer<Byte > choose_face_font(Pointer<frame > framePtr1, Pointer<NstermLibrary.Lisp_Object > Lisp_ObjectPtr1, NstermLibrary.Lisp_Object Lisp_Object1, Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>void prepare_face_for_display(frame*, face*)</code><br>
	 * <i>native declaration : dispextern.h:1881</i>
	 */
	public static native void prepare_face_for_display(Pointer<frame > framePtr1, Pointer<face > facePtr1);
	/**
	 * Original signature : <code>int xstrcasecmp(const char*, const char*)</code><br>
	 * <i>native declaration : dispextern.h:1883</i>
	 */
	public static native int xstrcasecmp(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	/**
	 * Original signature : <code>int lookup_named_face(frame*, Lisp_Object, int)</code><br>
	 * <i>native declaration : dispextern.h:1885</i>
	 */
	public static native int lookup_named_face(Pointer<frame > framePtr1, NstermLibrary.Lisp_Object Lisp_Object1, int int1);
	/**
	 * Original signature : <code>int lookup_basic_face(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1887</i>
	 */
	public static native int lookup_basic_face(Pointer<frame > framePtr1, int int1);
	/**
	 * Original signature : <code>int smaller_face(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1889</i>
	 */
	public static native int smaller_face(Pointer<frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>int face_with_height(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1891</i>
	 */
	public static native int face_with_height(Pointer<frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>int lookup_derived_face(frame*, Lisp_Object, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1893</i>
	 */
	public static native int lookup_derived_face(Pointer<frame > framePtr1, NstermLibrary.Lisp_Object Lisp_Object1, int int1, int int2);
	/**
	 * Original signature : <code>void init_frame_faces(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1895</i>
	 */
	public static native void init_frame_faces(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void free_frame_faces(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1897</i>
	 */
	public static native void free_frame_faces(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void recompute_basic_faces(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1899</i>
	 */
	public static native void recompute_basic_faces(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>int face_at_buffer_position(window*, EMACS_INT, EMACS_INT, EMACS_INT, EMACS_INT*, EMACS_INT, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1901</i>
	 */
	public static native int face_at_buffer_position(Pointer<NstermLibrary.window > w, NstermLibrary.EMACS_INT pos, NstermLibrary.EMACS_INT region_beg, NstermLibrary.EMACS_INT region_end, Pointer<NstermLibrary.EMACS_INT > endptr, NstermLibrary.EMACS_INT limit, int mouse, int base_face_id);
	/**
	 * Original signature : <code>int face_for_overlay_string(window*, EMACS_INT, EMACS_INT, EMACS_INT, EMACS_INT*, EMACS_INT, int, Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1903</i>
	 */
	public static native int face_for_overlay_string(Pointer<NstermLibrary.window > w, NstermLibrary.EMACS_INT pos, NstermLibrary.EMACS_INT region_beg, NstermLibrary.EMACS_INT region_end, Pointer<NstermLibrary.EMACS_INT > endptr, NstermLibrary.EMACS_INT limit, int mouse, NstermLibrary.Lisp_Object overlay);
	/**
	 * Original signature : <code>int face_at_string_position(window*, Lisp_Object, EMACS_INT, EMACS_INT, EMACS_INT, EMACS_INT, EMACS_INT*, face_id, int)</code><br>
	 * <i>native declaration : dispextern.h:1905</i>
	 */
	public static native int face_at_string_position(Pointer<NstermLibrary.window > w, NstermLibrary.Lisp_Object string, NstermLibrary.EMACS_INT pos, NstermLibrary.EMACS_INT bufpos, NstermLibrary.EMACS_INT region_beg, NstermLibrary.EMACS_INT region_end, Pointer<NstermLibrary.EMACS_INT > endptr, IntValuedEnum<NstermLibrary.face_id > arg1, int mouse);
	/**
	 * Original signature : <code>int merge_faces(frame*, Lisp_Object, EMACS_INT, int)</code><br>
	 * <i>native declaration : dispextern.h:1907</i>
	 */
	public static native int merge_faces(Pointer<frame > framePtr1, NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.EMACS_INT EMACS_INT1, int int1);
	/**
	 * Original signature : <code>int compute_char_face(frame*, int, Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1909</i>
	 */
	public static native int compute_char_face(Pointer<frame > framePtr1, int int1, NstermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void free_all_realized_faces(Lisp_Object)</code><br>
	 * <i>native declaration : dispextern.h:1911</i>
	 */
	public static native void free_all_realized_faces(NstermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int popup_activated()</code><br>
	 * <i>native declaration : dispextern.h:1917</i>
	 */
	public static native int popup_activated();
	/**
	 * Original signature : <code>Lisp_Object buffer_posn_from_coords(window*, int*, int*, display_pos*, Lisp_Object*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1919</i>
	 */
	public static native NstermLibrary.Lisp_Object buffer_posn_from_coords(Pointer<NstermLibrary.window > windowPtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<display_pos > display_posPtr1, Pointer<NstermLibrary.Lisp_Object > Lisp_ObjectPtr1, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4, Pointer<Integer > intPtr5, Pointer<Integer > intPtr6);
	/**
	 * Original signature : <code>Lisp_Object mode_line_string(window*, window_part, int*, int*, EMACS_INT*, Lisp_Object*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1921</i>
	 */
	public static native NstermLibrary.Lisp_Object mode_line_string(Pointer<NstermLibrary.window > windowPtr1, IntValuedEnum<NstermLibrary.window_part > arg1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<NstermLibrary.Lisp_Object > Lisp_ObjectPtr1, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4, Pointer<Integer > intPtr5, Pointer<Integer > intPtr6);
	/**
	 * Original signature : <code>Lisp_Object marginal_area_string(window*, window_part, int*, int*, EMACS_INT*, Lisp_Object*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:1923</i>
	 */
	public static native NstermLibrary.Lisp_Object marginal_area_string(Pointer<NstermLibrary.window > windowPtr1, IntValuedEnum<NstermLibrary.window_part > arg1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<NstermLibrary.Lisp_Object > Lisp_ObjectPtr1, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4, Pointer<Integer > intPtr5, Pointer<Integer > intPtr6);
	/**
	 * Original signature : <code>void redraw_frame(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1925</i>
	 */
	public static native void redraw_frame(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void cancel_line(int, frame*)</code><br>
	 * <i>native declaration : dispextern.h:1927</i>
	 */
	public static native void cancel_line(int int1, Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void init_desired_glyphs(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1929</i>
	 */
	public static native void init_desired_glyphs(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>int update_frame(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1931</i>
	 */
	public static native int update_frame(Pointer<frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void bitch_at_user()</code><br>
	 * <i>native declaration : dispextern.h:1933</i>
	 */
	public static native void bitch_at_user();
	/**
	 * Original signature : <code>void adjust_glyphs(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1935</i>
	 */
	public static native void adjust_glyphs(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void free_glyphs(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1937</i>
	 */
	public static native void free_glyphs(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void free_window_matrices(window*)</code><br>
	 * <i>native declaration : dispextern.h:1939</i>
	 */
	public static native void free_window_matrices(Pointer<NstermLibrary.window > windowPtr1);
	/**
	 * Original signature : <code>void check_glyph_memory()</code><br>
	 * <i>native declaration : dispextern.h:1941</i>
	 */
	public static native void check_glyph_memory();
	/**
	 * Original signature : <code>void mirrored_line_dance(glyph_matrix*, int, int, int*, char*)</code><br>
	 * <i>native declaration : dispextern.h:1943</i>
	 */
	public static native void mirrored_line_dance(Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, Pointer<Integer > intPtr1, Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void clear_glyph_matrix(glyph_matrix*)</code><br>
	 * <i>native declaration : dispextern.h:1945</i>
	 */
	public static native void clear_glyph_matrix(Pointer<glyph_matrix > glyph_matrixPtr1);
	/**
	 * Original signature : <code>void clear_current_matrices(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1947</i>
	 */
	public static native void clear_current_matrices(Pointer<frame > f);
	/**
	 * Original signature : <code>void clear_desired_matrices(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1949</i>
	 */
	public static native void clear_desired_matrices(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void shift_glyph_matrix(window*, glyph_matrix*, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1951</i>
	 */
	public static native void shift_glyph_matrix(Pointer<NstermLibrary.window > windowPtr1, Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, int int3);
	/**
	 * Original signature : <code>void rotate_matrix(glyph_matrix*, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1953</i>
	 */
	public static native void rotate_matrix(Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, int int3);
	/**
	 * Original signature : <code>void increment_matrix_positions(glyph_matrix*, int, int, EMACS_INT, EMACS_INT)</code><br>
	 * <i>native declaration : dispextern.h:1955</i>
	 */
	public static native void increment_matrix_positions(Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, NstermLibrary.EMACS_INT EMACS_INT1, NstermLibrary.EMACS_INT EMACS_INT2);
	/**
	 * Original signature : <code>void blank_row(window*, glyph_row*, int)</code><br>
	 * <i>native declaration : dispextern.h:1957</i>
	 */
	public static native void blank_row(Pointer<NstermLibrary.window > windowPtr1, Pointer<glyph_row > glyph_rowPtr1, int int1);
	/**
	 * Original signature : <code>void enable_glyph_matrix_rows(glyph_matrix*, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1959</i>
	 */
	public static native void enable_glyph_matrix_rows(Pointer<glyph_matrix > glyph_matrixPtr1, int int1, int int2, int int3);
	/**
	 * Original signature : <code>void clear_glyph_row(glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1961</i>
	 */
	public static native void clear_glyph_row(Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>void prepare_desired_row(glyph_row*)</code><br>
	 * <i>native declaration : dispextern.h:1963</i>
	 */
	public static native void prepare_desired_row(Pointer<glyph_row > glyph_rowPtr1);
	/**
	 * Original signature : <code>void set_window_update_flags(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1965</i>
	 */
	public static native void set_window_update_flags(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>void update_single_window(window*, int)</code><br>
	 * <i>native declaration : dispextern.h:1967</i>
	 */
	public static native void update_single_window(Pointer<NstermLibrary.window > windowPtr1, int int1);
	/**
	 * Original signature : <code>void do_pending_window_change(int)</code><br>
	 * <i>native declaration : dispextern.h:1969</i>
	 */
	public static native void do_pending_window_change(int int1);
	/**
	 * Original signature : <code>void change_frame_size(frame*, int, int, int, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1971</i>
	 */
	public static native void change_frame_size(Pointer<frame > framePtr1, int int1, int int2, int int3, int int4, int int5);
	/**
	 * Original signature : <code>void init_display()</code><br>
	 * <i>native declaration : dispextern.h:1973</i>
	 */
	public static native void init_display();
	/**
	 * Original signature : <code>void syms_of_display()</code><br>
	 * <i>native declaration : dispextern.h:1975</i>
	 */
	public static native void syms_of_display();
	/**
	 * Original signature : <code>void spec_glyph_lookup_face(window*, GLYPH*)</code><br>
	 * <i>native declaration : dispextern.h:1978</i>
	 */
	public static native void spec_glyph_lookup_face(Pointer<NstermLibrary.window > windowPtr1, Pointer<NstermLibrary.GLYPH > GLYPHPtr1);
	/**
	 * Original signature : <code>void ring_bell(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1980</i>
	 */
	public static native void ring_bell(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void update_begin(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1982</i>
	 */
	public static native void update_begin(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void update_end(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1984</i>
	 */
	public static native void update_end(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void set_terminal_window(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1986</i>
	 */
	public static native void set_terminal_window(Pointer<frame > framePtr1, int int1);
	/**
	 * Original signature : <code>void cursor_to(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1988</i>
	 */
	public static native void cursor_to(Pointer<frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void raw_cursor_to(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:1990</i>
	 */
	public static native void raw_cursor_to(Pointer<frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void clear_to_end(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1992</i>
	 */
	public static native void clear_to_end(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void clear_frame(frame*)</code><br>
	 * <i>native declaration : dispextern.h:1994</i>
	 */
	public static native void clear_frame(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void clear_end_of_line(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:1996</i>
	 */
	public static native void clear_end_of_line(Pointer<frame > framePtr1, int int1);
	/**
	 * Original signature : <code>void write_glyphs(frame*, glyph*, int)</code><br>
	 * <i>native declaration : dispextern.h:1998</i>
	 */
	public static native void write_glyphs(Pointer<frame > framePtr1, Pointer<glyph > glyphPtr1, int int1);
	/**
	 * Original signature : <code>void insert_glyphs(frame*, glyph*, int)</code><br>
	 * <i>native declaration : dispextern.h:2000</i>
	 */
	public static native void insert_glyphs(Pointer<frame > framePtr1, Pointer<glyph > glyphPtr1, int int1);
	/**
	 * Original signature : <code>void delete_glyphs(frame*, int)</code><br>
	 * <i>native declaration : dispextern.h:2002</i>
	 */
	public static native void delete_glyphs(Pointer<frame > framePtr1, int int1);
	/**
	 * Original signature : <code>void ins_del_lines(frame*, int, int)</code><br>
	 * <i>native declaration : dispextern.h:2004</i>
	 */
	public static native void ins_del_lines(Pointer<frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>terminal* init_initial_terminal()</code><br>
	 * <i>native declaration : dispextern.h:2006</i>
	 */
	public static native Pointer<NstermLibrary.terminal > init_initial_terminal();
	/**
	 * Original signature : <code>void tty_turn_off_insert(tty_display_info*)</code><br>
	 * <i>native declaration : dispextern.h:2008</i>
	 */
	public static native void tty_turn_off_insert(Pointer<NstermLibrary.tty_display_info > tty_display_infoPtr1);
	/**
	 * Original signature : <code>int string_cost(const char*)</code><br>
	 * <i>native declaration : dispextern.h:2010</i>
	 */
	public static native int string_cost(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>int per_line_cost(const char*)</code><br>
	 * <i>native declaration : dispextern.h:2012</i>
	 */
	public static native int per_line_cost(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void calculate_costs(frame*)</code><br>
	 * <i>native declaration : dispextern.h:2014</i>
	 */
	public static native void calculate_costs(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>void produce_glyphs(it*)</code><br>
	 * <i>native declaration : dispextern.h:2016</i>
	 */
	public static native void produce_glyphs(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>void produce_special_glyphs(it*, display_element_type)</code><br>
	 * <i>native declaration : dispextern.h:2018</i>
	 */
	public static native void produce_special_glyphs(Pointer<it > itPtr1, IntValuedEnum<NstermLibrary.display_element_type > arg1);
	/**
	 * Original signature : <code>int tty_capable_p(tty_display_info*, unsigned, unsigned long, unsigned long)</code><br>
	 * <i>native declaration : dispextern.h:2020</i>
	 */
	public static native int tty_capable_p(Pointer<NstermLibrary.tty_display_info > tty_display_infoPtr1, int u1, @CLong long u2, @CLong long u3);
	/**
	 * Original signature : <code>void set_tty_color_mode(tty_display_info*, frame*)</code><br>
	 * <i>native declaration : dispextern.h:2022</i>
	 */
	public static native void set_tty_color_mode(Pointer<NstermLibrary.tty_display_info > tty_display_infoPtr1, Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>terminal* get_named_tty(const char*)</code><br>
	 * <i>native declaration : dispextern.h:2024</i>
	 */
	public static native Pointer<NstermLibrary.terminal > get_named_tty(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void create_tty_output(frame*)</code><br>
	 * <i>native declaration : dispextern.h:2026</i>
	 */
	public static native void create_tty_output(Pointer<frame > framePtr1);
	/**
	 * Original signature : <code>terminal* init_tty(const char*, const char*, int)</code><br>
	 * <i>native declaration : dispextern.h:2028</i>
	 */
	public static native Pointer<NstermLibrary.terminal > init_tty(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, int int1);
	/**
	 * Original signature : <code>void tty_append_glyph(it*)</code><br>
	 * <i>native declaration : dispextern.h:2030</i>
	 */
	public static native void tty_append_glyph(Pointer<it > itPtr1);
	/**
	 * Original signature : <code>int scrolling_max_lines_saved(int, int, int*, int*, int*)</code><br>
	 * <i>native declaration : dispextern.h:2032</i>
	 */
	public static native int scrolling_max_lines_saved(int int1, int int2, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > intPtr3);
	/**
	 * Original signature : <code>void do_line_insertion_deletion_costs(frame*, const char*, const char*, const char*, const char*, const char*, const char*, int)</code><br>
	 * <i>native declaration : dispextern.h:2034</i>
	 */
	public static native void do_line_insertion_deletion_costs(Pointer<frame > framePtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<Byte > charPtr3, Pointer<Byte > charPtr4, Pointer<Byte > charPtr5, Pointer<Byte > charPtr6, int int1);
	/**
	 * Original signature : <code>void scrolling_1(frame*, int, int, int, int*, int*, int*, int*, int)</code><br>
	 * <i>native declaration : dispextern.h:2036</i>
	 */
	public static native void scrolling_1(Pointer<frame > framePtr1, int int1, int int2, int int3, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, Pointer<Integer > intPtr3, Pointer<Integer > intPtr4, int int4);
	/**
	 * Original signature : <code>void set_menu_bar_lines(frame*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : frame.h:2520</i>
	 */
	public static native void set_menu_bar_lines(Pointer<frame > framePtr1, NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>frame* make_initial_frame()</code><br>
	 * <i>native declaration : frame.h:2522</i>
	 */
	public static native Pointer<frame > make_initial_frame();
	/**
	 * Original signature : <code>frame* make_frame(int)</code><br>
	 * <i>native declaration : frame.h:2524</i>
	 */
	public static native Pointer<frame > make_frame(int int1);
	/**
	 * Original signature : <code>void frame_make_pointer_invisible()</code><br>
	 * <i>native declaration : frame.h:2526</i>
	 */
	public static native void frame_make_pointer_invisible();
	/**
	 * Original signature : <code>void frame_make_pointer_visible()</code><br>
	 * <i>native declaration : frame.h:2528</i>
	 */
	public static native void frame_make_pointer_visible();
	/**
	 * Original signature : <code>Lisp_Object delete_frame(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : frame.h:2530</i>
	 */
	public static native NstermLibrary.Lisp_Object delete_frame(NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>int char_resolve_modifier_mask(int)</code><br>
	 * <i>native declaration : character.h:2637</i>
	 */
	public static native int char_resolve_modifier_mask(int int1);
	/**
	 * Original signature : <code>int char_string(unsigned, unsigned char*)</code><br>
	 * <i>native declaration : character.h:2639</i>
	 */
	public static native int char_string(int u1, Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>int string_char(const unsigned char*, const unsigned char**, int*)</code><br>
	 * <i>native declaration : character.h:2641</i>
	 */
	public static native int string_char(Pointer<Byte > charPtr1, Pointer<Pointer<Byte > > charPtrPtr1, Pointer<Integer > intPtr1);
	/**
	 * Original signature : <code>int translate_char(Lisp_Object, int)</code><br>
	 * <i>native declaration : character.h:2643</i>
	 */
	public static native int translate_char(NstermLibrary.Lisp_Object Lisp_Object1, int c);
	/**
	 * Original signature : <code>int char_printable_p(int)</code><br>
	 * <i>native declaration : character.h:2645</i>
	 */
	public static native int char_printable_p(int c);
	/**
	 * Original signature : <code>void parse_str_as_multibyte(const unsigned char*, EMACS_INT, EMACS_INT*, EMACS_INT*)</code><br>
	 * <i>native declaration : character.h:2647</i>
	 */
	public static native void parse_str_as_multibyte(Pointer<Byte > charPtr1, NstermLibrary.EMACS_INT EMACS_INT1, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr2);
	/**
	 * Original signature : <code>EMACS_INT count_size_as_multibyte(const unsigned char*, EMACS_INT)</code><br>
	 * <i>native declaration : character.h:2649</i>
	 */
	public static native NstermLibrary.EMACS_INT count_size_as_multibyte(Pointer<Byte > charPtr1, NstermLibrary.EMACS_INT EMACS_INT1);
	/**
	 * Original signature : <code>EMACS_INT str_as_multibyte(unsigned char*, EMACS_INT, EMACS_INT, EMACS_INT*)</code><br>
	 * <i>native declaration : character.h:2651</i>
	 */
	public static native NstermLibrary.EMACS_INT str_as_multibyte(Pointer<Byte > charPtr1, NstermLibrary.EMACS_INT EMACS_INT1, NstermLibrary.EMACS_INT EMACS_INT2, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr1);
	/**
	 * Original signature : <code>EMACS_INT str_to_multibyte(unsigned char*, EMACS_INT, EMACS_INT)</code><br>
	 * <i>native declaration : character.h:2653</i>
	 */
	public static native NstermLibrary.EMACS_INT str_to_multibyte(Pointer<Byte > charPtr1, NstermLibrary.EMACS_INT EMACS_INT1, NstermLibrary.EMACS_INT EMACS_INT2);
	/**
	 * Original signature : <code>EMACS_INT str_as_unibyte(unsigned char*, EMACS_INT)</code><br>
	 * <i>native declaration : character.h:2655</i>
	 */
	public static native NstermLibrary.EMACS_INT str_as_unibyte(Pointer<Byte > charPtr1, NstermLibrary.EMACS_INT EMACS_INT1);
	/**
	 * Original signature : <code>EMACS_INT str_to_unibyte(const unsigned char*, unsigned char*, EMACS_INT, int)</code><br>
	 * <i>native declaration : character.h:2657</i>
	 */
	public static native NstermLibrary.EMACS_INT str_to_unibyte(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, NstermLibrary.EMACS_INT EMACS_INT1, int int1);
	/**
	 * Original signature : <code>EMACS_INT strwidth(const char*, EMACS_INT)</code><br>
	 * <i>native declaration : character.h:2659</i>
	 */
	public static native NstermLibrary.EMACS_INT strwidth(Pointer<Byte > charPtr1, NstermLibrary.EMACS_INT EMACS_INT1);
	/**
	 * Original signature : <code>EMACS_INT c_string_width(const unsigned char*, EMACS_INT, int, EMACS_INT*, EMACS_INT*)</code><br>
	 * <i>native declaration : character.h:2661</i>
	 */
	public static native NstermLibrary.EMACS_INT c_string_width(Pointer<Byte > charPtr1, NstermLibrary.EMACS_INT EMACS_INT1, int int1, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr2);
	/**
	 * Original signature : <code>EMACS_INT lisp_string_width(Lisp_Object, EMACS_INT, EMACS_INT*, EMACS_INT*)</code><br>
	 * <i>native declaration : character.h:2663</i>
	 */
	public static native NstermLibrary.EMACS_INT lisp_string_width(NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.EMACS_INT EMACS_INT1, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr2);
	/**
	 * Original signature : <code>Lisp_Object string_escape_byte8(Lisp_Object)</code><br>
	 * <i>native declaration : character.h:2667</i>
	 */
	public static native NstermLibrary.Lisp_Object string_escape_byte8(NstermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Setup fields of the structure pointed by CCL appropriately for the<br>
	 * execution of ccl program CCL_PROG (symbol or vector).<br>
	 * Original signature : <code>int setup_ccl_program(ccl_program*, Lisp_Object)</code><br>
	 * <i>native declaration : ccl.h:2730</i>
	 */
	public static native int setup_ccl_program(Pointer<ccl_program > ccl_programPtr1, NstermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void ccl_driver(ccl_program*, int*, int*, int, int, Lisp_Object)</code><br>
	 * <i>native declaration : ccl.h:2732</i>
	 */
	public static native void ccl_driver(Pointer<ccl_program > ccl_programPtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, int int1, int int2, NstermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int EXFUN()</code><br>
	 * <i>native declaration : font.h:3263</i>
	 */
	public static native int EXFUN();
	/**
	 * Original signature : <code>Lisp_Object copy_font_spec(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3265</i>
	 */
	public static native NstermLibrary.Lisp_Object copy_font_spec(NstermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object merge_font_spec(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3267</i>
	 */
	public static native NstermLibrary.Lisp_Object merge_font_spec(NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object font_make_entity()</code><br>
	 * <i>native declaration : font.h:3269</i>
	 */
	public static native NstermLibrary.Lisp_Object font_make_entity();
	/**
	 * Original signature : <code>Lisp_Object font_make_object(int, Lisp_Object, int)</code><br>
	 * <i>native declaration : font.h:3271</i>
	 */
	public static native NstermLibrary.Lisp_Object font_make_object(int int1, NstermLibrary.Lisp_Object Lisp_Object1, int int2);
	/**
	 * Original signature : <code>Lisp_Object find_font_encoding(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3273</i>
	 */
	public static native NstermLibrary.Lisp_Object find_font_encoding(NstermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int font_registry_charsets(Lisp_Object, charset**, charset**)</code><br>
	 * <i>native declaration : font.h:3275</i>
	 */
	public static native int font_registry_charsets(NstermLibrary.Lisp_Object Lisp_Object1, Pointer<Pointer<NstermLibrary.charset > > charsetPtrPtr1, Pointer<Pointer<NstermLibrary.charset > > charsetPtrPtr2);
	/**
	 * Original signature : <code>int font_style_to_value(font_property_index, Lisp_Object, int)</code><br>
	 * <i>native declaration : font.h:3277</i>
	 */
	public static native int font_style_to_value(IntValuedEnum<NstermLibrary.font_property_index > prop, NstermLibrary.Lisp_Object name, int noerror);
	/**
	 * Original signature : <code>Lisp_Object font_style_symbolic(Lisp_Object, font_property_index, int)</code><br>
	 * <i>native declaration : font.h:3279</i>
	 */
	public static native NstermLibrary.Lisp_Object font_style_symbolic(NstermLibrary.Lisp_Object font, IntValuedEnum<NstermLibrary.font_property_index > prop, int for_face);
	/**
	 * Original signature : <code>int font_match_p(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3281</i>
	 */
	public static native int font_match_p(NstermLibrary.Lisp_Object spec, NstermLibrary.Lisp_Object font);
	/**
	 * Original signature : <code>Lisp_Object font_list_entities(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3283</i>
	 */
	public static native NstermLibrary.Lisp_Object font_list_entities(NstermLibrary.Lisp_Object frame, NstermLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>Lisp_Object font_get_name(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3285</i>
	 */
	public static native NstermLibrary.Lisp_Object font_get_name(NstermLibrary.Lisp_Object font_object);
	/**
	 * Original signature : <code>Lisp_Object font_spec_from_name(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3287</i>
	 */
	public static native NstermLibrary.Lisp_Object font_spec_from_name(NstermLibrary.Lisp_Object font_name);
	/**
	 * Original signature : <code>Lisp_Object font_get_frame(Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3289</i>
	 */
	public static native NstermLibrary.Lisp_Object font_get_frame(NstermLibrary.Lisp_Object font_object);
	/**
	 * Original signature : <code>int font_has_char(FRAME_PTR, Lisp_Object, int)</code><br>
	 * <i>native declaration : font.h:3291</i>
	 */
	public static native int font_has_char(Pointer<frame > FRAME_PTR1, NstermLibrary.Lisp_Object Lisp_Object1, int int1);
	/**
	 * Original signature : <code>void font_clear_prop(Lisp_Object*, font_property_index)</code><br>
	 * <i>native declaration : font.h:3293</i>
	 */
	public static native void font_clear_prop(Pointer<NstermLibrary.Lisp_Object > attrs, IntValuedEnum<NstermLibrary.font_property_index > prop);
	/**
	 * Original signature : <code>Lisp_Object font_find_for_lface(FRAME_PTR, Lisp_Object*, Lisp_Object, int)</code><br>
	 * <i>native declaration : font.h:3295</i>
	 */
	public static native NstermLibrary.Lisp_Object font_find_for_lface(Pointer<frame > f, Pointer<NstermLibrary.Lisp_Object > lface, NstermLibrary.Lisp_Object spec, int c);
	/**
	 * Original signature : <code>Lisp_Object font_open_for_lface(FRAME_PTR, Lisp_Object, Lisp_Object*, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3297</i>
	 */
	public static native NstermLibrary.Lisp_Object font_open_for_lface(Pointer<frame > f, NstermLibrary.Lisp_Object entity, Pointer<NstermLibrary.Lisp_Object > lface, NstermLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>Lisp_Object font_load_for_lface(FRAME_PTR, Lisp_Object*, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3299</i>
	 */
	public static native NstermLibrary.Lisp_Object font_load_for_lface(Pointer<frame > f, Pointer<NstermLibrary.Lisp_Object > lface, NstermLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>void font_prepare_for_face(FRAME_PTR, face*)</code><br>
	 * <i>native declaration : font.h:3301</i>
	 */
	public static native void font_prepare_for_face(Pointer<frame > f, Pointer<face > face);
	/**
	 * Original signature : <code>void font_done_for_face(FRAME_PTR, face*)</code><br>
	 * <i>native declaration : font.h:3303</i>
	 */
	public static native void font_done_for_face(Pointer<frame > f, Pointer<face > face);
	/**
	 * Original signature : <code>Lisp_Object font_open_by_spec(FRAME_PTR, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3305</i>
	 */
	public static native NstermLibrary.Lisp_Object font_open_by_spec(Pointer<frame > f, NstermLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>Lisp_Object font_open_by_name(FRAME_PTR, const char*)</code><br>
	 * <i>native declaration : font.h:3307</i>
	 */
	public static native NstermLibrary.Lisp_Object font_open_by_name(Pointer<frame > f, Pointer<Byte > name);
	/**
	 * Original signature : <code>Lisp_Object font_intern_prop(const char*, ptrdiff_t, int)</code><br>
	 * <i>native declaration : font.h:3309</i>
	 */
	public static native NstermLibrary.Lisp_Object font_intern_prop(Pointer<Byte > str, @Ptr long len, int force_symbol);
	/**
	 * Original signature : <code>void font_update_sort_order(int*)</code><br>
	 * <i>native declaration : font.h:3311</i>
	 */
	public static native void font_update_sort_order(Pointer<Integer > order);
	/**
	 * Original signature : <code>void font_parse_family_registry(Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3313</i>
	 */
	public static native void font_parse_family_registry(NstermLibrary.Lisp_Object family, NstermLibrary.Lisp_Object registry, NstermLibrary.Lisp_Object spec);
	/**
	 * Original signature : <code>int font_parse_xlfd(char*, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3315</i>
	 */
	public static native int font_parse_xlfd(Pointer<Byte > name, NstermLibrary.Lisp_Object font);
	/**
	 * Original signature : <code>int font_unparse_xlfd(Lisp_Object, int, char*, int)</code><br>
	 * <i>native declaration : font.h:3317</i>
	 */
	public static native int font_unparse_xlfd(NstermLibrary.Lisp_Object font, int pixel_size, Pointer<Byte > name, int bytes);
	/**
	 * Original signature : <code>int font_unparse_fcname(Lisp_Object, int, char*, int)</code><br>
	 * <i>native declaration : font.h:3319</i>
	 */
	public static native int font_unparse_fcname(NstermLibrary.Lisp_Object font, int pixel_size, Pointer<Byte > name, int bytes);
	/**
	 * Original signature : <code>void register_font_driver(font_driver*, FRAME_PTR)</code><br>
	 * <i>native declaration : font.h:3321</i>
	 */
	public static native void register_font_driver(Pointer<font_driver > driver, Pointer<frame > f);
	/**
	 * Original signature : <code>void free_font_driver_list(FRAME_PTR)</code><br>
	 * <i>native declaration : font.h:3323</i>
	 */
	public static native void free_font_driver_list(Pointer<frame > f);
	/**
	 * Original signature : <code>Lisp_Object font_update_drivers(FRAME_PTR, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3325</i>
	 */
	public static native NstermLibrary.Lisp_Object font_update_drivers(Pointer<frame > f, NstermLibrary.Lisp_Object list);
	/**
	 * Original signature : <code>Lisp_Object font_range(EMACS_INT, EMACS_INT*, window*, face*, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3327</i>
	 */
	public static native NstermLibrary.Lisp_Object font_range(NstermLibrary.EMACS_INT EMACS_INT1, Pointer<NstermLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<NstermLibrary.window > windowPtr1, Pointer<face > facePtr1, NstermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void font_fill_lglyph_metrics(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3329</i>
	 */
	public static native void font_fill_lglyph_metrics(NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object font_put_extra(Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3331</i>
	 */
	public static native NstermLibrary.Lisp_Object font_put_extra(NstermLibrary.Lisp_Object font, NstermLibrary.Lisp_Object prop, NstermLibrary.Lisp_Object val);
	/**
	 * Original signature : <code>int font_put_frame_data(FRAME_PTR, font_driver*, void*)</code><br>
	 * <i>native declaration : font.h:3333</i>
	 */
	public static native int font_put_frame_data(Pointer<frame > f, Pointer<font_driver > driver, Pointer<? > data);
	/**
	 * Original signature : <code>void* font_get_frame_data(FRAME_PTR, font_driver*)</code><br>
	 * <i>native declaration : font.h:3335</i>
	 */
	public static native Pointer<? > font_get_frame_data(Pointer<frame > f, Pointer<font_driver > driver);
	/**
	 * Original signature : <code>void font_filter_properties(Lisp_Object, Lisp_Object, const const char*[], const const char*[])</code><br>
	 * <i>native declaration : font.h:3337</i>
	 */
	public static native void font_filter_properties(NstermLibrary.Lisp_Object font, NstermLibrary.Lisp_Object alist, Pointer<Pointer<Byte > > boolean_properties, Pointer<Pointer<Byte > > non_boolean_properties);
	/**
	 * Original signature : <code>void font_add_log(const char*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3340</i>
	 */
	public static native void font_add_log(Pointer<Byte > charPtr1, NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void font_deferred_log(const char*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : font.h:3342</i>
	 */
	public static native void font_deferred_log(Pointer<Byte > charPtr1, NstermLibrary.Lisp_Object Lisp_Object1, NstermLibrary.Lisp_Object Lisp_Object2);
	public int fonts_changed_p() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("fonts_changed_p").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public NstermLibrary fonts_changed_p(int fonts_changed_p) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("fonts_changed_p").as(int.class).set(fonts_changed_p);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern glyph
	public glyph space_glyph() {
		try {
			return (glyph)BridJ.getNativeLibrary("nsterm").getSymbolPointer("space_glyph").as(glyph.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern glyph
	public NstermLibrary space_glyph(glyph space_glyph) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("space_glyph").as(glyph.class).set(space_glyph);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern window*
	public Pointer<NstermLibrary.window > updated_window() {
		try {
			return (Pointer<NstermLibrary.window >)BridJ.getNativeLibrary("nsterm").getSymbolPointer("updated_window").as(DefaultParameterizedType.paramType(Pointer.class, NstermLibrary.window.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern window*
	public NstermLibrary updated_window(Pointer<NstermLibrary.window > updated_window) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("updated_window").as(DefaultParameterizedType.paramType(Pointer.class, NstermLibrary.window.class)).set(updated_window);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern glyph_row*
	public Pointer<glyph_row > updated_row() {
		try {
			return (Pointer<glyph_row >)BridJ.getNativeLibrary("nsterm").getSymbolPointer("updated_row").as(DefaultParameterizedType.paramType(Pointer.class, glyph_row.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern glyph_row*
	public NstermLibrary updated_row(Pointer<glyph_row > updated_row) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("updated_row").as(DefaultParameterizedType.paramType(Pointer.class, glyph_row.class)).set(updated_row);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int updated_area() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("updated_area").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public NstermLibrary updated_area(int updated_area) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("updated_area").as(int.class).set(updated_area);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int display_completed() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("display_completed").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public NstermLibrary display_completed(int display_completed) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("display_completed").as(int.class).set(display_completed);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int face_change_count() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("face_change_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public NstermLibrary face_change_count(int face_change_count) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("face_change_count").as(int.class).set(face_change_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int redisplaying_p() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("redisplaying_p").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public NstermLibrary redisplaying_p(int redisplaying_p) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("redisplaying_p").as(int.class).set(redisplaying_p);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int help_echo_showing_p() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("help_echo_showing_p").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public NstermLibrary help_echo_showing_p(int help_echo_showing_p) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("help_echo_showing_p").as(int.class).set(help_echo_showing_p);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int current_mode_line_height() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("current_mode_line_height").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public NstermLibrary current_mode_line_height(int current_mode_line_height) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("current_mode_line_height").as(int.class).set(current_mode_line_height);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int current_header_line_height() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("current_header_line_height").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public NstermLibrary current_header_line_height(int current_header_line_height) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("current_header_line_height").as(int.class).set(current_header_line_height);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern frame*
	public Pointer<frame > last_mouse_frame() {
		try {
			return (Pointer<frame >)BridJ.getNativeLibrary("nsterm").getSymbolPointer("last_mouse_frame").as(DefaultParameterizedType.paramType(Pointer.class, frame.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern frame*
	public NstermLibrary last_mouse_frame(Pointer<frame > last_mouse_frame) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("last_mouse_frame").as(DefaultParameterizedType.paramType(Pointer.class, frame.class)).set(last_mouse_frame);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int last_tool_bar_item() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("last_tool_bar_item").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public NstermLibrary last_tool_bar_item(int last_tool_bar_item) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("last_tool_bar_item").as(int.class).set(last_tool_bar_item);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[]
	public Pointer<Byte > unspecified_fg() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("nsterm").getSymbolPointer("unspecified_fg").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[]
	public NstermLibrary unspecified_fg(Pointer<Byte > unspecified_fg) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("unspecified_fg").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(unspecified_fg);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[]
	public Pointer<Byte > unspecified_bg() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("nsterm").getSymbolPointer("unspecified_bg").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[]
	public NstermLibrary unspecified_bg(Pointer<Byte > unspecified_bg) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("unspecified_bg").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(unspecified_bg);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero means there is at least one garbaged frame.
	public int frame_garbaged() {
		try {
			return (int)BridJ.getNativeLibrary("nsterm").getSymbolPointer("frame_garbaged").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Nonzero means there is at least one garbaged frame.
	public NstermLibrary frame_garbaged(int frame_garbaged) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("frame_garbaged").as(int.class).set(frame_garbaged);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern frame*
	public Pointer<frame > last_nonminibuf_frame() {
		try {
			return (Pointer<frame >)BridJ.getNativeLibrary("nsterm").getSymbolPointer("last_nonminibuf_frame").as(DefaultParameterizedType.paramType(Pointer.class, frame.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern frame*
	public NstermLibrary last_nonminibuf_frame(Pointer<frame > last_nonminibuf_frame) {
		try {
			{
				BridJ.getNativeLibrary("nsterm").getSymbolPointer("last_nonminibuf_frame").as(DefaultParameterizedType.paramType(Pointer.class, frame.class)).set(last_nonminibuf_frame);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface GLYPH {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface tty_output {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface charset {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface tty_display_info {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Char_Table {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Mouse_HLInfo {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface w32_output {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface ns_output {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface vectorlike_header {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface id {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface buffer {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface glyph_string {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface window {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface terminal {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface x_output {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface EMACS_INT {
		
	};
}
