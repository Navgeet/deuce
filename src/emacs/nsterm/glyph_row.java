package emacs.nsterm;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : dispextern.h:593</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("nsterm") 
public class glyph_row extends StructObject {
	public glyph_row() {
		super();
	}
	/**
	 * Pointers to beginnings of areas.  The end of an area A is found at<br>
	 * A + 1 in the vector.  The last element of the vector is the end<br>
	 * of the whole row.<br>
	 * Kludge alert: Even if used[TEXT_AREA] == 0, glyphs[TEXT_AREA][0]'s<br>
	 * position field is used.  It is -1 if this row does not correspond<br>
	 * to any text; it is some buffer position if the row corresponds to<br>
	 * an empty display line that displays a line end.  This is what old<br>
	 * redisplay used to do.  (Except in code for terminal frames, this<br>
	 * kludge is no longer used, I believe. --gerd).<br>
	 * See also start, end, displays_text_p and ends_at_zv_p for cleaner<br>
	 * ways to do it.  The special meaning of positions 0 and -1 will be<br>
	 * removed some day, so don't use it in new code.<br>
	 * C type : glyph*[1 + LAST_AREA]
	 */
	@Array({1 + (int)emacs.nsterm.NstermLibrary.glyph_row_area.LAST_AREA.value()}) 
	@Field(0) 
	public Pointer<Pointer<glyph > > glyphs() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Number of glyphs actually filled in areas.<br>
	 * C type : short[LAST_AREA]
	 */
	@Array({(int)emacs.nsterm.NstermLibrary.glyph_row_area.LAST_AREA.value()}) 
	@Field(1) 
	public Pointer<Short > used() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Window-relative x and y-position of the top-left corner of this<br>
	 * row.  If y < 0, this means that eabs (y) pixels of the row are<br>
	 * invisible because it is partially visible at the top of a window.<br>
	 * If x < 0, this means that eabs (x) pixels of the first glyph of<br>
	 * the text area of the row are invisible because the glyph is<br>
	 * partially visible.
	 */
	@Field(2) 
	public int x() {
		return this.io.getIntField(this, 2);
	}
	/**
	 * Window-relative x and y-position of the top-left corner of this<br>
	 * row.  If y < 0, this means that eabs (y) pixels of the row are<br>
	 * invisible because it is partially visible at the top of a window.<br>
	 * If x < 0, this means that eabs (x) pixels of the first glyph of<br>
	 * the text area of the row are invisible because the glyph is<br>
	 * partially visible.
	 */
	@Field(2) 
	public glyph_row x(int x) {
		this.io.setIntField(this, 2, x);
		return this;
	}
	/**
	 * Window-relative x and y-position of the top-left corner of this<br>
	 * row.  If y < 0, this means that eabs (y) pixels of the row are<br>
	 * invisible because it is partially visible at the top of a window.<br>
	 * If x < 0, this means that eabs (x) pixels of the first glyph of<br>
	 * the text area of the row are invisible because the glyph is<br>
	 * partially visible.
	 */
	@Field(3) 
	public int y() {
		return this.io.getIntField(this, 3);
	}
	/**
	 * Window-relative x and y-position of the top-left corner of this<br>
	 * row.  If y < 0, this means that eabs (y) pixels of the row are<br>
	 * invisible because it is partially visible at the top of a window.<br>
	 * If x < 0, this means that eabs (x) pixels of the first glyph of<br>
	 * the text area of the row are invisible because the glyph is<br>
	 * partially visible.
	 */
	@Field(3) 
	public glyph_row y(int y) {
		this.io.setIntField(this, 3, y);
		return this;
	}
	/**
	 * Width of the row in pixels without taking face extension at the<br>
	 * end of the row into account, and without counting truncation<br>
	 * and continuation glyphs at the end of a row on ttys.
	 */
	@Field(4) 
	public int pixel_width() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * Width of the row in pixels without taking face extension at the<br>
	 * end of the row into account, and without counting truncation<br>
	 * and continuation glyphs at the end of a row on ttys.
	 */
	@Field(4) 
	public glyph_row pixel_width(int pixel_width) {
		this.io.setIntField(this, 4, pixel_width);
		return this;
	}
	/**
	 * Logical ascent/height of this line.  The value of ascent is zero<br>
	 * and height is 1 on terminal frames.
	 */
	@Field(5) 
	public int ascent() {
		return this.io.getIntField(this, 5);
	}
	/**
	 * Logical ascent/height of this line.  The value of ascent is zero<br>
	 * and height is 1 on terminal frames.
	 */
	@Field(5) 
	public glyph_row ascent(int ascent) {
		this.io.setIntField(this, 5, ascent);
		return this;
	}
	/**
	 * Logical ascent/height of this line.  The value of ascent is zero<br>
	 * and height is 1 on terminal frames.
	 */
	@Field(6) 
	public int height() {
		return this.io.getIntField(this, 6);
	}
	/**
	 * Logical ascent/height of this line.  The value of ascent is zero<br>
	 * and height is 1 on terminal frames.
	 */
	@Field(6) 
	public glyph_row height(int height) {
		this.io.setIntField(this, 6, height);
		return this;
	}
	/**
	 * Physical ascent/height of this line.  If max_ascent > ascent,<br>
	 * this line overlaps the line above it on the display.  Otherwise,<br>
	 * if max_height > height, this line overlaps the line beneath it.
	 */
	@Field(7) 
	public int phys_ascent() {
		return this.io.getIntField(this, 7);
	}
	/**
	 * Physical ascent/height of this line.  If max_ascent > ascent,<br>
	 * this line overlaps the line above it on the display.  Otherwise,<br>
	 * if max_height > height, this line overlaps the line beneath it.
	 */
	@Field(7) 
	public glyph_row phys_ascent(int phys_ascent) {
		this.io.setIntField(this, 7, phys_ascent);
		return this;
	}
	/**
	 * Physical ascent/height of this line.  If max_ascent > ascent,<br>
	 * this line overlaps the line above it on the display.  Otherwise,<br>
	 * if max_height > height, this line overlaps the line beneath it.
	 */
	@Field(8) 
	public int phys_height() {
		return this.io.getIntField(this, 8);
	}
	/**
	 * Physical ascent/height of this line.  If max_ascent > ascent,<br>
	 * this line overlaps the line above it on the display.  Otherwise,<br>
	 * if max_height > height, this line overlaps the line beneath it.
	 */
	@Field(8) 
	public glyph_row phys_height(int phys_height) {
		this.io.setIntField(this, 8, phys_height);
		return this;
	}
	/**
	 * Portion of row that is visible.  Partially visible rows may be<br>
	 * found at the top and bottom of a window.  This is 1 for tty<br>
	 * frames.  It may be < 0 in case of completely invisible rows.
	 */
	@Field(9) 
	public int visible_height() {
		return this.io.getIntField(this, 9);
	}
	/**
	 * Portion of row that is visible.  Partially visible rows may be<br>
	 * found at the top and bottom of a window.  This is 1 for tty<br>
	 * frames.  It may be < 0 in case of completely invisible rows.
	 */
	@Field(9) 
	public glyph_row visible_height(int visible_height) {
		this.io.setIntField(this, 9, visible_height);
		return this;
	}
	/**
	 * Extra line spacing added after this row.  Do not consider this<br>
	 * in last row when checking if row is fully visible.
	 */
	@Field(10) 
	public int extra_line_spacing() {
		return this.io.getIntField(this, 10);
	}
	/**
	 * Extra line spacing added after this row.  Do not consider this<br>
	 * in last row when checking if row is fully visible.
	 */
	@Field(10) 
	public glyph_row extra_line_spacing(int extra_line_spacing) {
		this.io.setIntField(this, 10, extra_line_spacing);
		return this;
	}
	/**
	 * Hash code.  This hash code is available as soon as the row<br>
	 * is constructed, i.e. after a call to display_line.
	 */
	@Field(11) 
	public int hash() {
		return this.io.getIntField(this, 11);
	}
	/**
	 * Hash code.  This hash code is available as soon as the row<br>
	 * is constructed, i.e. after a call to display_line.
	 */
	@Field(11) 
	public glyph_row hash(int hash) {
		this.io.setIntField(this, 11, hash);
		return this;
	}
	/**
	 * First position in this row.  This is the text position, including<br>
	 * overlay position information etc, where the display of this row<br>
	 * started, and can thus be less than the position of the first<br>
	 * glyph (e.g. due to invisible text or horizontal scrolling).<br>
	 * BIDI Note: In R2L rows, that have its reversed_p flag set, this<br>
	 * position is at or beyond the right edge of the row.<br>
	 * C type : display_pos
	 */
	@Field(12) 
	public display_pos start() {
		return this.io.getNativeObjectField(this, 12);
	}
	/**
	 * First position in this row.  This is the text position, including<br>
	 * overlay position information etc, where the display of this row<br>
	 * started, and can thus be less than the position of the first<br>
	 * glyph (e.g. due to invisible text or horizontal scrolling).<br>
	 * BIDI Note: In R2L rows, that have its reversed_p flag set, this<br>
	 * position is at or beyond the right edge of the row.<br>
	 * C type : display_pos
	 */
	@Field(12) 
	public glyph_row start(display_pos start) {
		this.io.setNativeObjectField(this, 12, start);
		return this;
	}
	/**
	 * Text position at the end of this row.  This is the position after<br>
	 * the last glyph on this row.  It can be greater than the last<br>
	 * glyph position + 1, due to a newline that ends the line,<br>
	 * truncation, invisible text etc.  In an up-to-date display, this<br>
	 * should always be equal to the start position of the next row.<br>
	 * BIDI Note: In R2L rows, this position is at or beyond the left<br>
	 * edge of the row.<br>
	 * C type : display_pos
	 */
	@Field(13) 
	public display_pos end() {
		return this.io.getNativeObjectField(this, 13);
	}
	/**
	 * Text position at the end of this row.  This is the position after<br>
	 * the last glyph on this row.  It can be greater than the last<br>
	 * glyph position + 1, due to a newline that ends the line,<br>
	 * truncation, invisible text etc.  In an up-to-date display, this<br>
	 * should always be equal to the start position of the next row.<br>
	 * BIDI Note: In R2L rows, this position is at or beyond the left<br>
	 * edge of the row.<br>
	 * C type : display_pos
	 */
	@Field(13) 
	public glyph_row end(display_pos end) {
		this.io.setNativeObjectField(this, 13, end);
		return this;
	}
	/**
	 * The smallest and the largest buffer positions that contributed to<br>
	 * glyphs in this row.  Note that due to bidi reordering, these are<br>
	 * in general different from the text positions stored in `start'<br>
	 * and `end' members above, and also different from the buffer<br>
	 * positions recorded in the glyphs displayed the leftmost and<br>
	 * rightmost on the screen.<br>
	 * C type : text_pos
	 */
	@Field(14) 
	public text_pos minpos() {
		return this.io.getNativeObjectField(this, 14);
	}
	/**
	 * The smallest and the largest buffer positions that contributed to<br>
	 * glyphs in this row.  Note that due to bidi reordering, these are<br>
	 * in general different from the text positions stored in `start'<br>
	 * and `end' members above, and also different from the buffer<br>
	 * positions recorded in the glyphs displayed the leftmost and<br>
	 * rightmost on the screen.<br>
	 * C type : text_pos
	 */
	@Field(14) 
	public glyph_row minpos(text_pos minpos) {
		this.io.setNativeObjectField(this, 14, minpos);
		return this;
	}
	/**
	 * The smallest and the largest buffer positions that contributed to<br>
	 * glyphs in this row.  Note that due to bidi reordering, these are<br>
	 * in general different from the text positions stored in `start'<br>
	 * and `end' members above, and also different from the buffer<br>
	 * positions recorded in the glyphs displayed the leftmost and<br>
	 * rightmost on the screen.<br>
	 * C type : text_pos
	 */
	@Field(15) 
	public text_pos maxpos() {
		return this.io.getNativeObjectField(this, 15);
	}
	/**
	 * The smallest and the largest buffer positions that contributed to<br>
	 * glyphs in this row.  Note that due to bidi reordering, these are<br>
	 * in general different from the text positions stored in `start'<br>
	 * and `end' members above, and also different from the buffer<br>
	 * positions recorded in the glyphs displayed the leftmost and<br>
	 * rightmost on the screen.<br>
	 * C type : text_pos
	 */
	@Field(15) 
	public glyph_row maxpos(text_pos maxpos) {
		this.io.setNativeObjectField(this, 15, maxpos);
		return this;
	}
	/**
	 * Non-zero means the overlay arrow bitmap is on this line.<br>
	 * -1 means use default overlay arrow bitmap, else<br>
	 * it specifies actual fringe bitmap number.
	 */
	@Field(16) 
	public int overlay_arrow_bitmap() {
		return this.io.getIntField(this, 16);
	}
	/**
	 * Non-zero means the overlay arrow bitmap is on this line.<br>
	 * -1 means use default overlay arrow bitmap, else<br>
	 * it specifies actual fringe bitmap number.
	 */
	@Field(16) 
	public glyph_row overlay_arrow_bitmap(int overlay_arrow_bitmap) {
		this.io.setIntField(this, 16, overlay_arrow_bitmap);
		return this;
	}
	/// Left fringe bitmap number (enum fringe_bitmap_type).
	@Field(17) 
	@Bits(16) 
	public int left_user_fringe_bitmap() {
		return this.io.getIntField(this, 17);
	}
	/// Left fringe bitmap number (enum fringe_bitmap_type).
	@Field(17) 
	@Bits(16) 
	public glyph_row left_user_fringe_bitmap(int left_user_fringe_bitmap) {
		this.io.setIntField(this, 17, left_user_fringe_bitmap);
		return this;
	}
	/// Right fringe bitmap number (enum fringe_bitmap_type).
	@Field(18) 
	@Bits(16) 
	public int right_user_fringe_bitmap() {
		return this.io.getIntField(this, 18);
	}
	/// Right fringe bitmap number (enum fringe_bitmap_type).
	@Field(18) 
	@Bits(16) 
	public glyph_row right_user_fringe_bitmap(int right_user_fringe_bitmap) {
		this.io.setIntField(this, 18, right_user_fringe_bitmap);
		return this;
	}
	/// Left fringe bitmap number (enum fringe_bitmap_type).
	@Field(19) 
	@Bits(16) 
	public int left_fringe_bitmap() {
		return this.io.getIntField(this, 19);
	}
	/// Left fringe bitmap number (enum fringe_bitmap_type).
	@Field(19) 
	@Bits(16) 
	public glyph_row left_fringe_bitmap(int left_fringe_bitmap) {
		this.io.setIntField(this, 19, left_fringe_bitmap);
		return this;
	}
	/// Right fringe bitmap number (enum fringe_bitmap_type).
	@Field(20) 
	@Bits(16) 
	public int right_fringe_bitmap() {
		return this.io.getIntField(this, 20);
	}
	/// Right fringe bitmap number (enum fringe_bitmap_type).
	@Field(20) 
	@Bits(16) 
	public glyph_row right_fringe_bitmap(int right_fringe_bitmap) {
		this.io.setIntField(this, 20, right_fringe_bitmap);
		return this;
	}
	/// Face of the left fringe glyph.
	@Field(21) 
	@Bits(20) 
	public int left_user_fringe_face_id() {
		return this.io.getIntField(this, 21);
	}
	/// Face of the left fringe glyph.
	@Field(21) 
	@Bits(20) 
	public glyph_row left_user_fringe_face_id(int left_user_fringe_face_id) {
		this.io.setIntField(this, 21, left_user_fringe_face_id);
		return this;
	}
	/// Face of the right fringe glyph.
	@Field(22) 
	@Bits(20) 
	public int right_user_fringe_face_id() {
		return this.io.getIntField(this, 22);
	}
	/// Face of the right fringe glyph.
	@Field(22) 
	@Bits(20) 
	public glyph_row right_user_fringe_face_id(int right_user_fringe_face_id) {
		this.io.setIntField(this, 22, right_user_fringe_face_id);
		return this;
	}
	/// Face of the left fringe glyph.
	@Field(23) 
	@Bits(20) 
	public int left_fringe_face_id() {
		return this.io.getIntField(this, 23);
	}
	/// Face of the left fringe glyph.
	@Field(23) 
	@Bits(20) 
	public glyph_row left_fringe_face_id(int left_fringe_face_id) {
		this.io.setIntField(this, 23, left_fringe_face_id);
		return this;
	}
	/// Face of the right fringe glyph.
	@Field(24) 
	@Bits(20) 
	public int right_fringe_face_id() {
		return this.io.getIntField(this, 24);
	}
	/// Face of the right fringe glyph.
	@Field(24) 
	@Bits(20) 
	public glyph_row right_fringe_face_id(int right_fringe_face_id) {
		this.io.setIntField(this, 24, right_fringe_face_id);
		return this;
	}
	/// Vertical offset of the left fringe bitmap.
	@Field(25) 
	@Bits(8) 
	public int left_fringe_offset() {
		return this.io.getIntField(this, 25);
	}
	/// Vertical offset of the left fringe bitmap.
	@Field(25) 
	@Bits(8) 
	public glyph_row left_fringe_offset(int left_fringe_offset) {
		this.io.setIntField(this, 25, left_fringe_offset);
		return this;
	}
	/// Vertical offset of the right fringe bitmap.
	@Field(26) 
	@Bits(8) 
	public int right_fringe_offset() {
		return this.io.getIntField(this, 26);
	}
	/// Vertical offset of the right fringe bitmap.
	@Field(26) 
	@Bits(8) 
	public glyph_row right_fringe_offset(int right_fringe_offset) {
		this.io.setIntField(this, 26, right_fringe_offset);
		return this;
	}
	/**
	 * 1 means that at least one of the left and right fringe bitmaps is<br>
	 * periodic and thus depends on the y-position of the row.
	 */
	@Field(27) 
	@Bits(1) 
	public int fringe_bitmap_periodic_p() {
		return this.io.getIntField(this, 27);
	}
	/**
	 * 1 means that at least one of the left and right fringe bitmaps is<br>
	 * periodic and thus depends on the y-position of the row.
	 */
	@Field(27) 
	@Bits(1) 
	public glyph_row fringe_bitmap_periodic_p(int fringe_bitmap_periodic_p) {
		this.io.setIntField(this, 27, fringe_bitmap_periodic_p);
		return this;
	}
	/// 1 means that we must draw the bitmaps of this row.
	@Field(28) 
	@Bits(1) 
	public int redraw_fringe_bitmaps_p() {
		return this.io.getIntField(this, 28);
	}
	/// 1 means that we must draw the bitmaps of this row.
	@Field(28) 
	@Bits(1) 
	public glyph_row redraw_fringe_bitmaps_p(int redraw_fringe_bitmaps_p) {
		this.io.setIntField(this, 28, redraw_fringe_bitmaps_p);
		return this;
	}
	/**
	 * In a desired matrix, 1 means that this row must be updated.  In a<br>
	 * current matrix, 0 means that the row has been invalidated, i.e.<br>
	 * the row's contents do not agree with what is visible on the<br>
	 * screen.
	 */
	@Field(29) 
	@Bits(1) 
	public int enabled_p() {
		return this.io.getIntField(this, 29);
	}
	/**
	 * In a desired matrix, 1 means that this row must be updated.  In a<br>
	 * current matrix, 0 means that the row has been invalidated, i.e.<br>
	 * the row's contents do not agree with what is visible on the<br>
	 * screen.
	 */
	@Field(29) 
	@Bits(1) 
	public glyph_row enabled_p(int enabled_p) {
		this.io.setIntField(this, 29, enabled_p);
		return this;
	}
	/**
	 * 1 means row displays a text line that is truncated on the left or<br>
	 * right side.
	 */
	@Field(30) 
	@Bits(1) 
	public int truncated_on_left_p() {
		return this.io.getIntField(this, 30);
	}
	/**
	 * 1 means row displays a text line that is truncated on the left or<br>
	 * right side.
	 */
	@Field(30) 
	@Bits(1) 
	public glyph_row truncated_on_left_p(int truncated_on_left_p) {
		this.io.setIntField(this, 30, truncated_on_left_p);
		return this;
	}
	@Field(31) 
	@Bits(1) 
	public int truncated_on_right_p() {
		return this.io.getIntField(this, 31);
	}
	@Field(31) 
	@Bits(1) 
	public glyph_row truncated_on_right_p(int truncated_on_right_p) {
		this.io.setIntField(this, 31, truncated_on_right_p);
		return this;
	}
	/**
	 * 1 means that this row displays a continued line, i.e. it has a<br>
	 * continuation mark at the right side.
	 */
	@Field(32) 
	@Bits(1) 
	public int continued_p() {
		return this.io.getIntField(this, 32);
	}
	/**
	 * 1 means that this row displays a continued line, i.e. it has a<br>
	 * continuation mark at the right side.
	 */
	@Field(32) 
	@Bits(1) 
	public glyph_row continued_p(int continued_p) {
		this.io.setIntField(this, 32, continued_p);
		return this;
	}
	/**
	 * 0 means that this row does not contain any text, i.e. it is<br>
	 * a blank line at the window and buffer end.
	 */
	@Field(33) 
	@Bits(1) 
	public int displays_text_p() {
		return this.io.getIntField(this, 33);
	}
	/**
	 * 0 means that this row does not contain any text, i.e. it is<br>
	 * a blank line at the window and buffer end.
	 */
	@Field(33) 
	@Bits(1) 
	public glyph_row displays_text_p(int displays_text_p) {
		this.io.setIntField(this, 33, displays_text_p);
		return this;
	}
	/// 1 means that this line ends at ZV.
	@Field(34) 
	@Bits(1) 
	public int ends_at_zv_p() {
		return this.io.getIntField(this, 34);
	}
	/// 1 means that this line ends at ZV.
	@Field(34) 
	@Bits(1) 
	public glyph_row ends_at_zv_p(int ends_at_zv_p) {
		this.io.setIntField(this, 34, ends_at_zv_p);
		return this;
	}
	/**
	 * 1 means the face of the last glyph in the text area is drawn to<br>
	 * the right end of the window.  This flag is used in<br>
	 * update_text_area to optimize clearing to the end of the area.
	 */
	@Field(35) 
	@Bits(1) 
	public int fill_line_p() {
		return this.io.getIntField(this, 35);
	}
	/**
	 * 1 means the face of the last glyph in the text area is drawn to<br>
	 * the right end of the window.  This flag is used in<br>
	 * update_text_area to optimize clearing to the end of the area.
	 */
	@Field(35) 
	@Bits(1) 
	public glyph_row fill_line_p(int fill_line_p) {
		this.io.setIntField(this, 35, fill_line_p);
		return this;
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * line contains no text and ends in ZV.
	 */
	@Field(36) 
	@Bits(1) 
	public int indicate_empty_line_p() {
		return this.io.getIntField(this, 36);
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * line contains no text and ends in ZV.
	 */
	@Field(36) 
	@Bits(1) 
	public glyph_row indicate_empty_line_p(int indicate_empty_line_p) {
		this.io.setIntField(this, 36, indicate_empty_line_p);
		return this;
	}
	/**
	 * 1 means this row contains glyphs that overlap each other because<br>
	 * of lbearing or rbearing.
	 */
	@Field(37) 
	@Bits(1) 
	public int contains_overlapping_glyphs_p() {
		return this.io.getIntField(this, 37);
	}
	/**
	 * 1 means this row contains glyphs that overlap each other because<br>
	 * of lbearing or rbearing.
	 */
	@Field(37) 
	@Bits(1) 
	public glyph_row contains_overlapping_glyphs_p(int contains_overlapping_glyphs_p) {
		this.io.setIntField(this, 37, contains_overlapping_glyphs_p);
		return this;
	}
	/**
	 * 1 means this row is as wide as the window it is displayed in, including<br>
	 * scroll bars, fringes, and internal borders.  This also<br>
	 * implies that the row doesn't have marginal areas.
	 */
	@Field(38) 
	@Bits(1) 
	public int full_width_p() {
		return this.io.getIntField(this, 38);
	}
	/**
	 * 1 means this row is as wide as the window it is displayed in, including<br>
	 * scroll bars, fringes, and internal borders.  This also<br>
	 * implies that the row doesn't have marginal areas.
	 */
	@Field(38) 
	@Bits(1) 
	public glyph_row full_width_p(int full_width_p) {
		this.io.setIntField(this, 38, full_width_p);
		return this;
	}
	/// Non-zero means row is a mode or header-line.
	@Field(39) 
	@Bits(1) 
	public int mode_line_p() {
		return this.io.getIntField(this, 39);
	}
	/// Non-zero means row is a mode or header-line.
	@Field(39) 
	@Bits(1) 
	public glyph_row mode_line_p(int mode_line_p) {
		this.io.setIntField(this, 39, mode_line_p);
		return this;
	}
	/// 1 in a current row means this row is overlapped by another row.
	@Field(40) 
	@Bits(1) 
	public int overlapped_p() {
		return this.io.getIntField(this, 40);
	}
	/// 1 in a current row means this row is overlapped by another row.
	@Field(40) 
	@Bits(1) 
	public glyph_row overlapped_p(int overlapped_p) {
		this.io.setIntField(this, 40, overlapped_p);
		return this;
	}
	/**
	 * 1 means this line ends in the middle of a character consisting<br>
	 * of more than one glyph.  Some glyphs have been put in this row,<br>
	 * the rest are put in rows below this one.
	 */
	@Field(41) 
	@Bits(1) 
	public int ends_in_middle_of_char_p() {
		return this.io.getIntField(this, 41);
	}
	/**
	 * 1 means this line ends in the middle of a character consisting<br>
	 * of more than one glyph.  Some glyphs have been put in this row,<br>
	 * the rest are put in rows below this one.
	 */
	@Field(41) 
	@Bits(1) 
	public glyph_row ends_in_middle_of_char_p(int ends_in_middle_of_char_p) {
		this.io.setIntField(this, 41, ends_in_middle_of_char_p);
		return this;
	}
	/**
	 * 1 means this line starts in the middle of a character consisting<br>
	 * of more than one glyph.  Some glyphs have been put in the<br>
	 * previous row, the rest are put in this row.
	 */
	@Field(42) 
	@Bits(1) 
	public int starts_in_middle_of_char_p() {
		return this.io.getIntField(this, 42);
	}
	/**
	 * 1 means this line starts in the middle of a character consisting<br>
	 * of more than one glyph.  Some glyphs have been put in the<br>
	 * previous row, the rest are put in this row.
	 */
	@Field(42) 
	@Bits(1) 
	public glyph_row starts_in_middle_of_char_p(int starts_in_middle_of_char_p) {
		this.io.setIntField(this, 42, starts_in_middle_of_char_p);
		return this;
	}
	/// 1 in a current row means this row overlaps others.
	@Field(43) 
	@Bits(1) 
	public int overlapping_p() {
		return this.io.getIntField(this, 43);
	}
	/// 1 in a current row means this row overlaps others.
	@Field(43) 
	@Bits(1) 
	public glyph_row overlapping_p(int overlapping_p) {
		this.io.setIntField(this, 43, overlapping_p);
		return this;
	}
	/// 1 means some glyphs in this row are displayed in mouse-face.
	@Field(44) 
	@Bits(1) 
	public int mouse_face_p() {
		return this.io.getIntField(this, 44);
	}
	/// 1 means some glyphs in this row are displayed in mouse-face.
	@Field(44) 
	@Bits(1) 
	public glyph_row mouse_face_p(int mouse_face_p) {
		this.io.setIntField(this, 44, mouse_face_p);
		return this;
	}
	/// 1 means this row was ended by a newline from a string.
	@Field(45) 
	@Bits(1) 
	public int ends_in_newline_from_string_p() {
		return this.io.getIntField(this, 45);
	}
	/// 1 means this row was ended by a newline from a string.
	@Field(45) 
	@Bits(1) 
	public glyph_row ends_in_newline_from_string_p(int ends_in_newline_from_string_p) {
		this.io.setIntField(this, 45, ends_in_newline_from_string_p);
		return this;
	}
	/**
	 * 1 means this row width is exactly the width of the window, and the<br>
	 * final newline character is hidden in the right fringe.
	 */
	@Field(46) 
	@Bits(1) 
	public int exact_window_width_line_p() {
		return this.io.getIntField(this, 46);
	}
	/**
	 * 1 means this row width is exactly the width of the window, and the<br>
	 * final newline character is hidden in the right fringe.
	 */
	@Field(46) 
	@Bits(1) 
	public glyph_row exact_window_width_line_p(int exact_window_width_line_p) {
		this.io.setIntField(this, 46, exact_window_width_line_p);
		return this;
	}
	/// 1 means this row currently shows the cursor in the right fringe.
	@Field(47) 
	@Bits(1) 
	public int cursor_in_fringe_p() {
		return this.io.getIntField(this, 47);
	}
	/// 1 means this row currently shows the cursor in the right fringe.
	@Field(47) 
	@Bits(1) 
	public glyph_row cursor_in_fringe_p(int cursor_in_fringe_p) {
		this.io.setIntField(this, 47, cursor_in_fringe_p);
		return this;
	}
	/// 1 means the last glyph in the row is part of an ellipsis.
	@Field(48) 
	@Bits(1) 
	public int ends_in_ellipsis_p() {
		return this.io.getIntField(this, 48);
	}
	/// 1 means the last glyph in the row is part of an ellipsis.
	@Field(48) 
	@Bits(1) 
	public glyph_row ends_in_ellipsis_p(int ends_in_ellipsis_p) {
		this.io.setIntField(this, 48, ends_in_ellipsis_p);
		return this;
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * the first line of the buffer.
	 */
	@Field(49) 
	@Bits(1) 
	public int indicate_bob_p() {
		return this.io.getIntField(this, 49);
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * the first line of the buffer.
	 */
	@Field(49) 
	@Bits(1) 
	public glyph_row indicate_bob_p(int indicate_bob_p) {
		this.io.setIntField(this, 49, indicate_bob_p);
		return this;
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * the top line of the window, but not start of the buffer.
	 */
	@Field(50) 
	@Bits(1) 
	public int indicate_top_line_p() {
		return this.io.getIntField(this, 50);
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * the top line of the window, but not start of the buffer.
	 */
	@Field(50) 
	@Bits(1) 
	public glyph_row indicate_top_line_p(int indicate_top_line_p) {
		this.io.setIntField(this, 50, indicate_top_line_p);
		return this;
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * the last line of the buffer.
	 */
	@Field(51) 
	@Bits(1) 
	public int indicate_eob_p() {
		return this.io.getIntField(this, 51);
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * the last line of the buffer.
	 */
	@Field(51) 
	@Bits(1) 
	public glyph_row indicate_eob_p(int indicate_eob_p) {
		this.io.setIntField(this, 51, indicate_eob_p);
		return this;
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * the bottom line of the window, but not end of the buffer.
	 */
	@Field(52) 
	@Bits(1) 
	public int indicate_bottom_line_p() {
		return this.io.getIntField(this, 52);
	}
	/**
	 * Non-zero means display a bitmap on X frames indicating that this<br>
	 * the bottom line of the window, but not end of the buffer.
	 */
	@Field(52) 
	@Bits(1) 
	public glyph_row indicate_bottom_line_p(int indicate_bottom_line_p) {
		this.io.setIntField(this, 52, indicate_bottom_line_p);
		return this;
	}
	/**
	 * Non-zero means the row was reversed to display text in a<br>
	 * right-to-left paragraph.
	 */
	@Field(53) 
	@Bits(1) 
	public int reversed_p() {
		return this.io.getIntField(this, 53);
	}
	/**
	 * Non-zero means the row was reversed to display text in a<br>
	 * right-to-left paragraph.
	 */
	@Field(53) 
	@Bits(1) 
	public glyph_row reversed_p(int reversed_p) {
		this.io.setIntField(this, 53, reversed_p);
		return this;
	}
	/// Continuation lines width at the start of the row.
	@Field(54) 
	public int continuation_lines_width() {
		return this.io.getIntField(this, 54);
	}
	/// Continuation lines width at the start of the row.
	@Field(54) 
	public glyph_row continuation_lines_width(int continuation_lines_width) {
		this.io.setIntField(this, 54, continuation_lines_width);
		return this;
	}
}
