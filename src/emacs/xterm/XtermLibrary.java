package emacs.xterm;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>xterm</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("xterm") 
@Runtime(CRuntime.class) 
public class XtermLibrary {
	static {
		BridJ.register();
	}
	/**
	 * Values for focus_state, used as bit mask.<br>
	 * EXPLICIT means we received a FocusIn for the frame and know it has<br>
	 * the focus.  IMPLICIT means we received an EnterNotify and the frame<br>
	 * may have the focus if no window manager is running.<br>
	 * FocusOut and LeaveNotify clears EXPLICIT/IMPLICIT.
	 */
	public static final int FOCUS_NONE = (int)0;
	public static final int FOCUS_IMPLICIT = (int)1;
	public static final int FOCUS_EXPLICIT = (int)2;
	/// <i>native declaration : xterm.h</i>
	public static final int VERTICAL_SCROLL_BAR_TOP_BORDER = (int)(2);
	/// <i>native declaration : xterm.h</i>
	public static final int VERTICAL_SCROLL_BAR_BOTTOM_BORDER = (int)(2);
	/// <i>native declaration : xterm.h</i>
	public static final int VERTICAL_SCROLL_BAR_MIN_HANDLE = (int)(5);
	/// <i>native declaration : xterm.h</i>
	public static final int STANDARD_EVENT_SET = (int)((1 << 0) | (1 << 15) | (1 << 2) | (1 << 3) | (1 << 6) | (1 << 17) | (1 << 21) | (1 << 5) | (1 << 4) | (1 << 16));
	/// <i>native declaration : xterm.h</i>
	public static final int No_Cursor = (int)(0);
	/// <i>native declaration : xterm.h</i>
	public static final int VERTICAL_SCROLL_BAR_LEFT_BORDER = (int)(2);
	/// <i>native declaration : xterm.h</i>
	public static final int VERTICAL_SCROLL_BAR_WIDTH_TRIM = (int)(0);
	/// <i>native declaration : xterm.h</i>
	public static final int VERTICAL_SCROLL_BAR_RIGHT_BORDER = (int)(2);
	/// <i>native declaration : xterm.h:1093</i>
	/// <i>native declaration : xterm.h:1093</i>
	public static abstract class XIMProc extends Callback<XIMProc > {
		public abstract void apply(XtermLibrary.XIM XIM1, Pointer<Byte > XPointer1, Pointer<Byte > XPointer2);
	};
	/// <i>native declaration : xterm.h:1094</i>
	/// <i>native declaration : xterm.h:1094</i>
	public static abstract class XICProc extends Callback<XICProc > {
		public abstract int apply(XtermLibrary.XIC XIC1, Pointer<Byte > XPointer1, Pointer<Byte > XPointer2);
	};
	/// <i>native declaration : xterm.h:1095</i>
	/// <i>native declaration : xterm.h:1095</i>
	public static abstract class XIDProc extends Callback<XIDProc > {
		public abstract void apply(Pointer<XtermLibrary._XDisplay > DisplayPtr1, Pointer<Byte > XPointer1, Pointer<Byte > XPointer2);
	};
	/**
	 * WARNING, this type not in Xlib spec<br>
	 * <i>native declaration : xterm.h:1382</i>
	 */
	/**
	 * WARNING, this type not in Xlib spec<br>
	 * <i>native declaration : xterm.h:1382</i>
	 */
	public static abstract class XErrorHandler extends Callback<XErrorHandler > {
		public abstract int apply(Pointer<XtermLibrary._XDisplay > DisplayPtr1, Pointer<? > XErrorEventPtr1);
	};
	/**
	 * WARNING, this type not in Xlib spec<br>
	 * <i>native declaration : xterm.h:1385</i>
	 */
	/**
	 * WARNING, this type not in Xlib spec<br>
	 * <i>native declaration : xterm.h:1385</i>
	 */
	public static abstract class XIOErrorHandler extends Callback<XIOErrorHandler > {
		public abstract int apply(Pointer<XtermLibrary._XDisplay > DisplayPtr1);
	};
	/// <i>native declaration : xterm.h:2020</i>
	/// <i>native declaration : xterm.h:2020</i>
	public static abstract class XConnectionWatchProc extends Callback<XConnectionWatchProc > {
		/// @param int2 open or close flag
		public abstract void apply(Pointer<XtermLibrary._XDisplay > DisplayPtr1, Pointer<Byte > XPointer1, int int1, int int2, Pointer<Pointer<Byte > > XPointerPtr1);
	};
	/// <i>native declaration : xterm.h:3232</i>
	/// <i>native declaration : xterm.h:3232</i>
	public static abstract class XSynchronize_callback extends Callback<XSynchronize_callback > {
		public abstract int apply(Pointer<XtermLibrary._XDisplay > DisplayPtr1);
	};
	/// <i>native declaration : xterm.h:3233</i>
	/// <i>native declaration : xterm.h:3233</i>
	public static abstract class XSetAfterFunction_callback extends Callback<XSetAfterFunction_callback > {
		public abstract int apply(Pointer<XtermLibrary._XDisplay > DisplayPtr1);
	};
	/**
	 * Original signature : <code>void check_x()</code><br>
	 * <i>native declaration : xterm.h:2714</i>
	 */
	public static native void check_x();
	/**
	 * Original signature : <code>frame* x_window_to_frame(x_display_info*, int)</code><br>
	 * <i>native declaration : xterm.h:2716</i>
	 */
	public static native Pointer<XtermLibrary.frame > x_window_to_frame(Pointer<x_display_info > x_display_infoPtr1, int int1);
	/**
	 * Original signature : <code>frame* x_any_window_to_frame(x_display_info*, int)</code><br>
	 * <i>native declaration : xterm.h:2718</i>
	 */
	public static native Pointer<XtermLibrary.frame > x_any_window_to_frame(Pointer<x_display_info > x_display_infoPtr1, int int1);
	/**
	 * Original signature : <code>frame* x_menubar_window_to_frame(x_display_info*, XEvent*)</code><br>
	 * <i>native declaration : xterm.h:2720</i>
	 */
	public static native Pointer<XtermLibrary.frame > x_menubar_window_to_frame(Pointer<x_display_info > x_display_infoPtr1, Pointer<XtermLibrary.XEvent > XEventPtr1);
	/**
	 * Original signature : <code>frame* x_top_window_to_frame(x_display_info*, int)</code><br>
	 * <i>native declaration : xterm.h:2722</i>
	 */
	public static native Pointer<XtermLibrary.frame > x_top_window_to_frame(Pointer<x_display_info > x_display_infoPtr1, int int1);
	/**
	 * Original signature : <code>x_display_info* x_display_info_for_display(Display*)</code><br>
	 * <i>native declaration : xterm.h:2733</i>
	 */
	public static native Pointer<x_display_info > x_display_info_for_display(Pointer<XtermLibrary._XDisplay > DisplayPtr1);
	/**
	 * Original signature : <code>void x_set_frame_alpha(frame*)</code><br>
	 * <i>native declaration : xterm.h:2735</i>
	 */
	public static native void x_set_frame_alpha(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>x_display_info* x_term_init(Lisp_Object, char*, char*)</code><br>
	 * <i>native declaration : xterm.h:2737</i>
	 */
	public static native Pointer<x_display_info > x_term_init(XtermLibrary.Lisp_Object Lisp_Object1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	/**
	 * Original signature : <code>int x_display_ok(const char*)</code><br>
	 * <i>native declaration : xterm.h:2739</i>
	 */
	public static native int x_display_ok(Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>void select_visual(x_display_info*)</code><br>
	 * <i>native declaration : xterm.h:2741</i>
	 */
	public static native void select_visual(Pointer<x_display_info > x_display_infoPtr1);
	/**
	 * Original signature : <code>void x_handle_selection_notify(XSelectionEvent*)</code><br>
	 * <i>native declaration : xterm.h:3051</i>
	 */
	public static native void x_handle_selection_notify(Pointer<? > XSelectionEventPtr1);
	/**
	 * Original signature : <code>void x_handle_property_notify(XPropertyEvent*)</code><br>
	 * <i>native declaration : xterm.h:3053</i>
	 */
	public static native void x_handle_property_notify(Pointer<? > XPropertyEventPtr1);
	/**
	 * Original signature : <code>frame* check_x_frame(Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3055</i>
	 */
	public static native Pointer<XtermLibrary.frame > check_x_frame(XtermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void x_free_gcs(frame*)</code><br>
	 * <i>native declaration : xterm.h:3057</i>
	 */
	public static native void x_free_gcs(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>XrmDatabase x_load_resources(Display*, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : xterm.h:3062</i>
	 */
	public static native XtermLibrary.XrmDatabase x_load_resources(Pointer<XtermLibrary._XDisplay > DisplayPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<Byte > charPtr3);
	/**
	 * Original signature : <code>int x_text_icon(frame*, const char*)</code><br>
	 * <i>native declaration : xterm.h:3064</i>
	 */
	public static native int x_text_icon(Pointer<XtermLibrary.frame > framePtr1, Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>int x_bitmap_icon(frame*, Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3066</i>
	 */
	public static native int x_bitmap_icon(Pointer<XtermLibrary.frame > framePtr1, XtermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void x_catch_errors(Display*)</code><br>
	 * <i>native declaration : xterm.h:3068</i>
	 */
	public static native void x_catch_errors(Pointer<XtermLibrary._XDisplay > DisplayPtr1);
	/**
	 * Original signature : <code>int x_had_errors_p(Display*)</code><br>
	 * <i>native declaration : xterm.h:3070</i>
	 */
	public static native int x_had_errors_p(Pointer<XtermLibrary._XDisplay > DisplayPtr1);
	/**
	 * Original signature : <code>void x_uncatch_errors()</code><br>
	 * <i>native declaration : xterm.h:3072</i>
	 */
	public static native void x_uncatch_errors();
	/**
	 * Original signature : <code>void x_clear_errors(Display*)</code><br>
	 * <i>native declaration : xterm.h:3074</i>
	 */
	public static native void x_clear_errors(Pointer<XtermLibrary._XDisplay > DisplayPtr1);
	/**
	 * Original signature : <code>void x_set_window_size(frame*, int, int, int)</code><br>
	 * <i>native declaration : xterm.h:3076</i>
	 */
	public static native void x_set_window_size(Pointer<XtermLibrary.frame > framePtr1, int int1, int int2, int int3);
	/**
	 * Original signature : <code>void x_set_mouse_position(frame*, int, int)</code><br>
	 * <i>native declaration : xterm.h:3078</i>
	 */
	public static native void x_set_mouse_position(Pointer<XtermLibrary.frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void x_set_mouse_pixel_position(frame*, int, int)</code><br>
	 * <i>native declaration : xterm.h:3080</i>
	 */
	public static native void x_set_mouse_pixel_position(Pointer<XtermLibrary.frame > framePtr1, int int1, int int2);
	/**
	 * Original signature : <code>void xembed_request_focus(frame*)</code><br>
	 * <i>native declaration : xterm.h:3082</i>
	 */
	public static native void xembed_request_focus(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void x_ewmh_activate_frame(frame*)</code><br>
	 * <i>native declaration : xterm.h:3084</i>
	 */
	public static native void x_ewmh_activate_frame(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void x_make_frame_visible(frame*)</code><br>
	 * <i>native declaration : xterm.h:3086</i>
	 */
	public static native void x_make_frame_visible(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void x_make_frame_invisible(frame*)</code><br>
	 * <i>native declaration : xterm.h:3088</i>
	 */
	public static native void x_make_frame_invisible(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void x_iconify_frame(frame*)</code><br>
	 * <i>native declaration : xterm.h:3090</i>
	 */
	public static native void x_iconify_frame(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void x_free_frame_resources(frame*)</code><br>
	 * <i>native declaration : xterm.h:3092</i>
	 */
	public static native void x_free_frame_resources(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void x_wm_set_size_hint(frame*, long, int)</code><br>
	 * <i>native declaration : xterm.h:3094</i>
	 */
	public static native void x_wm_set_size_hint(Pointer<XtermLibrary.frame > framePtr1, @CLong long l1, int int1);
	/**
	 * Original signature : <code>void x_delete_terminal(terminal*)</code><br>
	 * <i>native declaration : xterm.h:3096</i>
	 */
	public static native void x_delete_terminal(Pointer<XtermLibrary.terminal > terminal);
	/**
	 * Original signature : <code>long x_copy_color(frame*, unsigned long)</code><br>
	 * <i>native declaration : xterm.h:3098</i>
	 */
	@CLong 
	public static native long x_copy_color(Pointer<XtermLibrary.frame > framePtr1, @CLong long u1);
	/**
	 * Original signature : <code>int x_alloc_nearest_color(frame*, Colormap, XColor*)</code><br>
	 * <i>native declaration : xterm.h:3100</i>
	 */
	public static native int x_alloc_nearest_color(Pointer<XtermLibrary.frame > framePtr1, @CLong long Colormap1, Pointer<? > XColorPtr1);
	/**
	 * Original signature : <code>void x_query_colors(frame*, XColor*, int)</code><br>
	 * <i>native declaration : xterm.h:3102</i>
	 */
	public static native void x_query_colors(Pointer<XtermLibrary.frame > f, Pointer<? > XColorPtr1, int int1);
	/**
	 * Original signature : <code>void x_query_color(frame*, XColor*)</code><br>
	 * <i>native declaration : xterm.h:3104</i>
	 */
	public static native void x_query_color(Pointer<XtermLibrary.frame > f, Pointer<? > XColorPtr1);
	/**
	 * Original signature : <code>void x_clear_area(Display*, Window, int, int, int, int, int)</code><br>
	 * <i>native declaration : xterm.h:3106</i>
	 */
	public static native void x_clear_area(Pointer<XtermLibrary._XDisplay > DisplayPtr1, @CLong long Window1, int int1, int int2, int int3, int int4, int int5);
	/**
	 * Original signature : <code>EMACS_INT x_x_to_emacs_modifiers(x_display_info*, int)</code><br>
	 * <i>native declaration : xterm.h:3108</i>
	 */
	public static native XtermLibrary.EMACS_INT x_x_to_emacs_modifiers(Pointer<x_display_info > x_display_infoPtr1, int int1);
	/**
	 * Original signature : <code>int x_display_pixel_height(x_display_info*)</code><br>
	 * <i>native declaration : xterm.h:3110</i>
	 */
	public static native int x_display_pixel_height(Pointer<x_display_info > x_display_infoPtr1);
	/**
	 * Original signature : <code>int x_display_pixel_width(x_display_info*)</code><br>
	 * <i>native declaration : xterm.h:3112</i>
	 */
	public static native int x_display_pixel_width(Pointer<x_display_info > x_display_infoPtr1);
	/**
	 * Original signature : <code>void x_set_sticky(frame*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3114</i>
	 */
	public static native void x_set_sticky(Pointer<XtermLibrary.frame > framePtr1, XtermLibrary.Lisp_Object Lisp_Object1, XtermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void x_wait_for_event(frame*, int)</code><br>
	 * <i>native declaration : xterm.h:3116</i>
	 */
	public static native void x_wait_for_event(Pointer<XtermLibrary.frame > framePtr1, int int1);
	/**
	 * Original signature : <code>void x_handle_property_notify(XPropertyEvent*)</code><br>
	 * <i>native declaration : xterm.h:3118</i>
	 */
	@Name("x_handle_property_notify") 
	public static native void x_handle_property_notify$2(Pointer<? > XPropertyEventPtr1);
	/**
	 * Original signature : <code>void x_handle_selection_notify(XSelectionEvent*)</code><br>
	 * <i>native declaration : xterm.h:3120</i>
	 */
	@Name("x_handle_selection_notify") 
	public static native void x_handle_selection_notify$2(Pointer<? > XSelectionEventPtr1);
	/**
	 * Original signature : <code>void x_handle_selection_event(input_event*)</code><br>
	 * <i>native declaration : xterm.h:3122</i>
	 */
	public static native void x_handle_selection_event(Pointer<XtermLibrary.input_event > input_eventPtr1);
	/**
	 * Original signature : <code>void x_clear_frame_selections(frame*)</code><br>
	 * <i>native declaration : xterm.h:3124</i>
	 */
	public static native void x_clear_frame_selections(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void x_send_client_event(Lisp_Object, Lisp_Object, Lisp_Object, Atom, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3126</i>
	 */
	public static native void x_send_client_event(XtermLibrary.Lisp_Object display, XtermLibrary.Lisp_Object dest, XtermLibrary.Lisp_Object from, @CLong long message_type, XtermLibrary.Lisp_Object format, XtermLibrary.Lisp_Object values);
	/**
	 * Original signature : <code>int x_handle_dnd_message(frame*, XClientMessageEvent*, x_display_info*, input_event*)</code><br>
	 * <i>native declaration : xterm.h:3128</i>
	 */
	public static native int x_handle_dnd_message(Pointer<XtermLibrary.frame > framePtr1, Pointer<? > XClientMessageEventPtr1, Pointer<x_display_info > x_display_infoPtr1, Pointer<XtermLibrary.input_event > bufp);
	/**
	 * Original signature : <code>int x_check_property_data(Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3130</i>
	 */
	public static native int x_check_property_data(XtermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void x_fill_property_data(Display*, Lisp_Object, void*, int)</code><br>
	 * <i>native declaration : xterm.h:3132</i>
	 */
	public static native void x_fill_property_data(Pointer<XtermLibrary._XDisplay > DisplayPtr1, XtermLibrary.Lisp_Object Lisp_Object1, Pointer<? > voidPtr1, int int1);
	/**
	 * Original signature : <code>Lisp_Object x_property_data_to_lisp(frame*, const unsigned char*, Atom, int, unsigned long)</code><br>
	 * <i>native declaration : xterm.h:3134</i>
	 */
	public static native XtermLibrary.Lisp_Object x_property_data_to_lisp(Pointer<XtermLibrary.frame > framePtr1, Pointer<Byte > charPtr1, @CLong long Atom1, int int1, @CLong long u1);
	/**
	 * Original signature : <code>void x_clipboard_manager_save_frame(Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3136</i>
	 */
	public static native void x_clipboard_manager_save_frame(XtermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void x_clipboard_manager_save_all()</code><br>
	 * <i>native declaration : xterm.h:3138</i>
	 */
	public static native void x_clipboard_manager_save_all();
	/**
	 * Original signature : <code>x_display_info* check_x_display_info(Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3140</i>
	 */
	public static native Pointer<x_display_info > check_x_display_info(XtermLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object x_get_focus_frame(frame*)</code><br>
	 * <i>native declaration : xterm.h:3142</i>
	 */
	public static native XtermLibrary.Lisp_Object x_get_focus_frame(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void x_real_positions(frame*, int*, int*)</code><br>
	 * <i>native declaration : xterm.h:3144</i>
	 */
	public static native void x_real_positions(Pointer<XtermLibrary.frame > framePtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2);
	/**
	 * Original signature : <code>void x_set_menu_bar_lines(frame*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3146</i>
	 */
	public static native void x_set_menu_bar_lines(Pointer<XtermLibrary.frame > framePtr1, XtermLibrary.Lisp_Object Lisp_Object1, XtermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void x_implicitly_set_name(frame*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3148</i>
	 */
	public static native void x_implicitly_set_name(Pointer<XtermLibrary.frame > framePtr1, XtermLibrary.Lisp_Object Lisp_Object1, XtermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void xic_free_xfontset(frame*)</code><br>
	 * <i>native declaration : xterm.h:3150</i>
	 */
	public static native void xic_free_xfontset(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void create_frame_xic(frame*)</code><br>
	 * <i>native declaration : xterm.h:3152</i>
	 */
	public static native void create_frame_xic(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void destroy_frame_xic(frame*)</code><br>
	 * <i>native declaration : xterm.h:3154</i>
	 */
	public static native void destroy_frame_xic(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void xic_set_preeditarea(window*, int, int)</code><br>
	 * <i>native declaration : xterm.h:3156</i>
	 */
	public static native void xic_set_preeditarea(Pointer<XtermLibrary.window > windowPtr1, int int1, int int2);
	/**
	 * Original signature : <code>void xic_set_statusarea(frame*)</code><br>
	 * <i>native declaration : xterm.h:3158</i>
	 */
	public static native void xic_set_statusarea(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void xic_set_xfontset(frame*, const char*)</code><br>
	 * <i>native declaration : xterm.h:3160</i>
	 */
	public static native void xic_set_xfontset(Pointer<XtermLibrary.frame > framePtr1, Pointer<Byte > charPtr1);
	/**
	 * Original signature : <code>int x_pixel_width(frame*)</code><br>
	 * <i>native declaration : xterm.h:3162</i>
	 */
	public static native int x_pixel_width(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int x_pixel_height(frame*)</code><br>
	 * <i>native declaration : xterm.h:3164</i>
	 */
	public static native int x_pixel_height(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int x_char_width(frame*)</code><br>
	 * <i>native declaration : xterm.h:3166</i>
	 */
	public static native int x_char_width(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int x_char_height(frame*)</code><br>
	 * <i>native declaration : xterm.h:3168</i>
	 */
	public static native int x_char_height(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void x_sync(frame*)</code><br>
	 * <i>native declaration : xterm.h:3170</i>
	 */
	public static native void x_sync(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int x_defined_color(frame*, const char*, XColor*, int)</code><br>
	 * <i>native declaration : xterm.h:3172</i>
	 */
	public static native int x_defined_color(Pointer<XtermLibrary.frame > framePtr1, Pointer<Byte > charPtr1, Pointer<? > XColorPtr1, int int1);
	/**
	 * Original signature : <code>void x_set_tool_bar_lines(frame*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : xterm.h:3174</i>
	 */
	public static native void x_set_tool_bar_lines(Pointer<XtermLibrary.frame > framePtr1, XtermLibrary.Lisp_Object Lisp_Object1, XtermLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void x_activate_menubar(frame*)</code><br>
	 * <i>native declaration : xterm.h:3176</i>
	 */
	public static native void x_activate_menubar(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>int popup_activated()</code><br>
	 * <i>native declaration : xterm.h:3178</i>
	 */
	public static native int popup_activated();
	/**
	 * Original signature : <code>void initialize_frame_menubar(frame*)</code><br>
	 * <i>native declaration : xterm.h:3180</i>
	 */
	public static native void initialize_frame_menubar(Pointer<XtermLibrary.frame > framePtr1);
	/**
	 * Original signature : <code>void free_frame_menubar(frame*)</code><br>
	 * <i>native declaration : xterm.h:3182</i>
	 */
	public static native void free_frame_menubar(Pointer<XtermLibrary.frame > framePtr1);
	public int _Xdebug() {
		try {
			return (int)BridJ.getNativeLibrary("xterm").getSymbolPointer("_Xdebug").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public XtermLibrary _Xdebug(int _Xdebug) {
		try {
			{
				BridJ.getNativeLibrary("xterm").getSymbolPointer("_Xdebug").as(int.class).set(_Xdebug);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * This is a chain of structures for all the X displays currently in use.<br>
	 * C type : extern x_display_info*
	 */
	public Pointer<x_display_info > x_display_list() {
		try {
			return (Pointer<x_display_info >)BridJ.getNativeLibrary("xterm").getSymbolPointer("x_display_list").as(DefaultParameterizedType.paramType(Pointer.class, x_display_info.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * This is a chain of structures for all the X displays currently in use.<br>
	 * C type : extern x_display_info*
	 */
	public XtermLibrary x_display_list(Pointer<x_display_info > x_display_list) {
		try {
			{
				BridJ.getNativeLibrary("xterm").getSymbolPointer("x_display_list").as(DefaultParameterizedType.paramType(Pointer.class, x_display_info.class)).set(x_display_list);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int gray_bitmap_width() {
		try {
			return (int)BridJ.getNativeLibrary("xterm").getSymbolPointer("gray_bitmap_width").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public XtermLibrary gray_bitmap_width(int gray_bitmap_width) {
		try {
			{
				BridJ.getNativeLibrary("xterm").getSymbolPointer("gray_bitmap_width").as(int.class).set(gray_bitmap_width);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int gray_bitmap_height() {
		try {
			return (int)BridJ.getNativeLibrary("xterm").getSymbolPointer("gray_bitmap_height").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public XtermLibrary gray_bitmap_height(int gray_bitmap_height) {
		try {
			{
				BridJ.getNativeLibrary("xterm").getSymbolPointer("gray_bitmap_height").as(int.class).set(gray_bitmap_height);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char*
	public Pointer<Byte > gray_bitmap_bits() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("xterm").getSymbolPointer("gray_bitmap_bits").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char*
	public XtermLibrary gray_bitmap_bits(Pointer<Byte > gray_bitmap_bits) {
		try {
			{
				BridJ.getNativeLibrary("xterm").getSymbolPointer("gray_bitmap_bits").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(gray_bitmap_bits);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Pointer to unknown (opaque) type
	/// Pointer to unknown (opaque) type
	public static class GC extends TypedPointer {
		public GC(long address) {
			super(address);
		}
		public GC(Pointer address) {
			super(address);
		}
	};
	/// Pointer to unknown (opaque) type
	/// Pointer to unknown (opaque) type
	public static class XIC extends TypedPointer {
		public XIC(long address) {
			super(address);
		}
		public XIC(Pointer address) {
			super(address);
		}
	};
	/// Pointer to unknown (opaque) type
	/// Pointer to unknown (opaque) type
	public static class XIM extends TypedPointer {
		public XIM(long address) {
			super(address);
		}
		public XIM(Pointer address) {
			super(address);
		}
	};
	/// Pointer to unknown (opaque) type
	/// Pointer to unknown (opaque) type
	public static class XrmDatabase extends TypedPointer {
		public XrmDatabase(long address) {
			super(address);
		}
		public XrmDatabase(Pointer address) {
			super(address);
		}
	};
	/// Undefined type
	/// Undefined type
	public static interface font {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface input_event {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Mouse_HLInfo {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface _XDisplay {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface _XIM {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface XExtData {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface frame {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface window {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface terminal {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Vector {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface _XGC {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface _XrmHashBucketRec {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface _XIC {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface XEvent {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface EMACS_INT {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface _XPrivate {
		
	};
}
