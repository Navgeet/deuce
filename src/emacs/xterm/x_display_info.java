package emacs.xterm;
import emacs.xterm.XtermLibrary.GC;
import emacs.xterm.XtermLibrary.XrmDatabase;
import emacs.xterm.XtermLibrary._XDisplay;
import emacs.xterm.XtermLibrary.frame;
import emacs.xterm.XtermLibrary.terminal;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : xterm.h:2712</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("xterm") 
public class x_display_info extends StructObject {
	public x_display_info() {
		super();
	}
	/**
	 * Chain of all x_display_info structures.<br>
	 * C type : x_display_info*
	 */
	@Field(0) 
	public Pointer<x_display_info > next() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Chain of all x_display_info structures.<br>
	 * C type : x_display_info*
	 */
	@Field(0) 
	public x_display_info next(Pointer<x_display_info > next) {
		this.io.setPointerField(this, 0, next);
		return this;
	}
	/**
	 * The generic display parameters corresponding to this X display.<br>
	 * C type : terminal*
	 */
	@Field(1) 
	public Pointer<terminal > terminal() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * The generic display parameters corresponding to this X display.<br>
	 * C type : terminal*
	 */
	@Field(1) 
	public x_display_info terminal(Pointer<terminal > terminal) {
		this.io.setPointerField(this, 1, terminal);
		return this;
	}
	/// Connection number (normally a file descriptor number).
	@Field(2) 
	public int connection() {
		return this.io.getIntField(this, 2);
	}
	/// Connection number (normally a file descriptor number).
	@Field(2) 
	public x_display_info connection(int connection) {
		this.io.setIntField(this, 2, connection);
		return this;
	}
	/**
	 * This says how to access this display in Xlib.<br>
	 * C type : Display*
	 */
	@Field(3) 
	public Pointer<_XDisplay > display() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * This says how to access this display in Xlib.<br>
	 * C type : Display*
	 */
	@Field(3) 
	public x_display_info display(Pointer<_XDisplay > display) {
		this.io.setPointerField(this, 3, display);
		return this;
	}
	/// Number of frames that are on this display.
	@Field(5) 
	public int reference_count() {
		return this.io.getIntField(this, 5);
	}
	/// Number of frames that are on this display.
	@Field(5) 
	public x_display_info reference_count(int reference_count) {
		this.io.setIntField(this, 5, reference_count);
		return this;
	}
	/**
	 * The Screen this connection is connected to.<br>
	 * C type : Screen*
	 */
	@Field(6) 
	public Pointer<? > screen() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * The Screen this connection is connected to.<br>
	 * C type : Screen*
	 */
	@Field(6) 
	public x_display_info screen(Pointer<? > screen) {
		this.io.setPointerField(this, 6, screen);
		return this;
	}
	/// Dots per inch of the screen.
	@Field(7) 
	public double resx() {
		return this.io.getDoubleField(this, 7);
	}
	/// Dots per inch of the screen.
	@Field(7) 
	public x_display_info resx(double resx) {
		this.io.setDoubleField(this, 7, resx);
		return this;
	}
	/// Dots per inch of the screen.
	@Field(8) 
	public double resy() {
		return this.io.getDoubleField(this, 8);
	}
	/// Dots per inch of the screen.
	@Field(8) 
	public x_display_info resy(double resy) {
		this.io.setDoubleField(this, 8, resy);
		return this;
	}
	/**
	 * The Visual being used for this display.<br>
	 * C type : Visual*
	 */
	@Field(9) 
	public Pointer<? > visual() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * The Visual being used for this display.<br>
	 * C type : Visual*
	 */
	@Field(9) 
	public x_display_info visual(Pointer<? > visual) {
		this.io.setPointerField(this, 9, visual);
		return this;
	}
	/**
	 * The colormap being used.<br>
	 * C type : Colormap
	 */
	@CLong 
	@Field(10) 
	public long cmap() {
		return this.io.getCLongField(this, 10);
	}
	/**
	 * The colormap being used.<br>
	 * C type : Colormap
	 */
	@CLong 
	@Field(10) 
	public x_display_info cmap(long cmap) {
		this.io.setCLongField(this, 10, cmap);
		return this;
	}
	/// Number of planes on this screen.
	@Field(11) 
	public int n_planes() {
		return this.io.getIntField(this, 11);
	}
	/// Number of planes on this screen.
	@Field(11) 
	public x_display_info n_planes(int n_planes) {
		this.io.setIntField(this, 11, n_planes);
		return this;
	}
	/// Mask of things that cause the mouse to be grabbed.
	@Field(12) 
	public int grabbed() {
		return this.io.getIntField(this, 12);
	}
	/// Mask of things that cause the mouse to be grabbed.
	@Field(12) 
	public x_display_info grabbed(int grabbed) {
		this.io.setIntField(this, 12, grabbed);
		return this;
	}
	/**
	 * Emacs bitmap-id of the default icon bitmap for this frame.<br>
	 * Or -1 if none has been allocated yet.
	 */
	@Ptr 
	@Field(13) 
	public long icon_bitmap_id() {
		return this.io.getSizeTField(this, 13);
	}
	/**
	 * Emacs bitmap-id of the default icon bitmap for this frame.<br>
	 * Or -1 if none has been allocated yet.
	 */
	@Ptr 
	@Field(13) 
	public x_display_info icon_bitmap_id(long icon_bitmap_id) {
		this.io.setSizeTField(this, 13, icon_bitmap_id);
		return this;
	}
	/**
	 * The root window of this screen.<br>
	 * C type : Window
	 */
	@CLong 
	@Field(14) 
	public long root_window() {
		return this.io.getCLongField(this, 14);
	}
	/**
	 * The root window of this screen.<br>
	 * C type : Window
	 */
	@CLong 
	@Field(14) 
	public x_display_info root_window(long root_window) {
		this.io.setCLongField(this, 14, root_window);
		return this;
	}
	/**
	 * Client leader window.<br>
	 * C type : Window
	 */
	@CLong 
	@Field(15) 
	public long client_leader_window() {
		return this.io.getCLongField(this, 15);
	}
	/**
	 * Client leader window.<br>
	 * C type : Window
	 */
	@CLong 
	@Field(15) 
	public x_display_info client_leader_window(long client_leader_window) {
		this.io.setCLongField(this, 15, client_leader_window);
		return this;
	}
	/**
	 * The cursor to use for vertical scroll bars.<br>
	 * C type : Cursor
	 */
	@CLong 
	@Field(16) 
	public long vertical_scroll_bar_cursor() {
		return this.io.getCLongField(this, 16);
	}
	/**
	 * The cursor to use for vertical scroll bars.<br>
	 * C type : Cursor
	 */
	@CLong 
	@Field(16) 
	public x_display_info vertical_scroll_bar_cursor(long vertical_scroll_bar_cursor) {
		this.io.setCLongField(this, 16, vertical_scroll_bar_cursor);
		return this;
	}
	/**
	 * The invisible cursor used for pointer blanking.<br>
	 * C type : Cursor
	 */
	@CLong 
	@Field(17) 
	public long invisible_cursor() {
		return this.io.getCLongField(this, 17);
	}
	/**
	 * The invisible cursor used for pointer blanking.<br>
	 * C type : Cursor
	 */
	@CLong 
	@Field(17) 
	public x_display_info invisible_cursor(long invisible_cursor) {
		this.io.setCLongField(this, 17, invisible_cursor);
		return this;
	}
	/**
	 * X Resource data base<br>
	 * C type : XrmDatabase
	 */
	@Field(18) 
	public XrmDatabase xrdb() {
		return this.io.getTypedPointerField(this, 18);
	}
	/**
	 * X Resource data base<br>
	 * C type : XrmDatabase
	 */
	@Field(18) 
	public x_display_info xrdb(XrmDatabase xrdb) {
		this.io.setPointerField(this, 18, xrdb);
		return this;
	}
	/// Minimum width over all characters in all fonts in font_table.
	@Field(19) 
	public int smallest_char_width() {
		return this.io.getIntField(this, 19);
	}
	/// Minimum width over all characters in all fonts in font_table.
	@Field(19) 
	public x_display_info smallest_char_width(int smallest_char_width) {
		this.io.setIntField(this, 19, smallest_char_width);
		return this;
	}
	/// Minimum font height over all fonts in font_table.
	@Field(20) 
	public int smallest_font_height() {
		return this.io.getIntField(this, 20);
	}
	/// Minimum font height over all fonts in font_table.
	@Field(20) 
	public x_display_info smallest_font_height(int smallest_font_height) {
		this.io.setIntField(this, 20, smallest_font_height);
		return this;
	}
	/**
	 * Reusable Graphics Context for drawing a cursor in a non-default face.<br>
	 * C type : GC
	 */
	@Field(21) 
	public GC scratch_cursor_gc() {
		return this.io.getTypedPointerField(this, 21);
	}
	/**
	 * Reusable Graphics Context for drawing a cursor in a non-default face.<br>
	 * C type : GC
	 */
	@Field(21) 
	public x_display_info scratch_cursor_gc(GC scratch_cursor_gc) {
		this.io.setPointerField(this, 21, scratch_cursor_gc);
		return this;
	}
	/// C type : char*
	@Field(23) 
	public Pointer<Byte > x_id_name() {
		return this.io.getPointerField(this, 23);
	}
	/// C type : char*
	@Field(23) 
	public x_display_info x_id_name(Pointer<Byte > x_id_name) {
		this.io.setPointerField(this, 23, x_id_name);
		return this;
	}
	/// The number of fonts opened for this display.
	@Field(24) 
	public int n_fonts() {
		return this.io.getIntField(this, 24);
	}
	/// The number of fonts opened for this display.
	@Field(24) 
	public x_display_info n_fonts(int n_fonts) {
		this.io.setIntField(this, 24, n_fonts);
		return this;
	}
	/**
	 * Pointer to bitmap records.<br>
	 * C type : x_bitmap_record*
	 */
	@Field(25) 
	public Pointer<x_bitmap_record > bitmaps() {
		return this.io.getPointerField(this, 25);
	}
	/**
	 * Pointer to bitmap records.<br>
	 * C type : x_bitmap_record*
	 */
	@Field(25) 
	public x_display_info bitmaps(Pointer<x_bitmap_record > bitmaps) {
		this.io.setPointerField(this, 25, bitmaps);
		return this;
	}
	/// Allocated size of bitmaps field.
	@Ptr 
	@Field(26) 
	public long bitmaps_size() {
		return this.io.getSizeTField(this, 26);
	}
	/// Allocated size of bitmaps field.
	@Ptr 
	@Field(26) 
	public x_display_info bitmaps_size(long bitmaps_size) {
		this.io.setSizeTField(this, 26, bitmaps_size);
		return this;
	}
	/// Last used bitmap index.
	@Ptr 
	@Field(27) 
	public long bitmaps_last() {
		return this.io.getSizeTField(this, 27);
	}
	/// Last used bitmap index.
	@Ptr 
	@Field(27) 
	public x_display_info bitmaps_last(long bitmaps_last) {
		this.io.setSizeTField(this, 27, bitmaps_last);
		return this;
	}
	/**
	 * Which modifier keys are on which modifier bits?<br>
	 * With each keystroke, X returns eight bits indicating which modifier<br>
	 * keys were held down when the key was pressed.  The interpretation<br>
	 * of the top five modifier bits depends on what keys are attached<br>
	 * to them.  If the Meta_L and Meta_R keysyms are on mod5, then mod5<br>
	 * is the meta bit.<br>
	 * meta_mod_mask is a mask containing the bits used for the meta key.<br>
	 * It may have more than one bit set, if more than one modifier bit<br>
	 * has meta keys on it.  Basically, if EVENT is a KeyPress event,<br>
	 * the meta key is pressed if (EVENT.state & meta_mod_mask) != 0.<br>
	 * shift_lock_mask is LockMask if the XK_Shift_Lock keysym is on the<br>
	 * lock modifier bit, or zero otherwise.  Non-alphabetic keys should<br>
	 * only be affected by the lock modifier bit if XK_Shift_Lock is in<br>
	 * use; XK_Caps_Lock should only affect alphabetic keys.  With this<br>
	 * arrangement, the lock modifier should shift the character if<br>
	 * (EVENT.state & shift_lock_mask) != 0.
	 */
	@Field(28) 
	public int meta_mod_mask() {
		return this.io.getIntField(this, 28);
	}
	/**
	 * Which modifier keys are on which modifier bits?<br>
	 * With each keystroke, X returns eight bits indicating which modifier<br>
	 * keys were held down when the key was pressed.  The interpretation<br>
	 * of the top five modifier bits depends on what keys are attached<br>
	 * to them.  If the Meta_L and Meta_R keysyms are on mod5, then mod5<br>
	 * is the meta bit.<br>
	 * meta_mod_mask is a mask containing the bits used for the meta key.<br>
	 * It may have more than one bit set, if more than one modifier bit<br>
	 * has meta keys on it.  Basically, if EVENT is a KeyPress event,<br>
	 * the meta key is pressed if (EVENT.state & meta_mod_mask) != 0.<br>
	 * shift_lock_mask is LockMask if the XK_Shift_Lock keysym is on the<br>
	 * lock modifier bit, or zero otherwise.  Non-alphabetic keys should<br>
	 * only be affected by the lock modifier bit if XK_Shift_Lock is in<br>
	 * use; XK_Caps_Lock should only affect alphabetic keys.  With this<br>
	 * arrangement, the lock modifier should shift the character if<br>
	 * (EVENT.state & shift_lock_mask) != 0.
	 */
	@Field(28) 
	public x_display_info meta_mod_mask(int meta_mod_mask) {
		this.io.setIntField(this, 28, meta_mod_mask);
		return this;
	}
	/**
	 * Which modifier keys are on which modifier bits?<br>
	 * With each keystroke, X returns eight bits indicating which modifier<br>
	 * keys were held down when the key was pressed.  The interpretation<br>
	 * of the top five modifier bits depends on what keys are attached<br>
	 * to them.  If the Meta_L and Meta_R keysyms are on mod5, then mod5<br>
	 * is the meta bit.<br>
	 * meta_mod_mask is a mask containing the bits used for the meta key.<br>
	 * It may have more than one bit set, if more than one modifier bit<br>
	 * has meta keys on it.  Basically, if EVENT is a KeyPress event,<br>
	 * the meta key is pressed if (EVENT.state & meta_mod_mask) != 0.<br>
	 * shift_lock_mask is LockMask if the XK_Shift_Lock keysym is on the<br>
	 * lock modifier bit, or zero otherwise.  Non-alphabetic keys should<br>
	 * only be affected by the lock modifier bit if XK_Shift_Lock is in<br>
	 * use; XK_Caps_Lock should only affect alphabetic keys.  With this<br>
	 * arrangement, the lock modifier should shift the character if<br>
	 * (EVENT.state & shift_lock_mask) != 0.
	 */
	@Field(29) 
	public int shift_lock_mask() {
		return this.io.getIntField(this, 29);
	}
	/**
	 * Which modifier keys are on which modifier bits?<br>
	 * With each keystroke, X returns eight bits indicating which modifier<br>
	 * keys were held down when the key was pressed.  The interpretation<br>
	 * of the top five modifier bits depends on what keys are attached<br>
	 * to them.  If the Meta_L and Meta_R keysyms are on mod5, then mod5<br>
	 * is the meta bit.<br>
	 * meta_mod_mask is a mask containing the bits used for the meta key.<br>
	 * It may have more than one bit set, if more than one modifier bit<br>
	 * has meta keys on it.  Basically, if EVENT is a KeyPress event,<br>
	 * the meta key is pressed if (EVENT.state & meta_mod_mask) != 0.<br>
	 * shift_lock_mask is LockMask if the XK_Shift_Lock keysym is on the<br>
	 * lock modifier bit, or zero otherwise.  Non-alphabetic keys should<br>
	 * only be affected by the lock modifier bit if XK_Shift_Lock is in<br>
	 * use; XK_Caps_Lock should only affect alphabetic keys.  With this<br>
	 * arrangement, the lock modifier should shift the character if<br>
	 * (EVENT.state & shift_lock_mask) != 0.
	 */
	@Field(29) 
	public x_display_info shift_lock_mask(int shift_lock_mask) {
		this.io.setIntField(this, 29, shift_lock_mask);
		return this;
	}
	/// These are like meta_mod_mask, but for different modifiers.
	@Field(30) 
	public int alt_mod_mask() {
		return this.io.getIntField(this, 30);
	}
	/// These are like meta_mod_mask, but for different modifiers.
	@Field(30) 
	public x_display_info alt_mod_mask(int alt_mod_mask) {
		this.io.setIntField(this, 30, alt_mod_mask);
		return this;
	}
	/// These are like meta_mod_mask, but for different modifiers.
	@Field(31) 
	public int super_mod_mask() {
		return this.io.getIntField(this, 31);
	}
	/// These are like meta_mod_mask, but for different modifiers.
	@Field(31) 
	public x_display_info super_mod_mask(int super_mod_mask) {
		this.io.setIntField(this, 31, super_mod_mask);
		return this;
	}
	/// These are like meta_mod_mask, but for different modifiers.
	@Field(32) 
	public int hyper_mod_mask() {
		return this.io.getIntField(this, 32);
	}
	/// These are like meta_mod_mask, but for different modifiers.
	@Field(32) 
	public x_display_info hyper_mod_mask(int hyper_mod_mask) {
		this.io.setIntField(this, 32, hyper_mod_mask);
		return this;
	}
	/**
	 * Communication with window managers.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(33) 
	public long Xatom_wm_protocols() {
		return this.io.getCLongField(this, 33);
	}
	/**
	 * Communication with window managers.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(33) 
	public x_display_info Xatom_wm_protocols(long Xatom_wm_protocols) {
		this.io.setCLongField(this, 33, Xatom_wm_protocols);
		return this;
	}
	/**
	 * Kinds of protocol things we may receive.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(34) 
	public long Xatom_wm_take_focus() {
		return this.io.getCLongField(this, 34);
	}
	/**
	 * Kinds of protocol things we may receive.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(34) 
	public x_display_info Xatom_wm_take_focus(long Xatom_wm_take_focus) {
		this.io.setCLongField(this, 34, Xatom_wm_take_focus);
		return this;
	}
	/// C type : Atom
	@CLong 
	@Field(35) 
	public long Xatom_wm_save_yourself() {
		return this.io.getCLongField(this, 35);
	}
	/// C type : Atom
	@CLong 
	@Field(35) 
	public x_display_info Xatom_wm_save_yourself(long Xatom_wm_save_yourself) {
		this.io.setCLongField(this, 35, Xatom_wm_save_yourself);
		return this;
	}
	/// C type : Atom
	@CLong 
	@Field(36) 
	public long Xatom_wm_delete_window() {
		return this.io.getCLongField(this, 36);
	}
	/// C type : Atom
	@CLong 
	@Field(36) 
	public x_display_info Xatom_wm_delete_window(long Xatom_wm_delete_window) {
		this.io.setCLongField(this, 36, Xatom_wm_delete_window);
		return this;
	}
	/**
	 * Atom for indicating window state to the window manager.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(37) 
	public long Xatom_wm_change_state() {
		return this.io.getCLongField(this, 37);
	}
	/**
	 * Atom for indicating window state to the window manager.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(37) 
	public x_display_info Xatom_wm_change_state(long Xatom_wm_change_state) {
		this.io.setCLongField(this, 37, Xatom_wm_change_state);
		return this;
	}
	/**
	 * Other WM communication<br>
	 * When our config request is denied<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(38) 
	public long Xatom_wm_configure_denied() {
		return this.io.getCLongField(this, 38);
	}
	/**
	 * Other WM communication<br>
	 * When our config request is denied<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(38) 
	public x_display_info Xatom_wm_configure_denied(long Xatom_wm_configure_denied) {
		this.io.setCLongField(this, 38, Xatom_wm_configure_denied);
		return this;
	}
	/**
	 * When the WM moves us.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(39) 
	public long Xatom_wm_window_moved() {
		return this.io.getCLongField(this, 39);
	}
	/**
	 * When the WM moves us.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(39) 
	public x_display_info Xatom_wm_window_moved(long Xatom_wm_window_moved) {
		this.io.setCLongField(this, 39, Xatom_wm_window_moved);
		return this;
	}
	/**
	 * Id of client leader window.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(40) 
	public long Xatom_wm_client_leader() {
		return this.io.getCLongField(this, 40);
	}
	/**
	 * Id of client leader window.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(40) 
	public x_display_info Xatom_wm_client_leader(long Xatom_wm_client_leader) {
		this.io.setCLongField(this, 40, Xatom_wm_client_leader);
		return this;
	}
	/**
	 * EditRes protocol<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(41) 
	public long Xatom_editres() {
		return this.io.getCLongField(this, 41);
	}
	/**
	 * EditRes protocol<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(41) 
	public x_display_info Xatom_editres(long Xatom_editres) {
		this.io.setCLongField(this, 41, Xatom_editres);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(42) 
	public long Xatom_CLIPBOARD() {
		return this.io.getCLongField(this, 42);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(42) 
	public x_display_info Xatom_CLIPBOARD(long Xatom_CLIPBOARD) {
		this.io.setCLongField(this, 42, Xatom_CLIPBOARD);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(43) 
	public long Xatom_TIMESTAMP() {
		return this.io.getCLongField(this, 43);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(43) 
	public x_display_info Xatom_TIMESTAMP(long Xatom_TIMESTAMP) {
		this.io.setCLongField(this, 43, Xatom_TIMESTAMP);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(44) 
	public long Xatom_TEXT() {
		return this.io.getCLongField(this, 44);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(44) 
	public x_display_info Xatom_TEXT(long Xatom_TEXT) {
		this.io.setCLongField(this, 44, Xatom_TEXT);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(45) 
	public long Xatom_DELETE() {
		return this.io.getCLongField(this, 45);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(45) 
	public x_display_info Xatom_DELETE(long Xatom_DELETE) {
		this.io.setCLongField(this, 45, Xatom_DELETE);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(46) 
	public long Xatom_COMPOUND_TEXT() {
		return this.io.getCLongField(this, 46);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(46) 
	public x_display_info Xatom_COMPOUND_TEXT(long Xatom_COMPOUND_TEXT) {
		this.io.setCLongField(this, 46, Xatom_COMPOUND_TEXT);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(47) 
	public long Xatom_UTF8_STRING() {
		return this.io.getCLongField(this, 47);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(47) 
	public x_display_info Xatom_UTF8_STRING(long Xatom_UTF8_STRING) {
		this.io.setCLongField(this, 47, Xatom_UTF8_STRING);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(48) 
	public long Xatom_MULTIPLE() {
		return this.io.getCLongField(this, 48);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(48) 
	public x_display_info Xatom_MULTIPLE(long Xatom_MULTIPLE) {
		this.io.setCLongField(this, 48, Xatom_MULTIPLE);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(49) 
	public long Xatom_INCR() {
		return this.io.getCLongField(this, 49);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(49) 
	public x_display_info Xatom_INCR(long Xatom_INCR) {
		this.io.setCLongField(this, 49, Xatom_INCR);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(50) 
	public long Xatom_EMACS_TMP() {
		return this.io.getCLongField(this, 50);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(50) 
	public x_display_info Xatom_EMACS_TMP(long Xatom_EMACS_TMP) {
		this.io.setCLongField(this, 50, Xatom_EMACS_TMP);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(51) 
	public long Xatom_TARGETS() {
		return this.io.getCLongField(this, 51);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(51) 
	public x_display_info Xatom_TARGETS(long Xatom_TARGETS) {
		this.io.setCLongField(this, 51, Xatom_TARGETS);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(52) 
	public long Xatom_NULL() {
		return this.io.getCLongField(this, 52);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(52) 
	public x_display_info Xatom_NULL(long Xatom_NULL) {
		this.io.setCLongField(this, 52, Xatom_NULL);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(53) 
	public long Xatom_ATOM() {
		return this.io.getCLongField(this, 53);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(53) 
	public x_display_info Xatom_ATOM(long Xatom_ATOM) {
		this.io.setCLongField(this, 53, Xatom_ATOM);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(54) 
	public long Xatom_ATOM_PAIR() {
		return this.io.getCLongField(this, 54);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(54) 
	public x_display_info Xatom_ATOM_PAIR(long Xatom_ATOM_PAIR) {
		this.io.setCLongField(this, 54, Xatom_ATOM_PAIR);
		return this;
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(55) 
	public long Xatom_CLIPBOARD_MANAGER() {
		return this.io.getCLongField(this, 55);
	}
	/**
	 * More atoms, which are selection types.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(55) 
	public x_display_info Xatom_CLIPBOARD_MANAGER(long Xatom_CLIPBOARD_MANAGER) {
		this.io.setCLongField(this, 55, Xatom_CLIPBOARD_MANAGER);
		return this;
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(56) 
	public long Xatom_PIXEL_SIZE() {
		return this.io.getCLongField(this, 56);
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(56) 
	public x_display_info Xatom_PIXEL_SIZE(long Xatom_PIXEL_SIZE) {
		this.io.setCLongField(this, 56, Xatom_PIXEL_SIZE);
		return this;
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(57) 
	public long Xatom_AVERAGE_WIDTH() {
		return this.io.getCLongField(this, 57);
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(57) 
	public x_display_info Xatom_AVERAGE_WIDTH(long Xatom_AVERAGE_WIDTH) {
		this.io.setCLongField(this, 57, Xatom_AVERAGE_WIDTH);
		return this;
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(58) 
	public long Xatom_MULE_BASELINE_OFFSET() {
		return this.io.getCLongField(this, 58);
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(58) 
	public x_display_info Xatom_MULE_BASELINE_OFFSET(long Xatom_MULE_BASELINE_OFFSET) {
		this.io.setCLongField(this, 58, Xatom_MULE_BASELINE_OFFSET);
		return this;
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(59) 
	public long Xatom_MULE_RELATIVE_COMPOSE() {
		return this.io.getCLongField(this, 59);
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(59) 
	public x_display_info Xatom_MULE_RELATIVE_COMPOSE(long Xatom_MULE_RELATIVE_COMPOSE) {
		this.io.setCLongField(this, 59, Xatom_MULE_RELATIVE_COMPOSE);
		return this;
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(60) 
	public long Xatom_MULE_DEFAULT_ASCENT() {
		return this.io.getCLongField(this, 60);
	}
	/**
	 * More atoms for font properties.  The last three are private<br>
	 * properties, see the comments in src/fontset.h.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(60) 
	public x_display_info Xatom_MULE_DEFAULT_ASCENT(long Xatom_MULE_DEFAULT_ASCENT) {
		this.io.setCLongField(this, 60, Xatom_MULE_DEFAULT_ASCENT);
		return this;
	}
	/**
	 * More atoms for Ghostscript support.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(61) 
	public long Xatom_DONE() {
		return this.io.getCLongField(this, 61);
	}
	/**
	 * More atoms for Ghostscript support.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(61) 
	public x_display_info Xatom_DONE(long Xatom_DONE) {
		this.io.setCLongField(this, 61, Xatom_DONE);
		return this;
	}
	/**
	 * More atoms for Ghostscript support.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(62) 
	public long Xatom_PAGE() {
		return this.io.getCLongField(this, 62);
	}
	/**
	 * More atoms for Ghostscript support.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(62) 
	public x_display_info Xatom_PAGE(long Xatom_PAGE) {
		this.io.setCLongField(this, 62, Xatom_PAGE);
		return this;
	}
	/**
	 * Atom used in toolkit scroll bar client messages.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(63) 
	public long Xatom_Scrollbar() {
		return this.io.getCLongField(this, 63);
	}
	/**
	 * Atom used in toolkit scroll bar client messages.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(63) 
	public x_display_info Xatom_Scrollbar(long Xatom_Scrollbar) {
		this.io.setCLongField(this, 63, Xatom_Scrollbar);
		return this;
	}
	/**
	 * Atom used in XEmbed client messages.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(64) 
	public long Xatom_XEMBED() {
		return this.io.getCLongField(this, 64);
	}
	/**
	 * Atom used in XEmbed client messages.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(64) 
	public x_display_info Xatom_XEMBED(long Xatom_XEMBED) {
		this.io.setCLongField(this, 64, Xatom_XEMBED);
		return this;
	}
	/**
	 * Atom used in XEmbed client messages.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(65) 
	public long Xatom_XEMBED_INFO() {
		return this.io.getCLongField(this, 65);
	}
	/**
	 * Atom used in XEmbed client messages.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(65) 
	public x_display_info Xatom_XEMBED_INFO(long Xatom_XEMBED_INFO) {
		this.io.setCLongField(this, 65, Xatom_XEMBED_INFO);
		return this;
	}
	/**
	 * The frame (if any) which has the X window that has keyboard focus.<br>
	 * Zero if none.  This is examined by Ffocus_frame in xfns.c.  Note<br>
	 * that a mere EnterNotify event can set this; if you need to know the<br>
	 * last frame specified in a FocusIn or FocusOut event, use<br>
	 * x_focus_event_frame.<br>
	 * C type : frame*
	 */
	@Field(66) 
	public Pointer<frame > x_focus_frame() {
		return this.io.getPointerField(this, 66);
	}
	/**
	 * The frame (if any) which has the X window that has keyboard focus.<br>
	 * Zero if none.  This is examined by Ffocus_frame in xfns.c.  Note<br>
	 * that a mere EnterNotify event can set this; if you need to know the<br>
	 * last frame specified in a FocusIn or FocusOut event, use<br>
	 * x_focus_event_frame.<br>
	 * C type : frame*
	 */
	@Field(66) 
	public x_display_info x_focus_frame(Pointer<frame > x_focus_frame) {
		this.io.setPointerField(this, 66, x_focus_frame);
		return this;
	}
	/**
	 * The last frame mentioned in a FocusIn or FocusOut event.  This is<br>
	 * separate from x_focus_frame, because whether or not LeaveNotify<br>
	 * events cause us to lose focus depends on whether or not we have<br>
	 * received a FocusIn event for it.<br>
	 * C type : frame*
	 */
	@Field(67) 
	public Pointer<frame > x_focus_event_frame() {
		return this.io.getPointerField(this, 67);
	}
	/**
	 * The last frame mentioned in a FocusIn or FocusOut event.  This is<br>
	 * separate from x_focus_frame, because whether or not LeaveNotify<br>
	 * events cause us to lose focus depends on whether or not we have<br>
	 * received a FocusIn event for it.<br>
	 * C type : frame*
	 */
	@Field(67) 
	public x_display_info x_focus_event_frame(Pointer<frame > x_focus_event_frame) {
		this.io.setPointerField(this, 67, x_focus_event_frame);
		return this;
	}
	/**
	 * The frame which currently has the visual highlight, and should get<br>
	 * keyboard input (other sorts of input have the frame encoded in the<br>
	 * event).  It points to the X focus frame's selected window's<br>
	 * frame.  It differs from x_focus_frame when we're using a global<br>
	 * minibuffer.<br>
	 * C type : frame*
	 */
	@Field(68) 
	public Pointer<frame > x_highlight_frame() {
		return this.io.getPointerField(this, 68);
	}
	/**
	 * The frame which currently has the visual highlight, and should get<br>
	 * keyboard input (other sorts of input have the frame encoded in the<br>
	 * event).  It points to the X focus frame's selected window's<br>
	 * frame.  It differs from x_focus_frame when we're using a global<br>
	 * minibuffer.<br>
	 * C type : frame*
	 */
	@Field(68) 
	public x_display_info x_highlight_frame(Pointer<frame > x_highlight_frame) {
		this.io.setPointerField(this, 68, x_highlight_frame);
		return this;
	}
	/**
	 * The gray pixmap.<br>
	 * C type : Pixmap
	 */
	@CLong 
	@Field(69) 
	public long gray() {
		return this.io.getCLongField(this, 69);
	}
	/**
	 * The gray pixmap.<br>
	 * C type : Pixmap
	 */
	@CLong 
	@Field(69) 
	public x_display_info gray(long gray) {
		this.io.setCLongField(this, 69, gray);
		return this;
	}
	/**
	 * If non-null, a cache of the colors in the color map.  Don't<br>
	 * use this directly, call x_color_cells instead.<br>
	 * C type : XColor*
	 */
	@Field(70) 
	public Pointer<? > color_cells() {
		return this.io.getPointerField(this, 70);
	}
	/**
	 * If non-null, a cache of the colors in the color map.  Don't<br>
	 * use this directly, call x_color_cells instead.<br>
	 * C type : XColor*
	 */
	@Field(70) 
	public x_display_info color_cells(Pointer<? > color_cells) {
		this.io.setPointerField(this, 70, color_cells);
		return this;
	}
	@Field(71) 
	public int ncolor_cells() {
		return this.io.getIntField(this, 71);
	}
	@Field(71) 
	public x_display_info ncolor_cells(int ncolor_cells) {
		this.io.setIntField(this, 71, ncolor_cells);
		return this;
	}
	/// Bits and shifts to use to compose pixel values on TrueColor visuals.
	@Field(72) 
	public int red_bits() {
		return this.io.getIntField(this, 72);
	}
	/// Bits and shifts to use to compose pixel values on TrueColor visuals.
	@Field(72) 
	public x_display_info red_bits(int red_bits) {
		this.io.setIntField(this, 72, red_bits);
		return this;
	}
	/// Bits and shifts to use to compose pixel values on TrueColor visuals.
	@Field(73) 
	public int blue_bits() {
		return this.io.getIntField(this, 73);
	}
	/// Bits and shifts to use to compose pixel values on TrueColor visuals.
	@Field(73) 
	public x_display_info blue_bits(int blue_bits) {
		this.io.setIntField(this, 73, blue_bits);
		return this;
	}
	/// Bits and shifts to use to compose pixel values on TrueColor visuals.
	@Field(74) 
	public int green_bits() {
		return this.io.getIntField(this, 74);
	}
	/// Bits and shifts to use to compose pixel values on TrueColor visuals.
	@Field(74) 
	public x_display_info green_bits(int green_bits) {
		this.io.setIntField(this, 74, green_bits);
		return this;
	}
	@Field(75) 
	public int red_offset() {
		return this.io.getIntField(this, 75);
	}
	@Field(75) 
	public x_display_info red_offset(int red_offset) {
		this.io.setIntField(this, 75, red_offset);
		return this;
	}
	@Field(76) 
	public int blue_offset() {
		return this.io.getIntField(this, 76);
	}
	@Field(76) 
	public x_display_info blue_offset(int blue_offset) {
		this.io.setIntField(this, 76, blue_offset);
		return this;
	}
	@Field(77) 
	public int green_offset() {
		return this.io.getIntField(this, 77);
	}
	@Field(77) 
	public x_display_info green_offset(int green_offset) {
		this.io.setIntField(this, 77, green_offset);
		return this;
	}
	/**
	 * The type of window manager we have.  If we move FRAME_OUTER_WINDOW<br>
	 * to x/y 0/0, some window managers (type A) puts the window manager<br>
	 * decorations outside the screen and FRAME_OUTER_WINDOW exactly at 0/0.<br>
	 * Other window managers (type B) puts the window including decorations<br>
	 * at 0/0, so FRAME_OUTER_WINDOW is a bit below 0/0.<br>
	 * Record the type of WM in use so we can compensate for type A WMs.<br>
	 * C type : wm_type_enum
	 */
	@Field(78) 
	public IntValuedEnum<x_display_info.wm_type_enum > wm_type() {
		return this.io.getEnumField(this, 78);
	}
	/**
	 * The type of window manager we have.  If we move FRAME_OUTER_WINDOW<br>
	 * to x/y 0/0, some window managers (type A) puts the window manager<br>
	 * decorations outside the screen and FRAME_OUTER_WINDOW exactly at 0/0.<br>
	 * Other window managers (type B) puts the window including decorations<br>
	 * at 0/0, so FRAME_OUTER_WINDOW is a bit below 0/0.<br>
	 * Record the type of WM in use so we can compensate for type A WMs.<br>
	 * C type : wm_type_enum
	 */
	@Field(78) 
	public x_display_info wm_type(IntValuedEnum<x_display_info.wm_type_enum > wm_type) {
		this.io.setEnumField(this, 78, wm_type);
		return this;
	}
	/**
	 * Atoms that are drag and drop atoms<br>
	 * C type : Atom*
	 */
	@Field(79) 
	public Pointer<CLong > x_dnd_atoms() {
		return this.io.getPointerField(this, 79);
	}
	/**
	 * Atoms that are drag and drop atoms<br>
	 * C type : Atom*
	 */
	@Field(79) 
	public x_display_info x_dnd_atoms(Pointer<CLong > x_dnd_atoms) {
		this.io.setPointerField(this, 79, x_dnd_atoms);
		return this;
	}
	@Ptr 
	@Field(80) 
	public long x_dnd_atoms_size() {
		return this.io.getSizeTField(this, 80);
	}
	@Ptr 
	@Field(80) 
	public x_display_info x_dnd_atoms_size(long x_dnd_atoms_size) {
		this.io.setSizeTField(this, 80, x_dnd_atoms_size);
		return this;
	}
	@Ptr 
	@Field(81) 
	public long x_dnd_atoms_length() {
		return this.io.getSizeTField(this, 81);
	}
	@Ptr 
	@Field(81) 
	public x_display_info x_dnd_atoms_length(long x_dnd_atoms_length) {
		this.io.setSizeTField(this, 81, x_dnd_atoms_length);
		return this;
	}
	/**
	 * Extended window manager hints, Atoms supported by the window manager and<br>
	 * atoms for setting the window type.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(82) 
	public long Xatom_net_supported() {
		return this.io.getCLongField(this, 82);
	}
	/**
	 * Extended window manager hints, Atoms supported by the window manager and<br>
	 * atoms for setting the window type.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(82) 
	public x_display_info Xatom_net_supported(long Xatom_net_supported) {
		this.io.setCLongField(this, 82, Xatom_net_supported);
		return this;
	}
	/**
	 * Extended window manager hints, Atoms supported by the window manager and<br>
	 * atoms for setting the window type.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(83) 
	public long Xatom_net_supporting_wm_check() {
		return this.io.getCLongField(this, 83);
	}
	/**
	 * Extended window manager hints, Atoms supported by the window manager and<br>
	 * atoms for setting the window type.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(83) 
	public x_display_info Xatom_net_supporting_wm_check(long Xatom_net_supporting_wm_check) {
		this.io.setCLongField(this, 83, Xatom_net_supporting_wm_check);
		return this;
	}
	/// C type : Atom*
	@Field(84) 
	public Pointer<CLong > net_supported_atoms() {
		return this.io.getPointerField(this, 84);
	}
	/// C type : Atom*
	@Field(84) 
	public x_display_info net_supported_atoms(Pointer<CLong > net_supported_atoms) {
		this.io.setPointerField(this, 84, net_supported_atoms);
		return this;
	}
	@Field(85) 
	public int nr_net_supported_atoms() {
		return this.io.getIntField(this, 85);
	}
	@Field(85) 
	public x_display_info nr_net_supported_atoms(int nr_net_supported_atoms) {
		this.io.setIntField(this, 85, nr_net_supported_atoms);
		return this;
	}
	/// C type : Window
	@CLong 
	@Field(86) 
	public long net_supported_window() {
		return this.io.getCLongField(this, 86);
	}
	/// C type : Window
	@CLong 
	@Field(86) 
	public x_display_info net_supported_window(long net_supported_window) {
		this.io.setCLongField(this, 86, net_supported_window);
		return this;
	}
	/// C type : Atom
	@CLong 
	@Field(87) 
	public long Xatom_net_window_type() {
		return this.io.getCLongField(this, 87);
	}
	/// C type : Atom
	@CLong 
	@Field(87) 
	public x_display_info Xatom_net_window_type(long Xatom_net_window_type) {
		this.io.setCLongField(this, 87, Xatom_net_window_type);
		return this;
	}
	/// C type : Atom
	@CLong 
	@Field(88) 
	public long Xatom_net_window_type_tooltip() {
		return this.io.getCLongField(this, 88);
	}
	/// C type : Atom
	@CLong 
	@Field(88) 
	public x_display_info Xatom_net_window_type_tooltip(long Xatom_net_window_type_tooltip) {
		this.io.setCLongField(this, 88, Xatom_net_window_type_tooltip);
		return this;
	}
	/// C type : Atom
	@CLong 
	@Field(89) 
	public long Xatom_net_active_window() {
		return this.io.getCLongField(this, 89);
	}
	/// C type : Atom
	@CLong 
	@Field(89) 
	public x_display_info Xatom_net_active_window(long Xatom_net_active_window) {
		this.io.setCLongField(this, 89, Xatom_net_active_window);
		return this;
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(90) 
	public long Xatom_net_wm_state() {
		return this.io.getCLongField(this, 90);
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(90) 
	public x_display_info Xatom_net_wm_state(long Xatom_net_wm_state) {
		this.io.setCLongField(this, 90, Xatom_net_wm_state);
		return this;
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(91) 
	public long Xatom_net_wm_state_fullscreen() {
		return this.io.getCLongField(this, 91);
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(91) 
	public x_display_info Xatom_net_wm_state_fullscreen(long Xatom_net_wm_state_fullscreen) {
		this.io.setCLongField(this, 91, Xatom_net_wm_state_fullscreen);
		return this;
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(92) 
	public long Xatom_net_wm_state_maximized_horz() {
		return this.io.getCLongField(this, 92);
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(92) 
	public x_display_info Xatom_net_wm_state_maximized_horz(long Xatom_net_wm_state_maximized_horz) {
		this.io.setCLongField(this, 92, Xatom_net_wm_state_maximized_horz);
		return this;
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(93) 
	public long Xatom_net_wm_state_maximized_vert() {
		return this.io.getCLongField(this, 93);
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(93) 
	public x_display_info Xatom_net_wm_state_maximized_vert(long Xatom_net_wm_state_maximized_vert) {
		this.io.setCLongField(this, 93, Xatom_net_wm_state_maximized_vert);
		return this;
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(94) 
	public long Xatom_net_wm_state_sticky() {
		return this.io.getCLongField(this, 94);
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(94) 
	public x_display_info Xatom_net_wm_state_sticky(long Xatom_net_wm_state_sticky) {
		this.io.setCLongField(this, 94, Xatom_net_wm_state_sticky);
		return this;
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(95) 
	public long Xatom_net_wm_state_hidden() {
		return this.io.getCLongField(this, 95);
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(95) 
	public x_display_info Xatom_net_wm_state_hidden(long Xatom_net_wm_state_hidden) {
		this.io.setCLongField(this, 95, Xatom_net_wm_state_hidden);
		return this;
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(96) 
	public long Xatom_net_frame_extents() {
		return this.io.getCLongField(this, 96);
	}
	/**
	 * Atoms dealing with EWMH (i.e. _NET_...)<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(96) 
	public x_display_info Xatom_net_frame_extents(long Xatom_net_frame_extents) {
		this.io.setCLongField(this, 96, Xatom_net_frame_extents);
		return this;
	}
	/**
	 * XSettings atoms and windows.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(97) 
	public long Xatom_xsettings_sel() {
		return this.io.getCLongField(this, 97);
	}
	/**
	 * XSettings atoms and windows.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(97) 
	public x_display_info Xatom_xsettings_sel(long Xatom_xsettings_sel) {
		this.io.setCLongField(this, 97, Xatom_xsettings_sel);
		return this;
	}
	/**
	 * XSettings atoms and windows.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(98) 
	public long Xatom_xsettings_prop() {
		return this.io.getCLongField(this, 98);
	}
	/**
	 * XSettings atoms and windows.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(98) 
	public x_display_info Xatom_xsettings_prop(long Xatom_xsettings_prop) {
		this.io.setCLongField(this, 98, Xatom_xsettings_prop);
		return this;
	}
	/**
	 * XSettings atoms and windows.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(99) 
	public long Xatom_xsettings_mgr() {
		return this.io.getCLongField(this, 99);
	}
	/**
	 * XSettings atoms and windows.<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(99) 
	public x_display_info Xatom_xsettings_mgr(long Xatom_xsettings_mgr) {
		this.io.setCLongField(this, 99, Xatom_xsettings_mgr);
		return this;
	}
	/// C type : Window
	@CLong 
	@Field(100) 
	public long xsettings_window() {
		return this.io.getCLongField(this, 100);
	}
	/// C type : Window
	@CLong 
	@Field(100) 
	public x_display_info xsettings_window(long xsettings_window) {
		this.io.setCLongField(this, 100, xsettings_window);
		return this;
	}
	/**
	 * Frame name and icon name<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(101) 
	public long Xatom_net_wm_name() {
		return this.io.getCLongField(this, 101);
	}
	/**
	 * Frame name and icon name<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(101) 
	public x_display_info Xatom_net_wm_name(long Xatom_net_wm_name) {
		this.io.setCLongField(this, 101, Xatom_net_wm_name);
		return this;
	}
	/**
	 * Frame name and icon name<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(102) 
	public long Xatom_net_wm_icon_name() {
		return this.io.getCLongField(this, 102);
	}
	/**
	 * Frame name and icon name<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(102) 
	public x_display_info Xatom_net_wm_icon_name(long Xatom_net_wm_icon_name) {
		this.io.setCLongField(this, 102, Xatom_net_wm_icon_name);
		return this;
	}
	/**
	 * Frame opacity<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(103) 
	public long Xatom_net_wm_window_opacity() {
		return this.io.getCLongField(this, 103);
	}
	/**
	 * Frame opacity<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(103) 
	public x_display_info Xatom_net_wm_window_opacity(long Xatom_net_wm_window_opacity) {
		this.io.setCLongField(this, 103, Xatom_net_wm_window_opacity);
		return this;
	}
	/**
	 * SM<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(104) 
	public long Xatom_SM_CLIENT_ID() {
		return this.io.getCLongField(this, 104);
	}
	/**
	 * SM<br>
	 * C type : Atom
	 */
	@CLong 
	@Field(104) 
	public x_display_info Xatom_SM_CLIENT_ID(long Xatom_SM_CLIENT_ID) {
		this.io.setCLongField(this, 104, Xatom_SM_CLIENT_ID);
		return this;
	}
	/**
	 * enum values<br>
	 * <i>native declaration : xterm.h:2711</i>
	 */
	public enum wm_type_enum implements IntValuedEnum<wm_type_enum > {
		X_WMTYPE_UNKNOWN(0),
		X_WMTYPE_A(1),
		X_WMTYPE_B(2);
		wm_type_enum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<wm_type_enum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<wm_type_enum > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
}
