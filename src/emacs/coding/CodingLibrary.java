package emacs.coding;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>coding</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("coding") 
@Runtime(CRuntime.class) 
public class CodingLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:15</i>
	 */
	public enum define_coding_system_arg_index implements IntValuedEnum<define_coding_system_arg_index > {
		coding_arg_name(0),
		coding_arg_mnemonic(1),
		coding_arg_coding_type(2),
		coding_arg_charset_list(3),
		coding_arg_ascii_compatible_p(4),
		coding_arg_decode_translation_table(5),
		coding_arg_encode_translation_table(6),
		coding_arg_post_read_conversion(7),
		coding_arg_pre_write_conversion(8),
		coding_arg_default_char(9),
		coding_arg_for_unibyte(10),
		coding_arg_plist(11),
		coding_arg_eol_type(12),
		coding_arg_max(13);
		define_coding_system_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_system_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_system_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:22</i>
	 */
	public enum define_coding_iso2022_arg_index implements IntValuedEnum<define_coding_iso2022_arg_index > {
		coding_arg_iso2022_initial((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value()),
		coding_arg_iso2022_reg_usage((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 1),
		coding_arg_iso2022_request((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 2),
		coding_arg_iso2022_flags((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 3),
		coding_arg_iso2022_max((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 4);
		define_coding_iso2022_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_iso2022_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_iso2022_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:26</i>
	 */
	public enum define_coding_utf8_arg_index implements IntValuedEnum<define_coding_utf8_arg_index > {
		coding_arg_utf8_bom((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value()),
		coding_arg_utf8_max((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 1);
		define_coding_utf8_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_utf8_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_utf8_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:31</i>
	 */
	public enum define_coding_utf16_arg_index implements IntValuedEnum<define_coding_utf16_arg_index > {
		coding_arg_utf16_bom((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value()),
		coding_arg_utf16_endian((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 1),
		coding_arg_utf16_max((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 2);
		define_coding_utf16_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_utf16_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_utf16_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:37</i>
	 */
	public enum define_coding_ccl_arg_index implements IntValuedEnum<define_coding_ccl_arg_index > {
		coding_arg_ccl_decoder((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value()),
		coding_arg_ccl_encoder((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 1),
		coding_arg_ccl_valids((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 2),
		coding_arg_ccl_max((int)CodingLibrary.define_coding_system_arg_index.coding_arg_max.value() + 3);
		define_coding_ccl_arg_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<define_coding_ccl_arg_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<define_coding_ccl_arg_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:50</i>
	 */
	public enum coding_system_type implements IntValuedEnum<coding_system_type > {
		coding_type_charset(0),
		coding_type_utf_8(1),
		coding_type_utf_16(2),
		coding_type_iso_2022(3),
		coding_type_emacs_mule(4),
		coding_type_sjis(5),
		coding_type_ccl(6),
		coding_type_raw_text(7),
		coding_type_undecided(8),
		coding_type_max(9);
		coding_system_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<coding_system_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<coding_system_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:62</i>
	 */
	public enum end_of_line_type implements IntValuedEnum<end_of_line_type > {
		/**
		 * Line-feed only, same as Emacs' internal<br>
		 * format.
		 */
		eol_lf(0),
		/**
		 * Sequence of carriage-return and<br>
		 * line-feed.
		 */
		eol_crlf(1),
		/// Carriage-return only.
		eol_cr(2),
		/**
		 * Accept any of above.  Produce line-feed<br>
		 * only.
		 */
		eol_any(3),
		/**
		 * This value is used to denote that the<br>
		 * eol-type is not yet undecided.
		 */
		eol_undecided(4),
		eol_type_max(5);
		end_of_line_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<end_of_line_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<end_of_line_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:93</i>
	 */
	public enum coding_attr_index implements IntValuedEnum<coding_attr_index > {
		coding_attr_base_name(0),
		coding_attr_docstring(1),
		coding_attr_mnemonic(2),
		coding_attr_type(3),
		coding_attr_charset_list(4),
		coding_attr_ascii_compat(5),
		coding_attr_decode_tbl(6),
		coding_attr_encode_tbl(7),
		coding_attr_trans_tbl(8),
		coding_attr_post_read(9),
		coding_attr_pre_write(10),
		coding_attr_default_char(11),
		coding_attr_for_unibyte(12),
		coding_attr_plist(13),
		coding_attr_category(14),
		coding_attr_safe_charsets(15),
		/// The followings are extra attributes for each type.
		coding_attr_charset_valids(16),
		coding_attr_ccl_decoder(17),
		coding_attr_ccl_encoder(18),
		coding_attr_ccl_valids(19),
		coding_attr_iso_initial(20),
		coding_attr_iso_usage(21),
		coding_attr_iso_request(22),
		coding_attr_iso_flags(23),
		coding_attr_utf_bom(24),
		coding_attr_utf_16_endian(25),
		coding_attr_emacs_mule_full(26),
		coding_attr_last_index(27);
		coding_attr_index(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<coding_attr_index > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<coding_attr_index > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Enumeration of result code of code conversion.<br>
	 * enum values<br>
	 * <i>native declaration : coding.h:103</i>
	 */
	public enum coding_result_code implements IntValuedEnum<coding_result_code > {
		CODING_RESULT_SUCCESS(0),
		CODING_RESULT_INSUFFICIENT_SRC(1),
		CODING_RESULT_INSUFFICIENT_DST(2),
		CODING_RESULT_INCONSISTENT_EOL(3),
		CODING_RESULT_INVALID_SRC(4),
		CODING_RESULT_INTERRUPT(5),
		CODING_RESULT_INSUFFICIENT_MEM(6);
		coding_result_code(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<coding_result_code > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<coding_result_code > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Methods to display a sequence of components of a composition.<br>
	 * enum values<br>
	 * <i>native declaration : composite.h:120</i>
	 */
	public enum composition_method implements IntValuedEnum<composition_method > {
		/// Compose relatively without alternate characters.
		COMPOSITION_RELATIVE(0),
		/**
		 * Compose by specified composition rules.  This is not used in<br>
		 * Emacs 21 but we need it to decode files saved in the older<br>
		 * versions of Emacs.
		 */
		COMPOSITION_WITH_RULE(1),
		/// Compose relatively with alternate characters.
		COMPOSITION_WITH_ALTCHARS(2),
		/// Compose by specified composition rules with alternate characters.
		COMPOSITION_WITH_RULE_ALTCHARS(3),
		/// This is not a method.
		COMPOSITION_NO(4);
		composition_method(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<composition_method > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<composition_method > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Vector size of Lispy glyph.<br>
	 * enum values<br>
	 * <i>native declaration : composite.h:197</i>
	 */
	public enum lglyph_indices implements IntValuedEnum<lglyph_indices > {
		LGLYPH_IX_FROM(0),
		LGLYPH_IX_TO(1),
		LGLYPH_IX_CHAR(2),
		LGLYPH_IX_CODE(3),
		LGLYPH_IX_WIDTH(4),
		LGLYPH_IX_LBEARING(5),
		LGLYPH_IX_RBEARING(6),
		LGLYPH_IX_ASCENT(7),
		LGLYPH_IX_DESCENT(8),
		LGLYPH_IX_ADJUSTMENT(9),
		/// Not an index.
		LGLYPH_SIZE(10);
		lglyph_indices(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<lglyph_indices > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<lglyph_indices > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:223</i>
	 */
	public enum composition_state implements IntValuedEnum<composition_state > {
		COMPOSING_NO(0),
		COMPOSING_CHAR(1),
		COMPOSING_RULE(2),
		COMPOSING_COMPONENT_CHAR(3),
		COMPOSING_COMPONENT_RULE(4);
		composition_state(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<composition_state > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<composition_state > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:285</i>
	 */
	public enum utf_bom_type implements IntValuedEnum<utf_bom_type > {
		utf_detect_bom(0),
		utf_without_bom(1),
		utf_with_bom(2);
		utf_bom_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<utf_bom_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<utf_bom_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : coding.h:289</i>
	 */
	public enum utf_16_endian_type implements IntValuedEnum<utf_16_endian_type > {
		utf_16_big_endian(0),
		utf_16_little_endian(1);
		utf_16_endian_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<utf_16_endian_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<utf_16_endian_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_SAFE_ENCODING = (int)32;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_ANNOTATE_DIRECTION_MASK = (int)2;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_FOR_UNIBYTE_MASK = (int)256;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_REQUIRE_ENCODING_MASK = (int)2048;
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_TAIL = (int)2;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_DIRECTION = (int)8;
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_INSIDE = (int)4;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_REQUIRE_DECODING_MASK = (int)1024;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_FIXED_DESTINATION = (int)16;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_LAST_BLOCK = (int)2;
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_HEAD = (int)1;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_INHIBIT_INCONSISTENT_EOL = (int)1;
	/// <i>native declaration : composite.h</i>
	public static final int MAX_COMPOSITION_COMPONENTS = (int)16;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_ANNOTATE_CHARSET_MASK = (int)3;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_RESET_AT_BOL_MASK = (int)8192;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_REQUIRE_FLUSHING_MASK = (int)512;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_REQUIRE_DETECTION_MASK = (int)4096;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_MODE_SELECTIVE_DISPLAY = (int)4;
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_ALL = (int)((1 | 2) | 4);
	/// <i>native declaration : composite.h</i>
	public static final int CHECK_BORDER = (int)(1 | 2);
	/// <i>native declaration : coding.h</i>
	public static final int CODING_ANNOTATE_COMPOSITION_MASK = (int)1;
	/// <i>native declaration : coding.h</i>
	public static final int CODING_ANNOTATION_MASK = (int)255;
	/**
	 * Original signature : <code>ptrdiff_t get_composition_id(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:170</i>
	 */
	@Ptr 
	public static native long get_composition_id(CodingLibrary.Lisp_Object Lisp_Object1, CodingLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>int find_composition(EMACS_INT*, EMACS_INT*, Lisp_Object*, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:172</i>
	 */
	public static native int find_composition(Pointer<CodingLibrary.EMACS_INT > EMACS_INTPtr1, Pointer<CodingLibrary.EMACS_INT > EMACS_INTPtr2, Pointer<CodingLibrary.Lisp_Object > Lisp_ObjectPtr1, CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void update_compositions(int)</code><br>
	 * <i>native declaration : composite.h:174</i>
	 */
	public static native void update_compositions(int int1);
	/**
	 * Original signature : <code>void make_composition_value_copy(Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:176</i>
	 */
	public static native void make_composition_value_copy(CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>void compose_region(int, int, Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:178</i>
	 */
	public static native void compose_region(int int1, int int2, CodingLibrary.Lisp_Object Lisp_Object1, CodingLibrary.Lisp_Object Lisp_Object2, CodingLibrary.Lisp_Object Lisp_Object3);
	/**
	 * Original signature : <code>void syms_of_composite()</code><br>
	 * <i>native declaration : composite.h:180</i>
	 */
	public static native void syms_of_composite();
	/**
	 * Original signature : <code>void compose_text(Lisp_Object, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:182</i>
	 */
	public static native void compose_text(CodingLibrary.Lisp_Object Lisp_Object1, CodingLibrary.Lisp_Object Lisp_Object2, CodingLibrary.Lisp_Object Lisp_Object3);
	/**
	 * Original signature : <code>Lisp_Object composition_gstring_put_cache(Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:202</i>
	 */
	public static native CodingLibrary.Lisp_Object composition_gstring_put_cache(CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object composition_gstring_from_id(ptrdiff_t)</code><br>
	 * <i>native declaration : composite.h:204</i>
	 */
	public static native CodingLibrary.Lisp_Object composition_gstring_from_id(@Ptr long ptrdiff_t1);
	/**
	 * Original signature : <code>int composition_gstring_p(Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:206</i>
	 */
	public static native int composition_gstring_p(CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int composition_gstring_width(Lisp_Object, font_metrics*)</code><br>
	 * <i>native declaration : composite.h:208</i>
	 */
	public static native int composition_gstring_width(CodingLibrary.Lisp_Object Lisp_Object1, Pointer<CodingLibrary.font_metrics > font_metricsPtr1);
	/**
	 * Original signature : <code>void composition_compute_stop_pos(composition_it*, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:210</i>
	 */
	public static native void composition_compute_stop_pos(Pointer<CodingLibrary.composition_it > composition_itPtr1, CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int composition_reseat_it(composition_it*, window*, face*, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:212</i>
	 */
	public static native int composition_reseat_it(Pointer<CodingLibrary.composition_it > composition_itPtr1, Pointer<CodingLibrary.window > windowPtr1, Pointer<CodingLibrary.face > facePtr1, CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int composition_update_it(composition_it*, Lisp_Object)</code><br>
	 * <i>native declaration : composite.h:214</i>
	 */
	public static native int composition_update_it(Pointer<CodingLibrary.composition_it > composition_itPtr1, CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>EMACS_INT composition_adjust_point(EMACS_INT, EMACS_INT)</code><br>
	 * <i>native declaration : composite.h:216</i>
	 */
	public static native CodingLibrary.EMACS_INT composition_adjust_point(CodingLibrary.EMACS_INT EMACS_INT1, CodingLibrary.EMACS_INT EMACS_INT2);
	/**
	 * Extern declarations.<br>
	 * Original signature : <code>Lisp_Object code_conversion_save(int, int)</code><br>
	 * <i>native declaration : coding.h:417</i>
	 */
	public static native CodingLibrary.Lisp_Object code_conversion_save(int int1, int int2);
	/**
	 * Original signature : <code>int decoding_buffer_size(coding_system*, int)</code><br>
	 * <i>native declaration : coding.h:419</i>
	 */
	public static native int decoding_buffer_size(Pointer<coding_system > coding_systemPtr1, int int1);
	/**
	 * Original signature : <code>int encoding_buffer_size(coding_system*, int)</code><br>
	 * <i>native declaration : coding.h:421</i>
	 */
	public static native int encoding_buffer_size(Pointer<coding_system > coding_systemPtr1, int int1);
	/**
	 * Original signature : <code>void setup_coding_system(Lisp_Object, coding_system*)</code><br>
	 * <i>native declaration : coding.h:423</i>
	 */
	public static native void setup_coding_system(CodingLibrary.Lisp_Object Lisp_Object1, Pointer<coding_system > coding_systemPtr1);
	/**
	 * Original signature : <code>Lisp_Object coding_charset_list(coding_system*)</code><br>
	 * <i>native declaration : coding.h:425</i>
	 */
	public static native CodingLibrary.Lisp_Object coding_charset_list(Pointer<coding_system > coding_systemPtr1);
	/**
	 * Original signature : <code>Lisp_Object coding_system_charset_list(Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:427</i>
	 */
	public static native CodingLibrary.Lisp_Object coding_system_charset_list(CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object code_convert_string(Lisp_Object, Lisp_Object, Lisp_Object, int, int, int)</code><br>
	 * <i>native declaration : coding.h:429</i>
	 */
	public static native CodingLibrary.Lisp_Object code_convert_string(CodingLibrary.Lisp_Object Lisp_Object1, CodingLibrary.Lisp_Object Lisp_Object2, CodingLibrary.Lisp_Object Lisp_Object3, int int1, int int2, int int3);
	/**
	 * Original signature : <code>Lisp_Object code_convert_string_norecord(Lisp_Object, Lisp_Object, int)</code><br>
	 * <i>native declaration : coding.h:431</i>
	 */
	public static native CodingLibrary.Lisp_Object code_convert_string_norecord(CodingLibrary.Lisp_Object Lisp_Object1, CodingLibrary.Lisp_Object Lisp_Object2, int int1);
	/**
	 * Original signature : <code>Lisp_Object raw_text_coding_system(Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:433</i>
	 */
	public static native CodingLibrary.Lisp_Object raw_text_coding_system(CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>Lisp_Object coding_inherit_eol_type(Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:435</i>
	 */
	public static native CodingLibrary.Lisp_Object coding_inherit_eol_type(CodingLibrary.Lisp_Object Lisp_Object1, CodingLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object complement_process_encoding_system(Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:437</i>
	 */
	public static native CodingLibrary.Lisp_Object complement_process_encoding_system(CodingLibrary.Lisp_Object Lisp_Object1);
	/**
	 * Original signature : <code>int decode_coding_gap(coding_system*)</code><br>
	 * <i>native declaration : coding.h:439</i>
	 */
	public static native int decode_coding_gap(Pointer<coding_system > coding_systemPtr1);
	/**
	 * Original signature : <code>void decode_coding_object(coding_system*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:441</i>
	 */
	public static native void decode_coding_object(Pointer<coding_system > coding_systemPtr1, CodingLibrary.Lisp_Object Lisp_Object1, CodingLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>void encode_coding_object(coding_system*, Lisp_Object, Lisp_Object)</code><br>
	 * <i>native declaration : coding.h:443</i>
	 */
	public static native void encode_coding_object(Pointer<coding_system > coding_systemPtr1, CodingLibrary.Lisp_Object Lisp_Object1, CodingLibrary.Lisp_Object Lisp_Object2);
	/**
	 * Original signature : <code>Lisp_Object preferred_coding_system()</code><br>
	 * <i>native declaration : coding.h:445</i>
	 */
	public static native CodingLibrary.Lisp_Object preferred_coding_system();
	/**
	 * Original signature : <code>int emacs_mule_string_char(unsigned char*)</code><br>
	 * <i>native declaration : coding.h:464</i>
	 */
	public static native int emacs_mule_string_char(Pointer<Byte > charPtr1);
	/**
	 * Table of pointers to the structure `composition' indexed by<br>
	 * COMPOSITION-ID.<br>
	 * C type : extern composition**
	 */
	public Pointer<Pointer<composition > > composition_table() {
		try {
			return (Pointer<Pointer<composition > >)BridJ.getNativeLibrary("coding").getSymbolPointer("composition_table").as(DefaultParameterizedType.paramType(Pointer.class, DefaultParameterizedType.paramType(Pointer.class, composition.class))).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * Table of pointers to the structure `composition' indexed by<br>
	 * COMPOSITION-ID.<br>
	 * C type : extern composition**
	 */
	public CodingLibrary composition_table(Pointer<Pointer<composition > > composition_table) {
		try {
			{
				BridJ.getNativeLibrary("coding").getSymbolPointer("composition_table").as(DefaultParameterizedType.paramType(Pointer.class, DefaultParameterizedType.paramType(Pointer.class, composition.class))).set(composition_table);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Number of the currently registered compositions.
	@Ptr 
	public long n_compositions() {
		try {
			return (long)BridJ.getNativeLibrary("coding").getSymbolPointer("n_compositions").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Number of the currently registered compositions.
	@Ptr 
	public CodingLibrary n_compositions(long n_compositions) {
		try {
			{
				BridJ.getNativeLibrary("coding").getSymbolPointer("n_compositions").as(long.class).set(n_compositions);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern char[256]
	@Array({256}) 
	public Pointer<Byte > emacs_mule_bytes() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("coding").getSymbolPointer("emacs_mule_bytes").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface face {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface ccl_spec {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface window {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface composition_it {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface font_metrics {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface Lisp_Object {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface EMACS_INT {
		
	};
}
