(ns deuce.emacs
  (:refer-clojure :only [])
  ;; Temporary exclusions preparing for the future split
  (use [deuce.emacs-lisp]
       [deuce.emacs.alloc :exclude (list)]
       [deuce.emacs.buffer]
       [deuce.emacs.bytecode]
       [deuce.emacs.callint]
       [deuce.emacs.callproc]
       [deuce.emacs.casefiddle]
       [deuce.emacs.casetab]
       [deuce.emacs.category]
       [deuce.emacs.ccl]
       [deuce.emacs.character]
       [deuce.emacs.charset]
       [deuce.emacs.chartab]
       [deuce.emacs.cmds]
       [deuce.emacs.coding]
       [deuce.emacs.composite]
       [deuce.emacs.data  :exclude (set / +)]
       [deuce.emacs.dired]
       [deuce.emacs.dispnew]
       [deuce.emacs.doc]
       [deuce.emacs.editfns]
       [deuce.emacs.emacs]
       [deuce.emacs.eval :exclude (throw funcall eval)]
       [deuce.emacs.fileio]
       [deuce.emacs.filelock]
       [deuce.emacs.floatfns]
       [deuce.emacs.fns]
       [deuce.emacs.font]
       [deuce.emacs.frame]
       [deuce.emacs.indent]
       [deuce.emacs.insdel]
       [deuce.emacs.keyboard]
       [deuce.emacs.keymap]
       [deuce.emacs.lread]
       [deuce.emacs.macros]
       [deuce.emacs.marker]
       [deuce.emacs.menu]
       [deuce.emacs.minibuf]
       [deuce.emacs.print]
       [deuce.emacs.process]
       [deuce.emacs.search]
       [deuce.emacs.syntax]
       [deuce.emacs.term]
       [deuce.emacs.terminal]
       [deuce.emacs.textprop]
       [deuce.emacs.undo]
       [deuce.emacs.window]
       [deuce.emacs.xdisp]
       [deuce.emacs.xfaces]
       [deuce.emacs.xml]))